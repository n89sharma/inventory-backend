
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  serial_number: 'serial_number',
  brand_id: 'brand_id',
  model_id: 'model_id',
  warehouse_id: 'warehouse_id',
  asset_location: 'asset_location',
  asset_type: 'asset_type',
  tracking_status: 'tracking_status',
  exit_status: 'exit_status',
  technical_status: 'technical_status',
  purchase_invoice_id: 'purchase_invoice_id',
  sales_invoice_id: 'sales_invoice_id',
  arrival_id: 'arrival_id',
  departure_id: 'departure_id',
  hold_id: 'hold_id',
  is_held: 'is_held',
  created_at: 'created_at'
};

exports.Prisma.TechnicalSpecificationScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  cassettes: 'cassettes',
  internal_finisher: 'internal_finisher',
  meter_black: 'meter_black',
  meter_colour: 'meter_colour',
  meter_total: 'meter_total',
  drum_life_c: 'drum_life_c',
  drum_life_m: 'drum_life_m',
  drum_life_y: 'drum_life_y',
  drum_life_k: 'drum_life_k'
};

exports.Prisma.CostScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  purchase_cost: 'purchase_cost',
  transport_cost: 'transport_cost',
  processing_cost: 'processing_cost',
  other_cost: 'other_cost',
  parts_cost: 'parts_cost',
  total_cost: 'total_cost',
  sale_price: 'sale_price'
};

exports.Prisma.AssetAccessoryScalarFieldEnum = {
  asset_id: 'asset_id',
  accessory: 'accessory'
};

exports.Prisma.ErrorCategoryScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  category: 'category'
};

exports.Prisma.ErrorScalarFieldEnum = {
  id: 'id',
  error_category_id: 'error_category_id',
  code: 'code',
  description: 'description'
};

exports.Prisma.AssetErrorScalarFieldEnum = {
  asset_id: 'asset_id',
  error_id: 'error_id',
  is_fixed: 'is_fixed',
  added_by: 'added_by',
  added_at: 'added_at',
  fixed_by: 'fixed_by',
  fixed_at: 'fixed_at'
};

exports.Prisma.PartScalarFieldEnum = {
  id: 'id',
  description: 'description',
  part_number: 'part_number',
  dealer_price: 'dealer_price',
  sale_price: 'sale_price',
  cost: 'cost'
};

exports.Prisma.AssetPartScalarFieldEnum = {
  asset_id: 'asset_id',
  part_id: 'part_id',
  updated_at: 'updated_at',
  updated_by: 'updated_by',
  part_operation: 'part_operation'
};

exports.Prisma.TransferScalarFieldEnum = {
  id: 'id',
  transfer_number: 'transfer_number',
  origin_id: 'origin_id',
  destination_id: 'destination_id',
  transporter_id: 'transporter_id',
  created_by_id: 'created_by_id',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.AssetTransferScalarFieldEnum = {
  asset_id: 'asset_id',
  transfer_id: 'transfer_id'
};

exports.Prisma.ArrivalScalarFieldEnum = {
  id: 'id',
  arrival_number: 'arrival_number',
  origin_id: 'origin_id',
  destination_id: 'destination_id',
  transporter_id: 'transporter_id',
  created_by_id: 'created_by_id',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.DepartureScalarFieldEnum = {
  id: 'id',
  departure_number: 'departure_number',
  origin_id: 'origin_id',
  destination_id: 'destination_id',
  transporter_id: 'transporter_id',
  created_by_id: 'created_by_id',
  sales_representative_id: 'sales_representative_id',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.HoldScalarFieldEnum = {
  id: 'id',
  hold_number: 'hold_number',
  created_by_id: 'created_by_id',
  created_for_id: 'created_for_id',
  customer_id: 'customer_id',
  notes: 'notes',
  created_at: 'created_at'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoice_number: 'invoice_number',
  organization_id: 'organization_id',
  updated_by_id: 'updated_by_id',
  is_cleared: 'is_cleared',
  created_at: 'created_at',
  invoice_type: 'invoice_type'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  id: 'id',
  city_code: 'city_code',
  street: 'street'
};

exports.Prisma.LocationScalarFieldEnum = {
  warehouse_id: 'warehouse_id',
  location: 'location'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  asset_type: 'asset_type',
  weight: 'weight',
  size: 'size',
  brand_id: 'brand_id'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  uploaded_by_id: 'uploaded_by_id',
  name: 'name',
  type: 'type',
  data: 'data',
  url: 'url',
  size: 'size',
  uploaded_at: 'uploaded_at'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  created_by_id: 'created_by_id',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  googleId: 'googleId',
  role: 'role'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  account_number: 'account_number',
  name: 'name',
  contact_name: 'contact_name',
  phone: 'phone',
  phone_ext: 'phone_ext',
  primary_email: 'primary_email',
  secondary_email: 'secondary_email',
  address: 'address',
  city: 'city',
  province: 'province',
  country: 'country',
  website: 'website'
};

exports.Prisma.AssetHistoryScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  user_id: 'user_id',
  operation: 'operation',
  data_field: 'data_field',
  changed_on: 'changed_on',
  changes: 'changes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AssetType = exports.$Enums.AssetType = {
  COPIER: 'COPIER',
  FINISHER: 'FINISHER',
  ACCESSORY: 'ACCESSORY',
  SCANNER: 'SCANNER',
  PLOTTER: 'PLOTTER',
  PRINTER: 'PRINTER',
  WAREHOUSE_SUPPLIES: 'WAREHOUSE_SUPPLIES',
  FAX: 'FAX'
};

exports.TrackingStatus = exports.$Enums.TrackingStatus = {
  UNKNOWN: 'UNKNOWN',
  MISSING: 'MISSING',
  IN_TRANSIT: 'IN_TRANSIT',
  IN_STOCK: 'IN_STOCK',
  DEPARTED: 'DEPARTED'
};

exports.ExitStatus = exports.$Enums.ExitStatus = {
  UNKNOWN: 'UNKNOWN',
  OWNED: 'OWNED',
  SOLD: 'SOLD',
  PARTS: 'PARTS',
  SCRAP: 'SCRAP',
  RETURNED: 'RETURNED',
  LEASED: 'LEASED'
};

exports.TechnicalStatus = exports.$Enums.TechnicalStatus = {
  NOT_TESTED: 'NOT_TESTED',
  OK: 'OK',
  ERROR: 'ERROR',
  PREPARED: 'PREPARED',
  PENDING: 'PENDING'
};

exports.Accessory = exports.$Enums.Accessory = {
  NIC: 'NIC',
  PS: 'PS',
  PCL: 'PCL',
  UFR: 'UFR',
  FAX: 'FAX',
  USEND: 'USEND',
  DF: 'DF',
  CASS: 'CASS',
  FIN: 'FIN',
  BF: 'BF'
};

exports.PartOperation = exports.$Enums.PartOperation = {
  ADDED: 'ADDED',
  REMOVED: 'REMOVED'
};

exports.InvoiceType = exports.$Enums.InvoiceType = {
  PURCHASE: 'PURCHASE',
  SALE: 'SALE',
  OTHER: 'OTHER'
};

exports.FileType = exports.$Enums.FileType = {
  PDF: 'PDF',
  IMAGE: 'IMAGE'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  FINANCE: 'FINANCE',
  SALES: 'SALES'
};

exports.GeneralOperation = exports.$Enums.GeneralOperation = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE'
};

exports.DataField = exports.$Enums.DataField = {
  location: 'location',
  tracking_status: 'tracking_status',
  technical_status: 'technical_status',
  exit_status: 'exit_status',
  purchase_invoice: 'purchase_invoice',
  sales_invoice: 'sales_invoice',
  arrival: 'arrival',
  departure: 'departure',
  transfer: 'transfer',
  hold: 'hold',
  cost: 'cost',
  technical_specification: 'technical_specification',
  error: 'error',
  accessory: 'accessory',
  part: 'part'
};

exports.Prisma.ModelName = {
  Asset: 'Asset',
  TechnicalSpecification: 'TechnicalSpecification',
  Cost: 'Cost',
  AssetAccessory: 'AssetAccessory',
  ErrorCategory: 'ErrorCategory',
  Error: 'Error',
  AssetError: 'AssetError',
  Part: 'Part',
  AssetPart: 'AssetPart',
  Transfer: 'Transfer',
  AssetTransfer: 'AssetTransfer',
  Arrival: 'Arrival',
  Departure: 'Departure',
  Hold: 'Hold',
  Invoice: 'Invoice',
  Warehouse: 'Warehouse',
  Location: 'Location',
  Brand: 'Brand',
  Model: 'Model',
  File: 'File',
  Comment: 'Comment',
  User: 'User',
  Organization: 'Organization',
  AssetHistory: 'AssetHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
