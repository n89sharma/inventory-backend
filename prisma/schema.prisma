datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

// ENUMS
enum Accessory {
  NIC
  PS
  PCL
  UFR
  FAX
  USEND
  DF
  CASS
  FIN
  BF
}

enum AssetType {
  COPIER
  FINISHER
  ACCESSORY
  SCANNER
  PLOTTER
  PRINTER
  WAREHOUSE_SUPPLIES
  FAX
}

enum TrackingStatus {
  UNKNOWN
  MISSING
  IN_TRANSIT
  IN_STOCK
  DEPARTED
}

enum ExitStatus {
  UNKNOWN
  OWNED
  SOLD
  PARTS
  SCRAP
  RETURNED
  LEASED
}

enum TechnicalStatus {
  NOT_TESTED
  OK
  ERROR
  PREPARED
  PENDING
}

enum Role {
  ADMIN
  USER
  FINANCE
  SALES
}

enum FileType {
  PDF
  IMAGE
}

enum GeneralOperation {
  CREATE
  UPDATE
  DELETE
}

enum PartOperation {
  ADDED
  REMOVED
}

enum InvoiceType {
  PURCHASE
  SALE
  OTHER
}

enum DataField {
  location
  tracking_status
  technical_status
  exit_status
  purchase_invoice
  sales_invoice
  arrival
  departure
  transfer
  hold
  cost
  technical_specification
  error
  accessory
  part
}

// MODELS
model Asset {
  id                        Int                      @id @default(autoincrement())
  barcode                   String                   @unique @db.VarChar(15)
  serial_number             String                   @db.VarChar(50)
  brand_id                  Int
  model_id                  Int
  warehouse_id              Int
  asset_location            String?  @db.VarChar(25)
  asset_type                AssetType
  tracking_status           TrackingStatus
  exit_status               ExitStatus
  technical_status          TechnicalStatus
  purchase_invoice_id       Int?
  sales_invoice_id          Int?
  arrival_id                Int?
  departure_id              Int?
  hold_id                   Int?
  is_held                   Boolean
  cost                      Cost?
  technical_specification   TechnicalSpecification?
  created_at                DateTime

  brand                     Brand                    @relation(fields: [brand_id], references: [id])
  model                     Model                    @relation(fields: [model_id], references: [id])
  warehouse                 Warehouse                @relation(fields: [warehouse_id], references: [id])
  location                  Location?                @relation(fields: [warehouse_id, asset_location], references: [warehouse_id, location])
  purchase_invoice          Invoice?                 @relation("PurchaseInvoice", fields: [purchase_invoice_id], references: [id])
  sales_invoice             Invoice?                 @relation("SalesInvoice", fields: [sales_invoice_id], references: [id])
  arrival                   Arrival?                 @relation(fields: [arrival_id], references: [id])
  departure                 Departure?               @relation(fields: [departure_id], references: [id])
  hold                      Hold?                    @relation(fields: [hold_id], references: [id])
  asset_accessories         AssetAccessory[]
  asset_errors              AssetError[]
  asset_parts               AssetPart[]
  asset_transfers           AssetTransfer[]
  files                     File[]
  comments                  Comment[]
  asset_history             AssetHistory[]
}

model TechnicalSpecification {
  id                 Int     @id @default(autoincrement())
  asset_id           Int     @unique
  cassettes          Int?
  internal_finisher  String? @db.VarChar(15)
  meter_black        Int?
  meter_colour       Int?
  meter_total        Int?
  drum_life_c        Int?
  drum_life_m        Int?
  drum_life_y        Int?
  drum_life_k        Int?

  asset              Asset   @relation(fields: [asset_id], references: [id])
}

model Cost {
  id                Int     @id @default(autoincrement())
  asset_id          Int     @unique
  purchase_cost     Decimal? @db.Money
  transport_cost    Decimal? @db.Money
  processing_cost   Decimal? @db.Money
  other_cost        Decimal? @db.Money
  parts_cost        Decimal? @db.Money
  total_cost        Decimal? @db.Money
  sale_price        Decimal? @db.Money

  asset             Asset   @relation(fields: [asset_id], references: [id])
}

model AssetAccessory {
  asset_id   Int
  accessory  Accessory

  asset      Asset    @relation(fields: [asset_id], references: [id])

  @@id([asset_id, accessory])
}

model ErrorCategory {
  id        Int     @id @default(autoincrement())
  brand_id  Int
  category  String  @unique @db.VarChar(100)

  brand     Brand   @relation(fields: [brand_id], references: [id])
  errors    Error[]
}

model Error {
  id                  Int             @id @default(autoincrement())
  error_category_id   Int
  code                String          @unique @db.VarChar(15)
  description         String?

  category            ErrorCategory   @relation(fields: [error_category_id], references: [id])
  asset_errors        AssetError[]
}

model AssetError {
  asset_id     Int
  error_id     Int
  is_fixed     Boolean
  added_by     Int
  added_at     DateTime
  fixed_by     Int?
  fixed_at     DateTime?

  asset        Asset      @relation(fields: [asset_id], references: [id])
  error        Error      @relation(fields: [error_id], references: [id])
  addedBy      User       @relation("ErrorAddedBy", fields: [added_by], references: [id])
  fixedBy      User?      @relation("ErrorFixedBy", fields: [fixed_by], references: [id])

  @@id([asset_id, error_id])
}

model Part {
  id            Int     @id @default(autoincrement())
  description   String  @db.VarChar(100)
  part_number   String  @unique @db.VarChar(25)
  dealer_price  Decimal @db.Money
  sale_price    Decimal @db.Money
  cost          Decimal @db.Money
  asset_parts   AssetPart[]
}

model AssetPart {
  asset_id     Int
  part_id      Int
  updated_at   DateTime
  updated_by   Int
  part_operation PartOperation

  asset        Asset   @relation(fields: [asset_id], references: [id])
  part         Part    @relation(fields: [part_id], references: [id])
  updatedBy    User    @relation(fields: [updated_by], references: [id])

  @@id([asset_id, part_id])
}

model Transfer {
  id               Int      @id @default(autoincrement())
  transfer_number  String   @unique @db.VarChar(15)
  origin_id        Int
  destination_id   Int
  transporter_id   Int
  created_by_id    Int
  notes            String?
  created_at       DateTime

  origin           Warehouse     @relation("TransferOrigin", fields: [origin_id], references: [id])
  destination      Warehouse     @relation("TransferDestination", fields: [destination_id], references: [id])
  transporter      Organization  @relation(fields: [transporter_id], references: [id])
  created_by             User          @relation(fields: [created_by_id], references: [id])
  asset_transfers  AssetTransfer[]
}

model AssetTransfer {
  asset_id    Int
  transfer_id Int

  asset       Asset     @relation(fields: [asset_id], references: [id])
  transfer    Transfer  @relation(fields: [transfer_id], references: [id])

  @@id([asset_id, transfer_id])
}

model Arrival {
  id              Int      @id @default(autoincrement())
  arrival_number  String   @unique @db.VarChar(15)
  origin_id       Int
  destination_id  Int
  transporter_id  Int
  created_by_id   Int
  notes           String?
  created_at      DateTime

  origin          Organization @relation("ArrivalOrigin", fields: [origin_id], references: [id])
  destination     Warehouse    @relation(fields: [destination_id], references: [id])
  transporter     Organization @relation("ArrivalTransporter", fields: [transporter_id], references: [id])
  created_by      User         @relation(fields: [created_by_id], references: [id])
  assets          Asset[]
}

model Departure {
  id                     Int      @id @default(autoincrement())
  departure_number       String   @unique @db.VarChar(15)
  origin_id              Int
  destination_id         Int
  transporter_id         Int
  created_by_id                Int
  sales_representative_id Int
  notes                  String?
  created_at             DateTime

  origin                 Warehouse     @relation(fields: [origin_id], references: [id])
  destination            Organization  @relation(fields: [destination_id], references: [id])
  transporter            Organization  @relation("DepartureTransporter", fields: [transporter_id], references: [id])
  created_by                   User          @relation(fields: [created_by_id], references: [id])
  sales_representative   User          @relation("SalesRep", fields: [sales_representative_id], references: [id])
  assets                 Asset[]
}

model Hold {
  id             Int      @id @default(autoincrement())
  hold_number    String   @unique @db.VarChar(15)
  created_by_id  Int
  created_for_id Int
  customer_id    Int
  notes          String?
  created_at     DateTime

  created_by     User         @relation("HoldCreatedBy", fields: [created_by_id], references: [id])
  created_for    User         @relation("HoldCreatedFor", fields: [created_for_id], references: [id])
  customer       Organization @relation(fields: [customer_id], references: [id])
  assets         Asset[]
}

model Invoice {
  id                Int      @id @default(autoincrement())
  invoice_number    String   @db.VarChar(50)
  organization_id   Int
  updated_by_id     Int
  is_cleared        Boolean
  created_at        DateTime
  invoice_type      InvoiceType

  organization      Organization @relation(fields: [organization_id], references: [id])
  updated_by        User         @relation(fields: [updated_by_id], references: [id])
  purchase_assets   Asset[]      @relation("PurchaseInvoice")
  sales_assets      Asset[]      @relation("SalesInvoice")
}

model Warehouse {
  id         Int     @id @default(autoincrement())
  city_code  String  @unique @db.VarChar(3)
  street     String  @db.VarChar(50)
  assets     Asset[]
  origin_transfers Transfer[]       @relation("TransferOrigin")
  destination_transfers Transfer[]  @relation("TransferDestination")
  departures Departure[]            
  arrivals Arrival[]
  locations Location[]
}

model Location {
  warehouse_id Int
  location  String  @db.VarChar(25) 
  
  warehouse Warehouse @relation(fields: [warehouse_id], references: [id])
  assets    Asset[]
  @@id([warehouse_id, location])
}

model Brand {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(45)
  models Model[]
  errorCategories ErrorCategory[]
  assets Asset[]
}

model Model {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  asset_type  AssetType
  weight      Float
  size        Float

  brand       Brand      @relation(fields: [brand_id], references: [id])
  brand_id    Int
  assets      Asset[]

  @@unique([name, brand_id])
}

model File {
  id              Int      @id @default(autoincrement())
  asset_id        Int
  uploaded_by_id  Int
  name            String   @db.VarChar(255)
  type            FileType
  data            Bytes
  url             String
  size            Int
  uploaded_at     DateTime

  asset           Asset     @relation(fields: [asset_id], references: [id])
  uploaded_by     User      @relation(fields: [uploaded_by_id], references: [id])
}

model Comment {
  id          Int      @id @default(autoincrement())
  asset_id    Int
  created_by_id     Int
  comment     String
  created_at  DateTime
  updated_at  DateTime

  asset       Asset     @relation(fields: [asset_id], references: [id])
  created_by  User      @relation(fields: [created_by_id], references: [id])
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(150)
  name          String   @unique @db.VarChar(150)
  googleId      String?  @unique @db.VarChar(255)
  role          Role

  asset_errors_added AssetError[] @relation("ErrorAddedBy")
  asset_errors_fixed AssetError[] @relation("ErrorFixedBy")
  transfers     Transfer[]
  departures    Departure[]
  departure_sales_reps Departure[] @relation("SalesRep")
  arrivals      Arrival[]
  holds_created Hold[] @relation("HoldCreatedBy")
  holds_for     Hold[] @relation("HoldCreatedFor")
  invoices_updated Invoice[]
  files         File[]
  comments      Comment[]
  asset_history AssetHistory[]
  asset_parts   AssetPart[]
}

model Organization {
  id                Int      @id @default(autoincrement())
  account_number    String   @unique @db.VarChar(15)
  name              String   @db.VarChar(45)
  contact_name      String?  @db.VarChar(45)
  phone             String?  @db.VarChar(15)
  phone_ext         String?  @db.VarChar(10)
  primary_email     String?  @db.VarChar(50)
  secondary_email   String?  @db.VarChar(50)
  address           String?  @db.VarChar(100)
  city              String?  @db.VarChar(50)
  province          String?  @db.VarChar(50)
  country           String?  @db.VarChar(50)
  website           String?  @db.VarChar(100)

  invoices          Invoice[]
  arrivals_origin   Arrival[] @relation("ArrivalOrigin")
  arrivals_transporter Arrival[] @relation("ArrivalTransporter")
  departures_destination Departure[]
  departures_transporter Departure[] @relation("DepartureTransporter")
  holds             Hold[]
  transfers         Transfer[]

  @@index([name, contact_name, primary_email])
}

model AssetHistory {
  id           Int        @id @default(autoincrement())
  asset_id     Int
  user_id      Int
  operation    GeneralOperation
  data_field   DataField
  changed_on   DateTime
  changes      Json

  asset        Asset     @relation(fields: [asset_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])
}
