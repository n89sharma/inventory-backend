
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.js"
import { type PrismaClient } from "./class.js"

export type * from '../models.js'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
export const prismaVersion: PrismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Asset: 'Asset',
  TechnicalSpecification: 'TechnicalSpecification',
  Cost: 'Cost',
  AssetAccessory: 'AssetAccessory',
  ErrorCategory: 'ErrorCategory',
  Error: 'Error',
  AssetError: 'AssetError',
  Part: 'Part',
  AssetPart: 'AssetPart',
  Transfer: 'Transfer',
  AssetTransfer: 'AssetTransfer',
  Arrival: 'Arrival',
  Departure: 'Departure',
  Hold: 'Hold',
  Invoice: 'Invoice',
  Warehouse: 'Warehouse',
  Location: 'Location',
  Brand: 'Brand',
  Model: 'Model',
  File: 'File',
  Comment: 'Comment',
  User: 'User',
  Organization: 'Organization',
  AssetHistory: 'AssetHistory'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "asset" | "technicalSpecification" | "cost" | "assetAccessory" | "errorCategory" | "error" | "assetError" | "part" | "assetPart" | "transfer" | "assetTransfer" | "arrival" | "departure" | "hold" | "invoice" | "warehouse" | "location" | "brand" | "model" | "file" | "comment" | "user" | "organization" | "assetHistory"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Asset: {
      payload: Prisma.$AssetPayload<ExtArgs>
      fields: Prisma.AssetFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssetFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssetFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>
        }
        findFirst: {
          args: Prisma.AssetFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssetFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>
        }
        findMany: {
          args: Prisma.AssetFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>[]
        }
        create: {
          args: Prisma.AssetCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>
        }
        createMany: {
          args: Prisma.AssetCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssetCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>[]
        }
        delete: {
          args: Prisma.AssetDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>
        }
        update: {
          args: Prisma.AssetUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>
        }
        deleteMany: {
          args: Prisma.AssetDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssetUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssetUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>[]
        }
        upsert: {
          args: Prisma.AssetUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPayload>
        }
        aggregate: {
          args: Prisma.AssetAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAsset>
        }
        groupBy: {
          args: Prisma.AssetGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssetCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetCountAggregateOutputType> | number
        }
      }
    }
    TechnicalSpecification: {
      payload: Prisma.$TechnicalSpecificationPayload<ExtArgs>
      fields: Prisma.TechnicalSpecificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TechnicalSpecificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TechnicalSpecificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>
        }
        findFirst: {
          args: Prisma.TechnicalSpecificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TechnicalSpecificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>
        }
        findMany: {
          args: Prisma.TechnicalSpecificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>[]
        }
        create: {
          args: Prisma.TechnicalSpecificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>
        }
        createMany: {
          args: Prisma.TechnicalSpecificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TechnicalSpecificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>[]
        }
        delete: {
          args: Prisma.TechnicalSpecificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>
        }
        update: {
          args: Prisma.TechnicalSpecificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>
        }
        deleteMany: {
          args: Prisma.TechnicalSpecificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TechnicalSpecificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TechnicalSpecificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>[]
        }
        upsert: {
          args: Prisma.TechnicalSpecificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TechnicalSpecificationPayload>
        }
        aggregate: {
          args: Prisma.TechnicalSpecificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTechnicalSpecification>
        }
        groupBy: {
          args: Prisma.TechnicalSpecificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechnicalSpecificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.TechnicalSpecificationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TechnicalSpecificationCountAggregateOutputType> | number
        }
      }
    }
    Cost: {
      payload: Prisma.$CostPayload<ExtArgs>
      fields: Prisma.CostFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CostFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CostFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>
        }
        findFirst: {
          args: Prisma.CostFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CostFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>
        }
        findMany: {
          args: Prisma.CostFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>[]
        }
        create: {
          args: Prisma.CostCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>
        }
        createMany: {
          args: Prisma.CostCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CostCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>[]
        }
        delete: {
          args: Prisma.CostDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>
        }
        update: {
          args: Prisma.CostUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>
        }
        deleteMany: {
          args: Prisma.CostDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CostUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CostUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>[]
        }
        upsert: {
          args: Prisma.CostUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CostPayload>
        }
        aggregate: {
          args: Prisma.CostAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCost>
        }
        groupBy: {
          args: Prisma.CostGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CostGroupByOutputType>[]
        }
        count: {
          args: Prisma.CostCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CostCountAggregateOutputType> | number
        }
      }
    }
    AssetAccessory: {
      payload: Prisma.$AssetAccessoryPayload<ExtArgs>
      fields: Prisma.AssetAccessoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssetAccessoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssetAccessoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>
        }
        findFirst: {
          args: Prisma.AssetAccessoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssetAccessoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>
        }
        findMany: {
          args: Prisma.AssetAccessoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>[]
        }
        create: {
          args: Prisma.AssetAccessoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>
        }
        createMany: {
          args: Prisma.AssetAccessoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssetAccessoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>[]
        }
        delete: {
          args: Prisma.AssetAccessoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>
        }
        update: {
          args: Prisma.AssetAccessoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>
        }
        deleteMany: {
          args: Prisma.AssetAccessoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssetAccessoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssetAccessoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>[]
        }
        upsert: {
          args: Prisma.AssetAccessoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetAccessoryPayload>
        }
        aggregate: {
          args: Prisma.AssetAccessoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssetAccessory>
        }
        groupBy: {
          args: Prisma.AssetAccessoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetAccessoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssetAccessoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetAccessoryCountAggregateOutputType> | number
        }
      }
    }
    ErrorCategory: {
      payload: Prisma.$ErrorCategoryPayload<ExtArgs>
      fields: Prisma.ErrorCategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ErrorCategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ErrorCategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>
        }
        findFirst: {
          args: Prisma.ErrorCategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ErrorCategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>
        }
        findMany: {
          args: Prisma.ErrorCategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>[]
        }
        create: {
          args: Prisma.ErrorCategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>
        }
        createMany: {
          args: Prisma.ErrorCategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ErrorCategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>[]
        }
        delete: {
          args: Prisma.ErrorCategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>
        }
        update: {
          args: Prisma.ErrorCategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>
        }
        deleteMany: {
          args: Prisma.ErrorCategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ErrorCategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ErrorCategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>[]
        }
        upsert: {
          args: Prisma.ErrorCategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorCategoryPayload>
        }
        aggregate: {
          args: Prisma.ErrorCategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateErrorCategory>
        }
        groupBy: {
          args: Prisma.ErrorCategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ErrorCategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.ErrorCategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ErrorCategoryCountAggregateOutputType> | number
        }
      }
    }
    Error: {
      payload: Prisma.$ErrorPayload<ExtArgs>
      fields: Prisma.ErrorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ErrorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ErrorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        findFirst: {
          args: Prisma.ErrorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ErrorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        findMany: {
          args: Prisma.ErrorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>[]
        }
        create: {
          args: Prisma.ErrorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        createMany: {
          args: Prisma.ErrorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ErrorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>[]
        }
        delete: {
          args: Prisma.ErrorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        update: {
          args: Prisma.ErrorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        deleteMany: {
          args: Prisma.ErrorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ErrorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ErrorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>[]
        }
        upsert: {
          args: Prisma.ErrorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ErrorPayload>
        }
        aggregate: {
          args: Prisma.ErrorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateError>
        }
        groupBy: {
          args: Prisma.ErrorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ErrorGroupByOutputType>[]
        }
        count: {
          args: Prisma.ErrorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ErrorCountAggregateOutputType> | number
        }
      }
    }
    AssetError: {
      payload: Prisma.$AssetErrorPayload<ExtArgs>
      fields: Prisma.AssetErrorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssetErrorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssetErrorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>
        }
        findFirst: {
          args: Prisma.AssetErrorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssetErrorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>
        }
        findMany: {
          args: Prisma.AssetErrorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>[]
        }
        create: {
          args: Prisma.AssetErrorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>
        }
        createMany: {
          args: Prisma.AssetErrorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssetErrorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>[]
        }
        delete: {
          args: Prisma.AssetErrorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>
        }
        update: {
          args: Prisma.AssetErrorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>
        }
        deleteMany: {
          args: Prisma.AssetErrorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssetErrorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssetErrorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>[]
        }
        upsert: {
          args: Prisma.AssetErrorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetErrorPayload>
        }
        aggregate: {
          args: Prisma.AssetErrorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssetError>
        }
        groupBy: {
          args: Prisma.AssetErrorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetErrorGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssetErrorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetErrorCountAggregateOutputType> | number
        }
      }
    }
    Part: {
      payload: Prisma.$PartPayload<ExtArgs>
      fields: Prisma.PartFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PartFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PartFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>
        }
        findFirst: {
          args: Prisma.PartFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PartFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>
        }
        findMany: {
          args: Prisma.PartFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>[]
        }
        create: {
          args: Prisma.PartCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>
        }
        createMany: {
          args: Prisma.PartCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PartCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>[]
        }
        delete: {
          args: Prisma.PartDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>
        }
        update: {
          args: Prisma.PartUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>
        }
        deleteMany: {
          args: Prisma.PartDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PartUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PartUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>[]
        }
        upsert: {
          args: Prisma.PartUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PartPayload>
        }
        aggregate: {
          args: Prisma.PartAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePart>
        }
        groupBy: {
          args: Prisma.PartGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PartGroupByOutputType>[]
        }
        count: {
          args: Prisma.PartCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PartCountAggregateOutputType> | number
        }
      }
    }
    AssetPart: {
      payload: Prisma.$AssetPartPayload<ExtArgs>
      fields: Prisma.AssetPartFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssetPartFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssetPartFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>
        }
        findFirst: {
          args: Prisma.AssetPartFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssetPartFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>
        }
        findMany: {
          args: Prisma.AssetPartFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>[]
        }
        create: {
          args: Prisma.AssetPartCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>
        }
        createMany: {
          args: Prisma.AssetPartCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssetPartCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>[]
        }
        delete: {
          args: Prisma.AssetPartDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>
        }
        update: {
          args: Prisma.AssetPartUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>
        }
        deleteMany: {
          args: Prisma.AssetPartDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssetPartUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssetPartUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>[]
        }
        upsert: {
          args: Prisma.AssetPartUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetPartPayload>
        }
        aggregate: {
          args: Prisma.AssetPartAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssetPart>
        }
        groupBy: {
          args: Prisma.AssetPartGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetPartGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssetPartCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetPartCountAggregateOutputType> | number
        }
      }
    }
    Transfer: {
      payload: Prisma.$TransferPayload<ExtArgs>
      fields: Prisma.TransferFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TransferFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TransferFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>
        }
        findFirst: {
          args: Prisma.TransferFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TransferFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>
        }
        findMany: {
          args: Prisma.TransferFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>[]
        }
        create: {
          args: Prisma.TransferCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>
        }
        createMany: {
          args: Prisma.TransferCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TransferCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>[]
        }
        delete: {
          args: Prisma.TransferDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>
        }
        update: {
          args: Prisma.TransferUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>
        }
        deleteMany: {
          args: Prisma.TransferDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TransferUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TransferUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>[]
        }
        upsert: {
          args: Prisma.TransferUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransferPayload>
        }
        aggregate: {
          args: Prisma.TransferAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTransfer>
        }
        groupBy: {
          args: Prisma.TransferGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransferGroupByOutputType>[]
        }
        count: {
          args: Prisma.TransferCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransferCountAggregateOutputType> | number
        }
      }
    }
    AssetTransfer: {
      payload: Prisma.$AssetTransferPayload<ExtArgs>
      fields: Prisma.AssetTransferFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssetTransferFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssetTransferFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>
        }
        findFirst: {
          args: Prisma.AssetTransferFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssetTransferFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>
        }
        findMany: {
          args: Prisma.AssetTransferFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>[]
        }
        create: {
          args: Prisma.AssetTransferCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>
        }
        createMany: {
          args: Prisma.AssetTransferCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssetTransferCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>[]
        }
        delete: {
          args: Prisma.AssetTransferDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>
        }
        update: {
          args: Prisma.AssetTransferUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>
        }
        deleteMany: {
          args: Prisma.AssetTransferDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssetTransferUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssetTransferUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>[]
        }
        upsert: {
          args: Prisma.AssetTransferUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetTransferPayload>
        }
        aggregate: {
          args: Prisma.AssetTransferAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssetTransfer>
        }
        groupBy: {
          args: Prisma.AssetTransferGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetTransferGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssetTransferCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetTransferCountAggregateOutputType> | number
        }
      }
    }
    Arrival: {
      payload: Prisma.$ArrivalPayload<ExtArgs>
      fields: Prisma.ArrivalFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ArrivalFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ArrivalFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>
        }
        findFirst: {
          args: Prisma.ArrivalFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ArrivalFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>
        }
        findMany: {
          args: Prisma.ArrivalFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>[]
        }
        create: {
          args: Prisma.ArrivalCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>
        }
        createMany: {
          args: Prisma.ArrivalCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ArrivalCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>[]
        }
        delete: {
          args: Prisma.ArrivalDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>
        }
        update: {
          args: Prisma.ArrivalUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>
        }
        deleteMany: {
          args: Prisma.ArrivalDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ArrivalUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ArrivalUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>[]
        }
        upsert: {
          args: Prisma.ArrivalUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ArrivalPayload>
        }
        aggregate: {
          args: Prisma.ArrivalAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateArrival>
        }
        groupBy: {
          args: Prisma.ArrivalGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ArrivalGroupByOutputType>[]
        }
        count: {
          args: Prisma.ArrivalCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ArrivalCountAggregateOutputType> | number
        }
      }
    }
    Departure: {
      payload: Prisma.$DeparturePayload<ExtArgs>
      fields: Prisma.DepartureFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DepartureFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DepartureFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>
        }
        findFirst: {
          args: Prisma.DepartureFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DepartureFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>
        }
        findMany: {
          args: Prisma.DepartureFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>[]
        }
        create: {
          args: Prisma.DepartureCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>
        }
        createMany: {
          args: Prisma.DepartureCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DepartureCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>[]
        }
        delete: {
          args: Prisma.DepartureDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>
        }
        update: {
          args: Prisma.DepartureUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>
        }
        deleteMany: {
          args: Prisma.DepartureDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DepartureUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DepartureUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>[]
        }
        upsert: {
          args: Prisma.DepartureUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DeparturePayload>
        }
        aggregate: {
          args: Prisma.DepartureAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDeparture>
        }
        groupBy: {
          args: Prisma.DepartureGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DepartureGroupByOutputType>[]
        }
        count: {
          args: Prisma.DepartureCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DepartureCountAggregateOutputType> | number
        }
      }
    }
    Hold: {
      payload: Prisma.$HoldPayload<ExtArgs>
      fields: Prisma.HoldFieldRefs
      operations: {
        findUnique: {
          args: Prisma.HoldFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.HoldFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>
        }
        findFirst: {
          args: Prisma.HoldFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.HoldFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>
        }
        findMany: {
          args: Prisma.HoldFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>[]
        }
        create: {
          args: Prisma.HoldCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>
        }
        createMany: {
          args: Prisma.HoldCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.HoldCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>[]
        }
        delete: {
          args: Prisma.HoldDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>
        }
        update: {
          args: Prisma.HoldUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>
        }
        deleteMany: {
          args: Prisma.HoldDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.HoldUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.HoldUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>[]
        }
        upsert: {
          args: Prisma.HoldUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$HoldPayload>
        }
        aggregate: {
          args: Prisma.HoldAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateHold>
        }
        groupBy: {
          args: Prisma.HoldGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.HoldGroupByOutputType>[]
        }
        count: {
          args: Prisma.HoldCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.HoldCountAggregateOutputType> | number
        }
      }
    }
    Invoice: {
      payload: Prisma.$InvoicePayload<ExtArgs>
      fields: Prisma.InvoiceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        findFirst: {
          args: Prisma.InvoiceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        findMany: {
          args: Prisma.InvoiceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>[]
        }
        create: {
          args: Prisma.InvoiceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        createMany: {
          args: Prisma.InvoiceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>[]
        }
        delete: {
          args: Prisma.InvoiceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        update: {
          args: Prisma.InvoiceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        deleteMany: {
          args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>[]
        }
        upsert: {
          args: Prisma.InvoiceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvoicePayload>
        }
        aggregate: {
          args: Prisma.InvoiceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvoice>
        }
        groupBy: {
          args: Prisma.InvoiceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoiceGroupByOutputType>[]
        }
        count: {
          args: Prisma.InvoiceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InvoiceCountAggregateOutputType> | number
        }
      }
    }
    Warehouse: {
      payload: Prisma.$WarehousePayload<ExtArgs>
      fields: Prisma.WarehouseFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WarehouseFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WarehouseFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>
        }
        findFirst: {
          args: Prisma.WarehouseFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WarehouseFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>
        }
        findMany: {
          args: Prisma.WarehouseFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>[]
        }
        create: {
          args: Prisma.WarehouseCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>
        }
        createMany: {
          args: Prisma.WarehouseCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WarehouseCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>[]
        }
        delete: {
          args: Prisma.WarehouseDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>
        }
        update: {
          args: Prisma.WarehouseUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>
        }
        deleteMany: {
          args: Prisma.WarehouseDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WarehouseUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WarehouseUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>[]
        }
        upsert: {
          args: Prisma.WarehouseUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WarehousePayload>
        }
        aggregate: {
          args: Prisma.WarehouseAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWarehouse>
        }
        groupBy: {
          args: Prisma.WarehouseGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WarehouseGroupByOutputType>[]
        }
        count: {
          args: Prisma.WarehouseCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WarehouseCountAggregateOutputType> | number
        }
      }
    }
    Location: {
      payload: Prisma.$LocationPayload<ExtArgs>
      fields: Prisma.LocationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.LocationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        findFirst: {
          args: Prisma.LocationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        findMany: {
          args: Prisma.LocationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>[]
        }
        create: {
          args: Prisma.LocationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        createMany: {
          args: Prisma.LocationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>[]
        }
        delete: {
          args: Prisma.LocationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        update: {
          args: Prisma.LocationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        deleteMany: {
          args: Prisma.LocationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.LocationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>[]
        }
        upsert: {
          args: Prisma.LocationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$LocationPayload>
        }
        aggregate: {
          args: Prisma.LocationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLocation>
        }
        groupBy: {
          args: Prisma.LocationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LocationGroupByOutputType>[]
        }
        count: {
          args: Prisma.LocationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LocationCountAggregateOutputType> | number
        }
      }
    }
    Brand: {
      payload: Prisma.$BrandPayload<ExtArgs>
      fields: Prisma.BrandFieldRefs
      operations: {
        findUnique: {
          args: Prisma.BrandFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>
        }
        findFirst: {
          args: Prisma.BrandFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>
        }
        findMany: {
          args: Prisma.BrandFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>[]
        }
        create: {
          args: Prisma.BrandCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>
        }
        createMany: {
          args: Prisma.BrandCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.BrandCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>[]
        }
        delete: {
          args: Prisma.BrandDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>
        }
        update: {
          args: Prisma.BrandUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>
        }
        deleteMany: {
          args: Prisma.BrandDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.BrandUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.BrandUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>[]
        }
        upsert: {
          args: Prisma.BrandUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$BrandPayload>
        }
        aggregate: {
          args: Prisma.BrandAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBrand>
        }
        groupBy: {
          args: Prisma.BrandGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BrandGroupByOutputType>[]
        }
        count: {
          args: Prisma.BrandCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BrandCountAggregateOutputType> | number
        }
      }
    }
    Model: {
      payload: Prisma.$ModelPayload<ExtArgs>
      fields: Prisma.ModelFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ModelFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ModelFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>
        }
        findFirst: {
          args: Prisma.ModelFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ModelFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>
        }
        findMany: {
          args: Prisma.ModelFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>[]
        }
        create: {
          args: Prisma.ModelCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>
        }
        createMany: {
          args: Prisma.ModelCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ModelCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>[]
        }
        delete: {
          args: Prisma.ModelDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>
        }
        update: {
          args: Prisma.ModelUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>
        }
        deleteMany: {
          args: Prisma.ModelDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ModelUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ModelUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>[]
        }
        upsert: {
          args: Prisma.ModelUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModelPayload>
        }
        aggregate: {
          args: Prisma.ModelAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateModel>
        }
        groupBy: {
          args: Prisma.ModelGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModelGroupByOutputType>[]
        }
        count: {
          args: Prisma.ModelCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModelCountAggregateOutputType> | number
        }
      }
    }
    File: {
      payload: Prisma.$FilePayload<ExtArgs>
      fields: Prisma.FileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findFirst: {
          args: Prisma.FileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findMany: {
          args: Prisma.FileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        create: {
          args: Prisma.FileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        createMany: {
          args: Prisma.FileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        delete: {
          args: Prisma.FileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        update: {
          args: Prisma.FileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        deleteMany: {
          args: Prisma.FileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        upsert: {
          args: Prisma.FileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        aggregate: {
          args: Prisma.FileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFile>
        }
        groupBy: {
          args: Prisma.FileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileCountAggregateOutputType> | number
        }
      }
    }
    Comment: {
      payload: Prisma.$CommentPayload<ExtArgs>
      fields: Prisma.CommentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CommentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        findFirst: {
          args: Prisma.CommentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        findMany: {
          args: Prisma.CommentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        create: {
          args: Prisma.CommentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        createMany: {
          args: Prisma.CommentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        delete: {
          args: Prisma.CommentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        update: {
          args: Prisma.CommentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        deleteMany: {
          args: Prisma.CommentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CommentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        upsert: {
          args: Prisma.CommentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        aggregate: {
          args: Prisma.CommentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateComment>
        }
        groupBy: {
          args: Prisma.CommentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentGroupByOutputType>[]
        }
        count: {
          args: Prisma.CommentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>
      fields: Prisma.OrganizationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>
        }
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType> | number
        }
      }
    }
    AssetHistory: {
      payload: Prisma.$AssetHistoryPayload<ExtArgs>
      fields: Prisma.AssetHistoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AssetHistoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AssetHistoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>
        }
        findFirst: {
          args: Prisma.AssetHistoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AssetHistoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>
        }
        findMany: {
          args: Prisma.AssetHistoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>[]
        }
        create: {
          args: Prisma.AssetHistoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>
        }
        createMany: {
          args: Prisma.AssetHistoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AssetHistoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>[]
        }
        delete: {
          args: Prisma.AssetHistoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>
        }
        update: {
          args: Prisma.AssetHistoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>
        }
        deleteMany: {
          args: Prisma.AssetHistoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AssetHistoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AssetHistoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>[]
        }
        upsert: {
          args: Prisma.AssetHistoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AssetHistoryPayload>
        }
        aggregate: {
          args: Prisma.AssetHistoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAssetHistory>
        }
        groupBy: {
          args: Prisma.AssetHistoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetHistoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.AssetHistoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AssetHistoryCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AssetScalarFieldEnum = {
  id: 'id',
  barcode: 'barcode',
  serial_number: 'serial_number',
  brand_id: 'brand_id',
  model_id: 'model_id',
  warehouse_id: 'warehouse_id',
  asset_location: 'asset_location',
  asset_type: 'asset_type',
  tracking_status: 'tracking_status',
  exit_status: 'exit_status',
  technical_status: 'technical_status',
  purchase_invoice_id: 'purchase_invoice_id',
  sales_invoice_id: 'sales_invoice_id',
  arrival_id: 'arrival_id',
  departure_id: 'departure_id',
  hold_id: 'hold_id',
  is_held: 'is_held',
  created_at: 'created_at'
} as const

export type AssetScalarFieldEnum = (typeof AssetScalarFieldEnum)[keyof typeof AssetScalarFieldEnum]


export const TechnicalSpecificationScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  cassettes: 'cassettes',
  internal_finisher: 'internal_finisher',
  meter_black: 'meter_black',
  meter_colour: 'meter_colour',
  meter_total: 'meter_total',
  drum_life_c: 'drum_life_c',
  drum_life_m: 'drum_life_m',
  drum_life_y: 'drum_life_y',
  drum_life_k: 'drum_life_k'
} as const

export type TechnicalSpecificationScalarFieldEnum = (typeof TechnicalSpecificationScalarFieldEnum)[keyof typeof TechnicalSpecificationScalarFieldEnum]


export const CostScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  purchase_cost: 'purchase_cost',
  transport_cost: 'transport_cost',
  processing_cost: 'processing_cost',
  other_cost: 'other_cost',
  parts_cost: 'parts_cost',
  total_cost: 'total_cost',
  sale_price: 'sale_price'
} as const

export type CostScalarFieldEnum = (typeof CostScalarFieldEnum)[keyof typeof CostScalarFieldEnum]


export const AssetAccessoryScalarFieldEnum = {
  asset_id: 'asset_id',
  accessory: 'accessory'
} as const

export type AssetAccessoryScalarFieldEnum = (typeof AssetAccessoryScalarFieldEnum)[keyof typeof AssetAccessoryScalarFieldEnum]


export const ErrorCategoryScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  category: 'category'
} as const

export type ErrorCategoryScalarFieldEnum = (typeof ErrorCategoryScalarFieldEnum)[keyof typeof ErrorCategoryScalarFieldEnum]


export const ErrorScalarFieldEnum = {
  id: 'id',
  error_category_id: 'error_category_id',
  code: 'code',
  description: 'description'
} as const

export type ErrorScalarFieldEnum = (typeof ErrorScalarFieldEnum)[keyof typeof ErrorScalarFieldEnum]


export const AssetErrorScalarFieldEnum = {
  asset_id: 'asset_id',
  error_id: 'error_id',
  is_fixed: 'is_fixed',
  added_by: 'added_by',
  added_at: 'added_at',
  fixed_by: 'fixed_by',
  fixed_at: 'fixed_at'
} as const

export type AssetErrorScalarFieldEnum = (typeof AssetErrorScalarFieldEnum)[keyof typeof AssetErrorScalarFieldEnum]


export const PartScalarFieldEnum = {
  id: 'id',
  description: 'description',
  part_number: 'part_number',
  dealer_price: 'dealer_price',
  sale_price: 'sale_price',
  cost: 'cost'
} as const

export type PartScalarFieldEnum = (typeof PartScalarFieldEnum)[keyof typeof PartScalarFieldEnum]


export const AssetPartScalarFieldEnum = {
  asset_id: 'asset_id',
  part_id: 'part_id',
  updated_at: 'updated_at',
  updated_by: 'updated_by',
  part_operation: 'part_operation'
} as const

export type AssetPartScalarFieldEnum = (typeof AssetPartScalarFieldEnum)[keyof typeof AssetPartScalarFieldEnum]


export const TransferScalarFieldEnum = {
  id: 'id',
  transfer_number: 'transfer_number',
  origin_id: 'origin_id',
  destination_id: 'destination_id',
  transporter_id: 'transporter_id',
  created_by_id: 'created_by_id',
  notes: 'notes',
  created_at: 'created_at'
} as const

export type TransferScalarFieldEnum = (typeof TransferScalarFieldEnum)[keyof typeof TransferScalarFieldEnum]


export const AssetTransferScalarFieldEnum = {
  asset_id: 'asset_id',
  transfer_id: 'transfer_id'
} as const

export type AssetTransferScalarFieldEnum = (typeof AssetTransferScalarFieldEnum)[keyof typeof AssetTransferScalarFieldEnum]


export const ArrivalScalarFieldEnum = {
  id: 'id',
  arrival_number: 'arrival_number',
  origin_id: 'origin_id',
  destination_id: 'destination_id',
  transporter_id: 'transporter_id',
  created_by_id: 'created_by_id',
  notes: 'notes',
  created_at: 'created_at'
} as const

export type ArrivalScalarFieldEnum = (typeof ArrivalScalarFieldEnum)[keyof typeof ArrivalScalarFieldEnum]


export const DepartureScalarFieldEnum = {
  id: 'id',
  departure_number: 'departure_number',
  origin_id: 'origin_id',
  destination_id: 'destination_id',
  transporter_id: 'transporter_id',
  created_by_id: 'created_by_id',
  sales_representative_id: 'sales_representative_id',
  notes: 'notes',
  created_at: 'created_at'
} as const

export type DepartureScalarFieldEnum = (typeof DepartureScalarFieldEnum)[keyof typeof DepartureScalarFieldEnum]


export const HoldScalarFieldEnum = {
  id: 'id',
  hold_number: 'hold_number',
  created_by_id: 'created_by_id',
  created_for_id: 'created_for_id',
  customer_id: 'customer_id',
  notes: 'notes',
  created_at: 'created_at'
} as const

export type HoldScalarFieldEnum = (typeof HoldScalarFieldEnum)[keyof typeof HoldScalarFieldEnum]


export const InvoiceScalarFieldEnum = {
  id: 'id',
  invoice_number: 'invoice_number',
  organization_id: 'organization_id',
  updated_by_id: 'updated_by_id',
  is_cleared: 'is_cleared',
  created_at: 'created_at',
  invoice_type: 'invoice_type'
} as const

export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


export const WarehouseScalarFieldEnum = {
  id: 'id',
  city_code: 'city_code',
  street: 'street'
} as const

export type WarehouseScalarFieldEnum = (typeof WarehouseScalarFieldEnum)[keyof typeof WarehouseScalarFieldEnum]


export const LocationScalarFieldEnum = {
  warehouse_id: 'warehouse_id',
  location: 'location'
} as const

export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


export const BrandScalarFieldEnum = {
  id: 'id',
  name: 'name'
} as const

export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


export const ModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  asset_type: 'asset_type',
  weight: 'weight',
  size: 'size',
  brand_id: 'brand_id'
} as const

export type ModelScalarFieldEnum = (typeof ModelScalarFieldEnum)[keyof typeof ModelScalarFieldEnum]


export const FileScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  uploaded_by_id: 'uploaded_by_id',
  name: 'name',
  type: 'type',
  data: 'data',
  url: 'url',
  size: 'size',
  uploaded_at: 'uploaded_at'
} as const

export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


export const CommentScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  created_by_id: 'created_by_id',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  googleId: 'googleId',
  role: 'role'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const OrganizationScalarFieldEnum = {
  id: 'id',
  account_number: 'account_number',
  name: 'name',
  contact_name: 'contact_name',
  phone: 'phone',
  phone_ext: 'phone_ext',
  primary_email: 'primary_email',
  secondary_email: 'secondary_email',
  address: 'address',
  city: 'city',
  province: 'province',
  country: 'country',
  website: 'website'
} as const

export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


export const AssetHistoryScalarFieldEnum = {
  id: 'id',
  asset_id: 'asset_id',
  user_id: 'user_id',
  operation: 'operation',
  data_field: 'data_field',
  changed_on: 'changed_on',
  changes: 'changes'
} as const

export type AssetHistoryScalarFieldEnum = (typeof AssetHistoryScalarFieldEnum)[keyof typeof AssetHistoryScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'AssetType'
 */
export type EnumAssetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetType'>
    


/**
 * Reference to a field of type 'AssetType[]'
 */
export type ListEnumAssetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetType[]'>
    


/**
 * Reference to a field of type 'TrackingStatus'
 */
export type EnumTrackingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrackingStatus'>
    


/**
 * Reference to a field of type 'TrackingStatus[]'
 */
export type ListEnumTrackingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TrackingStatus[]'>
    


/**
 * Reference to a field of type 'ExitStatus'
 */
export type EnumExitStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExitStatus'>
    


/**
 * Reference to a field of type 'ExitStatus[]'
 */
export type ListEnumExitStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExitStatus[]'>
    


/**
 * Reference to a field of type 'TechnicalStatus'
 */
export type EnumTechnicalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TechnicalStatus'>
    


/**
 * Reference to a field of type 'TechnicalStatus[]'
 */
export type ListEnumTechnicalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TechnicalStatus[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


/**
 * Reference to a field of type 'Accessory'
 */
export type EnumAccessoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Accessory'>
    


/**
 * Reference to a field of type 'Accessory[]'
 */
export type ListEnumAccessoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Accessory[]'>
    


/**
 * Reference to a field of type 'PartOperation'
 */
export type EnumPartOperationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartOperation'>
    


/**
 * Reference to a field of type 'PartOperation[]'
 */
export type ListEnumPartOperationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PartOperation[]'>
    


/**
 * Reference to a field of type 'InvoiceType'
 */
export type EnumInvoiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceType'>
    


/**
 * Reference to a field of type 'InvoiceType[]'
 */
export type ListEnumInvoiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceType[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'FileType'
 */
export type EnumFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileType'>
    


/**
 * Reference to a field of type 'FileType[]'
 */
export type ListEnumFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileType[]'>
    


/**
 * Reference to a field of type 'Bytes'
 */
export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


/**
 * Reference to a field of type 'Bytes[]'
 */
export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


/**
 * Reference to a field of type 'Role'
 */
export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


/**
 * Reference to a field of type 'Role[]'
 */
export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


/**
 * Reference to a field of type 'GeneralOperation'
 */
export type EnumGeneralOperationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GeneralOperation'>
    


/**
 * Reference to a field of type 'GeneralOperation[]'
 */
export type ListEnumGeneralOperationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GeneralOperation[]'>
    


/**
 * Reference to a field of type 'DataField'
 */
export type EnumDataFieldFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataField'>
    


/**
 * Reference to a field of type 'DataField[]'
 */
export type ListEnumDataFieldFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataField[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  asset?: Prisma.AssetOmit
  technicalSpecification?: Prisma.TechnicalSpecificationOmit
  cost?: Prisma.CostOmit
  assetAccessory?: Prisma.AssetAccessoryOmit
  errorCategory?: Prisma.ErrorCategoryOmit
  error?: Prisma.ErrorOmit
  assetError?: Prisma.AssetErrorOmit
  part?: Prisma.PartOmit
  assetPart?: Prisma.AssetPartOmit
  transfer?: Prisma.TransferOmit
  assetTransfer?: Prisma.AssetTransferOmit
  arrival?: Prisma.ArrivalOmit
  departure?: Prisma.DepartureOmit
  hold?: Prisma.HoldOmit
  invoice?: Prisma.InvoiceOmit
  warehouse?: Prisma.WarehouseOmit
  location?: Prisma.LocationOmit
  brand?: Prisma.BrandOmit
  model?: Prisma.ModelOmit
  file?: Prisma.FileOmit
  comment?: Prisma.CommentOmit
  user?: Prisma.UserOmit
  organization?: Prisma.OrganizationOmit
  assetHistory?: Prisma.AssetHistoryOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

