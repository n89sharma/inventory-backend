
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AssetAccessory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AssetAccessory
 * 
 */
export type AssetAccessoryModel = runtime.Types.Result.DefaultSelection<Prisma.$AssetAccessoryPayload>

export type AggregateAssetAccessory = {
  _count: AssetAccessoryCountAggregateOutputType | null
  _avg: AssetAccessoryAvgAggregateOutputType | null
  _sum: AssetAccessorySumAggregateOutputType | null
  _min: AssetAccessoryMinAggregateOutputType | null
  _max: AssetAccessoryMaxAggregateOutputType | null
}

export type AssetAccessoryAvgAggregateOutputType = {
  asset_id: number | null
}

export type AssetAccessorySumAggregateOutputType = {
  asset_id: number | null
}

export type AssetAccessoryMinAggregateOutputType = {
  asset_id: number | null
  accessory: $Enums.Accessory | null
}

export type AssetAccessoryMaxAggregateOutputType = {
  asset_id: number | null
  accessory: $Enums.Accessory | null
}

export type AssetAccessoryCountAggregateOutputType = {
  asset_id: number
  accessory: number
  _all: number
}


export type AssetAccessoryAvgAggregateInputType = {
  asset_id?: true
}

export type AssetAccessorySumAggregateInputType = {
  asset_id?: true
}

export type AssetAccessoryMinAggregateInputType = {
  asset_id?: true
  accessory?: true
}

export type AssetAccessoryMaxAggregateInputType = {
  asset_id?: true
  accessory?: true
}

export type AssetAccessoryCountAggregateInputType = {
  asset_id?: true
  accessory?: true
  _all?: true
}

export type AssetAccessoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetAccessory to aggregate.
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetAccessories to fetch.
   */
  orderBy?: Prisma.AssetAccessoryOrderByWithRelationInput | Prisma.AssetAccessoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssetAccessoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetAccessories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetAccessories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AssetAccessories
  **/
  _count?: true | AssetAccessoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssetAccessoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssetAccessorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssetAccessoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssetAccessoryMaxAggregateInputType
}

export type GetAssetAccessoryAggregateType<T extends AssetAccessoryAggregateArgs> = {
      [P in keyof T & keyof AggregateAssetAccessory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssetAccessory[P]>
    : Prisma.GetScalarType<T[P], AggregateAssetAccessory[P]>
}




export type AssetAccessoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetAccessoryWhereInput
  orderBy?: Prisma.AssetAccessoryOrderByWithAggregationInput | Prisma.AssetAccessoryOrderByWithAggregationInput[]
  by: Prisma.AssetAccessoryScalarFieldEnum[] | Prisma.AssetAccessoryScalarFieldEnum
  having?: Prisma.AssetAccessoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssetAccessoryCountAggregateInputType | true
  _avg?: AssetAccessoryAvgAggregateInputType
  _sum?: AssetAccessorySumAggregateInputType
  _min?: AssetAccessoryMinAggregateInputType
  _max?: AssetAccessoryMaxAggregateInputType
}

export type AssetAccessoryGroupByOutputType = {
  asset_id: number
  accessory: $Enums.Accessory
  _count: AssetAccessoryCountAggregateOutputType | null
  _avg: AssetAccessoryAvgAggregateOutputType | null
  _sum: AssetAccessorySumAggregateOutputType | null
  _min: AssetAccessoryMinAggregateOutputType | null
  _max: AssetAccessoryMaxAggregateOutputType | null
}

type GetAssetAccessoryGroupByPayload<T extends AssetAccessoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssetAccessoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssetAccessoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssetAccessoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssetAccessoryGroupByOutputType[P]>
      }
    >
  > 



export type AssetAccessoryWhereInput = {
  AND?: Prisma.AssetAccessoryWhereInput | Prisma.AssetAccessoryWhereInput[]
  OR?: Prisma.AssetAccessoryWhereInput[]
  NOT?: Prisma.AssetAccessoryWhereInput | Prisma.AssetAccessoryWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetAccessory"> | number
  accessory?: Prisma.EnumAccessoryFilter<"AssetAccessory"> | $Enums.Accessory
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
}

export type AssetAccessoryOrderByWithRelationInput = {
  asset_id?: Prisma.SortOrder
  accessory?: Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
}

export type AssetAccessoryWhereUniqueInput = Prisma.AtLeast<{
  asset_id_accessory?: Prisma.AssetAccessoryAsset_idAccessoryCompoundUniqueInput
  AND?: Prisma.AssetAccessoryWhereInput | Prisma.AssetAccessoryWhereInput[]
  OR?: Prisma.AssetAccessoryWhereInput[]
  NOT?: Prisma.AssetAccessoryWhereInput | Prisma.AssetAccessoryWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetAccessory"> | number
  accessory?: Prisma.EnumAccessoryFilter<"AssetAccessory"> | $Enums.Accessory
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
}, "asset_id_accessory">

export type AssetAccessoryOrderByWithAggregationInput = {
  asset_id?: Prisma.SortOrder
  accessory?: Prisma.SortOrder
  _count?: Prisma.AssetAccessoryCountOrderByAggregateInput
  _avg?: Prisma.AssetAccessoryAvgOrderByAggregateInput
  _max?: Prisma.AssetAccessoryMaxOrderByAggregateInput
  _min?: Prisma.AssetAccessoryMinOrderByAggregateInput
  _sum?: Prisma.AssetAccessorySumOrderByAggregateInput
}

export type AssetAccessoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssetAccessoryScalarWhereWithAggregatesInput | Prisma.AssetAccessoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssetAccessoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssetAccessoryScalarWhereWithAggregatesInput | Prisma.AssetAccessoryScalarWhereWithAggregatesInput[]
  asset_id?: Prisma.IntWithAggregatesFilter<"AssetAccessory"> | number
  accessory?: Prisma.EnumAccessoryWithAggregatesFilter<"AssetAccessory"> | $Enums.Accessory
}

export type AssetAccessoryCreateInput = {
  accessory: $Enums.Accessory
  asset: Prisma.AssetCreateNestedOneWithoutAsset_accessoriesInput
}

export type AssetAccessoryUncheckedCreateInput = {
  asset_id: number
  accessory: $Enums.Accessory
}

export type AssetAccessoryUpdateInput = {
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_accessoriesNestedInput
}

export type AssetAccessoryUncheckedUpdateInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
}

export type AssetAccessoryCreateManyInput = {
  asset_id: number
  accessory: $Enums.Accessory
}

export type AssetAccessoryUpdateManyMutationInput = {
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
}

export type AssetAccessoryUncheckedUpdateManyInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
}

export type AssetAccessoryListRelationFilter = {
  every?: Prisma.AssetAccessoryWhereInput
  some?: Prisma.AssetAccessoryWhereInput
  none?: Prisma.AssetAccessoryWhereInput
}

export type AssetAccessoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AssetAccessoryAsset_idAccessoryCompoundUniqueInput = {
  asset_id: number
  accessory: $Enums.Accessory
}

export type AssetAccessoryCountOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  accessory?: Prisma.SortOrder
}

export type AssetAccessoryAvgOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
}

export type AssetAccessoryMaxOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  accessory?: Prisma.SortOrder
}

export type AssetAccessoryMinOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  accessory?: Prisma.SortOrder
}

export type AssetAccessorySumOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
}

export type AssetAccessoryCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetAccessoryCreateWithoutAssetInput, Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput> | Prisma.AssetAccessoryCreateWithoutAssetInput[] | Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput | Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetAccessoryCreateManyAssetInputEnvelope
  connect?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
}

export type AssetAccessoryUncheckedCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetAccessoryCreateWithoutAssetInput, Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput> | Prisma.AssetAccessoryCreateWithoutAssetInput[] | Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput | Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetAccessoryCreateManyAssetInputEnvelope
  connect?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
}

export type AssetAccessoryUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetAccessoryCreateWithoutAssetInput, Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput> | Prisma.AssetAccessoryCreateWithoutAssetInput[] | Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput | Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetAccessoryUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetAccessoryUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetAccessoryCreateManyAssetInputEnvelope
  set?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  disconnect?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  delete?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  connect?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  update?: Prisma.AssetAccessoryUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetAccessoryUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetAccessoryUpdateManyWithWhereWithoutAssetInput | Prisma.AssetAccessoryUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetAccessoryScalarWhereInput | Prisma.AssetAccessoryScalarWhereInput[]
}

export type AssetAccessoryUncheckedUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetAccessoryCreateWithoutAssetInput, Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput> | Prisma.AssetAccessoryCreateWithoutAssetInput[] | Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput | Prisma.AssetAccessoryCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetAccessoryUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetAccessoryUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetAccessoryCreateManyAssetInputEnvelope
  set?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  disconnect?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  delete?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  connect?: Prisma.AssetAccessoryWhereUniqueInput | Prisma.AssetAccessoryWhereUniqueInput[]
  update?: Prisma.AssetAccessoryUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetAccessoryUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetAccessoryUpdateManyWithWhereWithoutAssetInput | Prisma.AssetAccessoryUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetAccessoryScalarWhereInput | Prisma.AssetAccessoryScalarWhereInput[]
}

export type EnumAccessoryFieldUpdateOperationsInput = {
  set?: $Enums.Accessory
}

export type AssetAccessoryCreateWithoutAssetInput = {
  accessory: $Enums.Accessory
}

export type AssetAccessoryUncheckedCreateWithoutAssetInput = {
  accessory: $Enums.Accessory
}

export type AssetAccessoryCreateOrConnectWithoutAssetInput = {
  where: Prisma.AssetAccessoryWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetAccessoryCreateWithoutAssetInput, Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput>
}

export type AssetAccessoryCreateManyAssetInputEnvelope = {
  data: Prisma.AssetAccessoryCreateManyAssetInput | Prisma.AssetAccessoryCreateManyAssetInput[]
  skipDuplicates?: boolean
}

export type AssetAccessoryUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetAccessoryWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetAccessoryUpdateWithoutAssetInput, Prisma.AssetAccessoryUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.AssetAccessoryCreateWithoutAssetInput, Prisma.AssetAccessoryUncheckedCreateWithoutAssetInput>
}

export type AssetAccessoryUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetAccessoryWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetAccessoryUpdateWithoutAssetInput, Prisma.AssetAccessoryUncheckedUpdateWithoutAssetInput>
}

export type AssetAccessoryUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.AssetAccessoryScalarWhereInput
  data: Prisma.XOR<Prisma.AssetAccessoryUpdateManyMutationInput, Prisma.AssetAccessoryUncheckedUpdateManyWithoutAssetInput>
}

export type AssetAccessoryScalarWhereInput = {
  AND?: Prisma.AssetAccessoryScalarWhereInput | Prisma.AssetAccessoryScalarWhereInput[]
  OR?: Prisma.AssetAccessoryScalarWhereInput[]
  NOT?: Prisma.AssetAccessoryScalarWhereInput | Prisma.AssetAccessoryScalarWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetAccessory"> | number
  accessory?: Prisma.EnumAccessoryFilter<"AssetAccessory"> | $Enums.Accessory
}

export type AssetAccessoryCreateManyAssetInput = {
  accessory: $Enums.Accessory
}

export type AssetAccessoryUpdateWithoutAssetInput = {
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
}

export type AssetAccessoryUncheckedUpdateWithoutAssetInput = {
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
}

export type AssetAccessoryUncheckedUpdateManyWithoutAssetInput = {
  accessory?: Prisma.EnumAccessoryFieldUpdateOperationsInput | $Enums.Accessory
}



export type AssetAccessorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  accessory?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetAccessory"]>

export type AssetAccessorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  accessory?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetAccessory"]>

export type AssetAccessorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  accessory?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetAccessory"]>

export type AssetAccessorySelectScalar = {
  asset_id?: boolean
  accessory?: boolean
}

export type AssetAccessoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"asset_id" | "accessory", ExtArgs["result"]["assetAccessory"]>
export type AssetAccessoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}
export type AssetAccessoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}
export type AssetAccessoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}

export type $AssetAccessoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AssetAccessory"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    asset_id: number
    accessory: $Enums.Accessory
  }, ExtArgs["result"]["assetAccessory"]>
  composites: {}
}

export type AssetAccessoryGetPayload<S extends boolean | null | undefined | AssetAccessoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload, S>

export type AssetAccessoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssetAccessoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssetAccessoryCountAggregateInputType | true
  }

export interface AssetAccessoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetAccessory'], meta: { name: 'AssetAccessory' } }
  /**
   * Find zero or one AssetAccessory that matches the filter.
   * @param {AssetAccessoryFindUniqueArgs} args - Arguments to find a AssetAccessory
   * @example
   * // Get one AssetAccessory
   * const assetAccessory = await prisma.assetAccessory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssetAccessoryFindUniqueArgs>(args: Prisma.SelectSubset<T, AssetAccessoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AssetAccessory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssetAccessoryFindUniqueOrThrowArgs} args - Arguments to find a AssetAccessory
   * @example
   * // Get one AssetAccessory
   * const assetAccessory = await prisma.assetAccessory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssetAccessoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssetAccessoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetAccessory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryFindFirstArgs} args - Arguments to find a AssetAccessory
   * @example
   * // Get one AssetAccessory
   * const assetAccessory = await prisma.assetAccessory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssetAccessoryFindFirstArgs>(args?: Prisma.SelectSubset<T, AssetAccessoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetAccessory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryFindFirstOrThrowArgs} args - Arguments to find a AssetAccessory
   * @example
   * // Get one AssetAccessory
   * const assetAccessory = await prisma.assetAccessory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssetAccessoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssetAccessoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AssetAccessories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssetAccessories
   * const assetAccessories = await prisma.assetAccessory.findMany()
   * 
   * // Get first 10 AssetAccessories
   * const assetAccessories = await prisma.assetAccessory.findMany({ take: 10 })
   * 
   * // Only select the `asset_id`
   * const assetAccessoryWithAsset_idOnly = await prisma.assetAccessory.findMany({ select: { asset_id: true } })
   * 
   */
  findMany<T extends AssetAccessoryFindManyArgs>(args?: Prisma.SelectSubset<T, AssetAccessoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AssetAccessory.
   * @param {AssetAccessoryCreateArgs} args - Arguments to create a AssetAccessory.
   * @example
   * // Create one AssetAccessory
   * const AssetAccessory = await prisma.assetAccessory.create({
   *   data: {
   *     // ... data to create a AssetAccessory
   *   }
   * })
   * 
   */
  create<T extends AssetAccessoryCreateArgs>(args: Prisma.SelectSubset<T, AssetAccessoryCreateArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AssetAccessories.
   * @param {AssetAccessoryCreateManyArgs} args - Arguments to create many AssetAccessories.
   * @example
   * // Create many AssetAccessories
   * const assetAccessory = await prisma.assetAccessory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssetAccessoryCreateManyArgs>(args?: Prisma.SelectSubset<T, AssetAccessoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AssetAccessories and returns the data saved in the database.
   * @param {AssetAccessoryCreateManyAndReturnArgs} args - Arguments to create many AssetAccessories.
   * @example
   * // Create many AssetAccessories
   * const assetAccessory = await prisma.assetAccessory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AssetAccessories and only return the `asset_id`
   * const assetAccessoryWithAsset_idOnly = await prisma.assetAccessory.createManyAndReturn({
   *   select: { asset_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssetAccessoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssetAccessoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AssetAccessory.
   * @param {AssetAccessoryDeleteArgs} args - Arguments to delete one AssetAccessory.
   * @example
   * // Delete one AssetAccessory
   * const AssetAccessory = await prisma.assetAccessory.delete({
   *   where: {
   *     // ... filter to delete one AssetAccessory
   *   }
   * })
   * 
   */
  delete<T extends AssetAccessoryDeleteArgs>(args: Prisma.SelectSubset<T, AssetAccessoryDeleteArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AssetAccessory.
   * @param {AssetAccessoryUpdateArgs} args - Arguments to update one AssetAccessory.
   * @example
   * // Update one AssetAccessory
   * const assetAccessory = await prisma.assetAccessory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssetAccessoryUpdateArgs>(args: Prisma.SelectSubset<T, AssetAccessoryUpdateArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AssetAccessories.
   * @param {AssetAccessoryDeleteManyArgs} args - Arguments to filter AssetAccessories to delete.
   * @example
   * // Delete a few AssetAccessories
   * const { count } = await prisma.assetAccessory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssetAccessoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssetAccessoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetAccessories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssetAccessories
   * const assetAccessory = await prisma.assetAccessory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssetAccessoryUpdateManyArgs>(args: Prisma.SelectSubset<T, AssetAccessoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetAccessories and returns the data updated in the database.
   * @param {AssetAccessoryUpdateManyAndReturnArgs} args - Arguments to update many AssetAccessories.
   * @example
   * // Update many AssetAccessories
   * const assetAccessory = await prisma.assetAccessory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AssetAccessories and only return the `asset_id`
   * const assetAccessoryWithAsset_idOnly = await prisma.assetAccessory.updateManyAndReturn({
   *   select: { asset_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssetAccessoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssetAccessoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AssetAccessory.
   * @param {AssetAccessoryUpsertArgs} args - Arguments to update or create a AssetAccessory.
   * @example
   * // Update or create a AssetAccessory
   * const assetAccessory = await prisma.assetAccessory.upsert({
   *   create: {
   *     // ... data to create a AssetAccessory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssetAccessory we want to update
   *   }
   * })
   */
  upsert<T extends AssetAccessoryUpsertArgs>(args: Prisma.SelectSubset<T, AssetAccessoryUpsertArgs<ExtArgs>>): Prisma.Prisma__AssetAccessoryClient<runtime.Types.Result.GetResult<Prisma.$AssetAccessoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AssetAccessories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryCountArgs} args - Arguments to filter AssetAccessories to count.
   * @example
   * // Count the number of AssetAccessories
   * const count = await prisma.assetAccessory.count({
   *   where: {
   *     // ... the filter for the AssetAccessories we want to count
   *   }
   * })
  **/
  count<T extends AssetAccessoryCountArgs>(
    args?: Prisma.Subset<T, AssetAccessoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssetAccessoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AssetAccessory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssetAccessoryAggregateArgs>(args: Prisma.Subset<T, AssetAccessoryAggregateArgs>): Prisma.PrismaPromise<GetAssetAccessoryAggregateType<T>>

  /**
   * Group by AssetAccessory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetAccessoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssetAccessoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssetAccessoryGroupByArgs['orderBy'] }
      : { orderBy?: AssetAccessoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssetAccessoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetAccessoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AssetAccessory model
 */
readonly fields: AssetAccessoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssetAccessory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssetAccessoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AssetAccessory model
 */
export interface AssetAccessoryFieldRefs {
  readonly asset_id: Prisma.FieldRef<"AssetAccessory", 'Int'>
  readonly accessory: Prisma.FieldRef<"AssetAccessory", 'Accessory'>
}
    

// Custom InputTypes
/**
 * AssetAccessory findUnique
 */
export type AssetAccessoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetAccessory to fetch.
   */
  where: Prisma.AssetAccessoryWhereUniqueInput
}

/**
 * AssetAccessory findUniqueOrThrow
 */
export type AssetAccessoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetAccessory to fetch.
   */
  where: Prisma.AssetAccessoryWhereUniqueInput
}

/**
 * AssetAccessory findFirst
 */
export type AssetAccessoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetAccessory to fetch.
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetAccessories to fetch.
   */
  orderBy?: Prisma.AssetAccessoryOrderByWithRelationInput | Prisma.AssetAccessoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetAccessories.
   */
  cursor?: Prisma.AssetAccessoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetAccessories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetAccessories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetAccessories.
   */
  distinct?: Prisma.AssetAccessoryScalarFieldEnum | Prisma.AssetAccessoryScalarFieldEnum[]
}

/**
 * AssetAccessory findFirstOrThrow
 */
export type AssetAccessoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetAccessory to fetch.
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetAccessories to fetch.
   */
  orderBy?: Prisma.AssetAccessoryOrderByWithRelationInput | Prisma.AssetAccessoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetAccessories.
   */
  cursor?: Prisma.AssetAccessoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetAccessories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetAccessories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetAccessories.
   */
  distinct?: Prisma.AssetAccessoryScalarFieldEnum | Prisma.AssetAccessoryScalarFieldEnum[]
}

/**
 * AssetAccessory findMany
 */
export type AssetAccessoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetAccessories to fetch.
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetAccessories to fetch.
   */
  orderBy?: Prisma.AssetAccessoryOrderByWithRelationInput | Prisma.AssetAccessoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AssetAccessories.
   */
  cursor?: Prisma.AssetAccessoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetAccessories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetAccessories.
   */
  skip?: number
  distinct?: Prisma.AssetAccessoryScalarFieldEnum | Prisma.AssetAccessoryScalarFieldEnum[]
}

/**
 * AssetAccessory create
 */
export type AssetAccessoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * The data needed to create a AssetAccessory.
   */
  data: Prisma.XOR<Prisma.AssetAccessoryCreateInput, Prisma.AssetAccessoryUncheckedCreateInput>
}

/**
 * AssetAccessory createMany
 */
export type AssetAccessoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AssetAccessories.
   */
  data: Prisma.AssetAccessoryCreateManyInput | Prisma.AssetAccessoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetAccessory createManyAndReturn
 */
export type AssetAccessoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * The data used to create many AssetAccessories.
   */
  data: Prisma.AssetAccessoryCreateManyInput | Prisma.AssetAccessoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AssetAccessory update
 */
export type AssetAccessoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * The data needed to update a AssetAccessory.
   */
  data: Prisma.XOR<Prisma.AssetAccessoryUpdateInput, Prisma.AssetAccessoryUncheckedUpdateInput>
  /**
   * Choose, which AssetAccessory to update.
   */
  where: Prisma.AssetAccessoryWhereUniqueInput
}

/**
 * AssetAccessory updateMany
 */
export type AssetAccessoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AssetAccessories.
   */
  data: Prisma.XOR<Prisma.AssetAccessoryUpdateManyMutationInput, Prisma.AssetAccessoryUncheckedUpdateManyInput>
  /**
   * Filter which AssetAccessories to update
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * Limit how many AssetAccessories to update.
   */
  limit?: number
}

/**
 * AssetAccessory updateManyAndReturn
 */
export type AssetAccessoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * The data used to update AssetAccessories.
   */
  data: Prisma.XOR<Prisma.AssetAccessoryUpdateManyMutationInput, Prisma.AssetAccessoryUncheckedUpdateManyInput>
  /**
   * Filter which AssetAccessories to update
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * Limit how many AssetAccessories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AssetAccessory upsert
 */
export type AssetAccessoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * The filter to search for the AssetAccessory to update in case it exists.
   */
  where: Prisma.AssetAccessoryWhereUniqueInput
  /**
   * In case the AssetAccessory found by the `where` argument doesn't exist, create a new AssetAccessory with this data.
   */
  create: Prisma.XOR<Prisma.AssetAccessoryCreateInput, Prisma.AssetAccessoryUncheckedCreateInput>
  /**
   * In case the AssetAccessory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssetAccessoryUpdateInput, Prisma.AssetAccessoryUncheckedUpdateInput>
}

/**
 * AssetAccessory delete
 */
export type AssetAccessoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
  /**
   * Filter which AssetAccessory to delete.
   */
  where: Prisma.AssetAccessoryWhereUniqueInput
}

/**
 * AssetAccessory deleteMany
 */
export type AssetAccessoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetAccessories to delete
   */
  where?: Prisma.AssetAccessoryWhereInput
  /**
   * Limit how many AssetAccessories to delete.
   */
  limit?: number
}

/**
 * AssetAccessory without action
 */
export type AssetAccessoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetAccessory
   */
  select?: Prisma.AssetAccessorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetAccessory
   */
  omit?: Prisma.AssetAccessoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetAccessoryInclude<ExtArgs> | null
}
