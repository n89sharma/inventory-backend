
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Error` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Error
 * 
 */
export type ErrorModel = runtime.Types.Result.DefaultSelection<Prisma.$ErrorPayload>

export type AggregateError = {
  _count: ErrorCountAggregateOutputType | null
  _avg: ErrorAvgAggregateOutputType | null
  _sum: ErrorSumAggregateOutputType | null
  _min: ErrorMinAggregateOutputType | null
  _max: ErrorMaxAggregateOutputType | null
}

export type ErrorAvgAggregateOutputType = {
  id: number | null
  error_category_id: number | null
}

export type ErrorSumAggregateOutputType = {
  id: number | null
  error_category_id: number | null
}

export type ErrorMinAggregateOutputType = {
  id: number | null
  error_category_id: number | null
  code: string | null
  description: string | null
}

export type ErrorMaxAggregateOutputType = {
  id: number | null
  error_category_id: number | null
  code: string | null
  description: string | null
}

export type ErrorCountAggregateOutputType = {
  id: number
  error_category_id: number
  code: number
  description: number
  _all: number
}


export type ErrorAvgAggregateInputType = {
  id?: true
  error_category_id?: true
}

export type ErrorSumAggregateInputType = {
  id?: true
  error_category_id?: true
}

export type ErrorMinAggregateInputType = {
  id?: true
  error_category_id?: true
  code?: true
  description?: true
}

export type ErrorMaxAggregateInputType = {
  id?: true
  error_category_id?: true
  code?: true
  description?: true
}

export type ErrorCountAggregateInputType = {
  id?: true
  error_category_id?: true
  code?: true
  description?: true
  _all?: true
}

export type ErrorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Error to aggregate.
   */
  where?: Prisma.ErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Errors to fetch.
   */
  orderBy?: Prisma.ErrorOrderByWithRelationInput | Prisma.ErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Errors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Errors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Errors
  **/
  _count?: true | ErrorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ErrorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ErrorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ErrorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ErrorMaxAggregateInputType
}

export type GetErrorAggregateType<T extends ErrorAggregateArgs> = {
      [P in keyof T & keyof AggregateError]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateError[P]>
    : Prisma.GetScalarType<T[P], AggregateError[P]>
}




export type ErrorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ErrorWhereInput
  orderBy?: Prisma.ErrorOrderByWithAggregationInput | Prisma.ErrorOrderByWithAggregationInput[]
  by: Prisma.ErrorScalarFieldEnum[] | Prisma.ErrorScalarFieldEnum
  having?: Prisma.ErrorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ErrorCountAggregateInputType | true
  _avg?: ErrorAvgAggregateInputType
  _sum?: ErrorSumAggregateInputType
  _min?: ErrorMinAggregateInputType
  _max?: ErrorMaxAggregateInputType
}

export type ErrorGroupByOutputType = {
  id: number
  error_category_id: number
  code: string
  description: string | null
  _count: ErrorCountAggregateOutputType | null
  _avg: ErrorAvgAggregateOutputType | null
  _sum: ErrorSumAggregateOutputType | null
  _min: ErrorMinAggregateOutputType | null
  _max: ErrorMaxAggregateOutputType | null
}

type GetErrorGroupByPayload<T extends ErrorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ErrorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ErrorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ErrorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ErrorGroupByOutputType[P]>
      }
    >
  > 



export type ErrorWhereInput = {
  AND?: Prisma.ErrorWhereInput | Prisma.ErrorWhereInput[]
  OR?: Prisma.ErrorWhereInput[]
  NOT?: Prisma.ErrorWhereInput | Prisma.ErrorWhereInput[]
  id?: Prisma.IntFilter<"Error"> | number
  error_category_id?: Prisma.IntFilter<"Error"> | number
  code?: Prisma.StringFilter<"Error"> | string
  description?: Prisma.StringNullableFilter<"Error"> | string | null
  category?: Prisma.XOR<Prisma.ErrorCategoryScalarRelationFilter, Prisma.ErrorCategoryWhereInput>
  asset_errors?: Prisma.AssetErrorListRelationFilter
}

export type ErrorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  category?: Prisma.ErrorCategoryOrderByWithRelationInput
  asset_errors?: Prisma.AssetErrorOrderByRelationAggregateInput
}

export type ErrorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  code?: string
  AND?: Prisma.ErrorWhereInput | Prisma.ErrorWhereInput[]
  OR?: Prisma.ErrorWhereInput[]
  NOT?: Prisma.ErrorWhereInput | Prisma.ErrorWhereInput[]
  error_category_id?: Prisma.IntFilter<"Error"> | number
  description?: Prisma.StringNullableFilter<"Error"> | string | null
  category?: Prisma.XOR<Prisma.ErrorCategoryScalarRelationFilter, Prisma.ErrorCategoryWhereInput>
  asset_errors?: Prisma.AssetErrorListRelationFilter
}, "id" | "code">

export type ErrorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ErrorCountOrderByAggregateInput
  _avg?: Prisma.ErrorAvgOrderByAggregateInput
  _max?: Prisma.ErrorMaxOrderByAggregateInput
  _min?: Prisma.ErrorMinOrderByAggregateInput
  _sum?: Prisma.ErrorSumOrderByAggregateInput
}

export type ErrorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ErrorScalarWhereWithAggregatesInput | Prisma.ErrorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ErrorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ErrorScalarWhereWithAggregatesInput | Prisma.ErrorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Error"> | number
  error_category_id?: Prisma.IntWithAggregatesFilter<"Error"> | number
  code?: Prisma.StringWithAggregatesFilter<"Error"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Error"> | string | null
}

export type ErrorCreateInput = {
  code: string
  description?: string | null
  category: Prisma.ErrorCategoryCreateNestedOneWithoutErrorsInput
  asset_errors?: Prisma.AssetErrorCreateNestedManyWithoutErrorInput
}

export type ErrorUncheckedCreateInput = {
  id?: number
  error_category_id: number
  code: string
  description?: string | null
  asset_errors?: Prisma.AssetErrorUncheckedCreateNestedManyWithoutErrorInput
}

export type ErrorUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.ErrorCategoryUpdateOneRequiredWithoutErrorsNestedInput
  asset_errors?: Prisma.AssetErrorUpdateManyWithoutErrorNestedInput
}

export type ErrorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  error_category_id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asset_errors?: Prisma.AssetErrorUncheckedUpdateManyWithoutErrorNestedInput
}

export type ErrorCreateManyInput = {
  id?: number
  error_category_id: number
  code: string
  description?: string | null
}

export type ErrorUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ErrorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  error_category_id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ErrorListRelationFilter = {
  every?: Prisma.ErrorWhereInput
  some?: Prisma.ErrorWhereInput
  none?: Prisma.ErrorWhereInput
}

export type ErrorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ErrorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type ErrorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
}

export type ErrorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type ErrorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  description?: Prisma.SortOrder
}

export type ErrorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  error_category_id?: Prisma.SortOrder
}

export type ErrorScalarRelationFilter = {
  is?: Prisma.ErrorWhereInput
  isNot?: Prisma.ErrorWhereInput
}

export type ErrorCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.ErrorCreateWithoutCategoryInput, Prisma.ErrorUncheckedCreateWithoutCategoryInput> | Prisma.ErrorCreateWithoutCategoryInput[] | Prisma.ErrorUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ErrorCreateOrConnectWithoutCategoryInput | Prisma.ErrorCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.ErrorCreateManyCategoryInputEnvelope
  connect?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
}

export type ErrorUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.ErrorCreateWithoutCategoryInput, Prisma.ErrorUncheckedCreateWithoutCategoryInput> | Prisma.ErrorCreateWithoutCategoryInput[] | Prisma.ErrorUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ErrorCreateOrConnectWithoutCategoryInput | Prisma.ErrorCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.ErrorCreateManyCategoryInputEnvelope
  connect?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
}

export type ErrorUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.ErrorCreateWithoutCategoryInput, Prisma.ErrorUncheckedCreateWithoutCategoryInput> | Prisma.ErrorCreateWithoutCategoryInput[] | Prisma.ErrorUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ErrorCreateOrConnectWithoutCategoryInput | Prisma.ErrorCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.ErrorUpsertWithWhereUniqueWithoutCategoryInput | Prisma.ErrorUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.ErrorCreateManyCategoryInputEnvelope
  set?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  disconnect?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  delete?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  connect?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  update?: Prisma.ErrorUpdateWithWhereUniqueWithoutCategoryInput | Prisma.ErrorUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.ErrorUpdateManyWithWhereWithoutCategoryInput | Prisma.ErrorUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.ErrorScalarWhereInput | Prisma.ErrorScalarWhereInput[]
}

export type ErrorUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.ErrorCreateWithoutCategoryInput, Prisma.ErrorUncheckedCreateWithoutCategoryInput> | Prisma.ErrorCreateWithoutCategoryInput[] | Prisma.ErrorUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.ErrorCreateOrConnectWithoutCategoryInput | Prisma.ErrorCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.ErrorUpsertWithWhereUniqueWithoutCategoryInput | Prisma.ErrorUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.ErrorCreateManyCategoryInputEnvelope
  set?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  disconnect?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  delete?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  connect?: Prisma.ErrorWhereUniqueInput | Prisma.ErrorWhereUniqueInput[]
  update?: Prisma.ErrorUpdateWithWhereUniqueWithoutCategoryInput | Prisma.ErrorUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.ErrorUpdateManyWithWhereWithoutCategoryInput | Prisma.ErrorUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.ErrorScalarWhereInput | Prisma.ErrorScalarWhereInput[]
}

export type ErrorCreateNestedOneWithoutAsset_errorsInput = {
  create?: Prisma.XOR<Prisma.ErrorCreateWithoutAsset_errorsInput, Prisma.ErrorUncheckedCreateWithoutAsset_errorsInput>
  connectOrCreate?: Prisma.ErrorCreateOrConnectWithoutAsset_errorsInput
  connect?: Prisma.ErrorWhereUniqueInput
}

export type ErrorUpdateOneRequiredWithoutAsset_errorsNestedInput = {
  create?: Prisma.XOR<Prisma.ErrorCreateWithoutAsset_errorsInput, Prisma.ErrorUncheckedCreateWithoutAsset_errorsInput>
  connectOrCreate?: Prisma.ErrorCreateOrConnectWithoutAsset_errorsInput
  upsert?: Prisma.ErrorUpsertWithoutAsset_errorsInput
  connect?: Prisma.ErrorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ErrorUpdateToOneWithWhereWithoutAsset_errorsInput, Prisma.ErrorUpdateWithoutAsset_errorsInput>, Prisma.ErrorUncheckedUpdateWithoutAsset_errorsInput>
}

export type ErrorCreateWithoutCategoryInput = {
  code: string
  description?: string | null
  asset_errors?: Prisma.AssetErrorCreateNestedManyWithoutErrorInput
}

export type ErrorUncheckedCreateWithoutCategoryInput = {
  id?: number
  code: string
  description?: string | null
  asset_errors?: Prisma.AssetErrorUncheckedCreateNestedManyWithoutErrorInput
}

export type ErrorCreateOrConnectWithoutCategoryInput = {
  where: Prisma.ErrorWhereUniqueInput
  create: Prisma.XOR<Prisma.ErrorCreateWithoutCategoryInput, Prisma.ErrorUncheckedCreateWithoutCategoryInput>
}

export type ErrorCreateManyCategoryInputEnvelope = {
  data: Prisma.ErrorCreateManyCategoryInput | Prisma.ErrorCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type ErrorUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.ErrorWhereUniqueInput
  update: Prisma.XOR<Prisma.ErrorUpdateWithoutCategoryInput, Prisma.ErrorUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.ErrorCreateWithoutCategoryInput, Prisma.ErrorUncheckedCreateWithoutCategoryInput>
}

export type ErrorUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.ErrorWhereUniqueInput
  data: Prisma.XOR<Prisma.ErrorUpdateWithoutCategoryInput, Prisma.ErrorUncheckedUpdateWithoutCategoryInput>
}

export type ErrorUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.ErrorScalarWhereInput
  data: Prisma.XOR<Prisma.ErrorUpdateManyMutationInput, Prisma.ErrorUncheckedUpdateManyWithoutCategoryInput>
}

export type ErrorScalarWhereInput = {
  AND?: Prisma.ErrorScalarWhereInput | Prisma.ErrorScalarWhereInput[]
  OR?: Prisma.ErrorScalarWhereInput[]
  NOT?: Prisma.ErrorScalarWhereInput | Prisma.ErrorScalarWhereInput[]
  id?: Prisma.IntFilter<"Error"> | number
  error_category_id?: Prisma.IntFilter<"Error"> | number
  code?: Prisma.StringFilter<"Error"> | string
  description?: Prisma.StringNullableFilter<"Error"> | string | null
}

export type ErrorCreateWithoutAsset_errorsInput = {
  code: string
  description?: string | null
  category: Prisma.ErrorCategoryCreateNestedOneWithoutErrorsInput
}

export type ErrorUncheckedCreateWithoutAsset_errorsInput = {
  id?: number
  error_category_id: number
  code: string
  description?: string | null
}

export type ErrorCreateOrConnectWithoutAsset_errorsInput = {
  where: Prisma.ErrorWhereUniqueInput
  create: Prisma.XOR<Prisma.ErrorCreateWithoutAsset_errorsInput, Prisma.ErrorUncheckedCreateWithoutAsset_errorsInput>
}

export type ErrorUpsertWithoutAsset_errorsInput = {
  update: Prisma.XOR<Prisma.ErrorUpdateWithoutAsset_errorsInput, Prisma.ErrorUncheckedUpdateWithoutAsset_errorsInput>
  create: Prisma.XOR<Prisma.ErrorCreateWithoutAsset_errorsInput, Prisma.ErrorUncheckedCreateWithoutAsset_errorsInput>
  where?: Prisma.ErrorWhereInput
}

export type ErrorUpdateToOneWithWhereWithoutAsset_errorsInput = {
  where?: Prisma.ErrorWhereInput
  data: Prisma.XOR<Prisma.ErrorUpdateWithoutAsset_errorsInput, Prisma.ErrorUncheckedUpdateWithoutAsset_errorsInput>
}

export type ErrorUpdateWithoutAsset_errorsInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  category?: Prisma.ErrorCategoryUpdateOneRequiredWithoutErrorsNestedInput
}

export type ErrorUncheckedUpdateWithoutAsset_errorsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  error_category_id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ErrorCreateManyCategoryInput = {
  id?: number
  code: string
  description?: string | null
}

export type ErrorUpdateWithoutCategoryInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asset_errors?: Prisma.AssetErrorUpdateManyWithoutErrorNestedInput
}

export type ErrorUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  asset_errors?: Prisma.AssetErrorUncheckedUpdateManyWithoutErrorNestedInput
}

export type ErrorUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type ErrorCountOutputType
 */

export type ErrorCountOutputType = {
  asset_errors: number
}

export type ErrorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset_errors?: boolean | ErrorCountOutputTypeCountAsset_errorsArgs
}

/**
 * ErrorCountOutputType without action
 */
export type ErrorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCountOutputType
   */
  select?: Prisma.ErrorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ErrorCountOutputType without action
 */
export type ErrorCountOutputTypeCountAsset_errorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetErrorWhereInput
}


export type ErrorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  error_category_id?: boolean
  code?: boolean
  description?: boolean
  category?: boolean | Prisma.ErrorCategoryDefaultArgs<ExtArgs>
  asset_errors?: boolean | Prisma.Error$asset_errorsArgs<ExtArgs>
  _count?: boolean | Prisma.ErrorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["error"]>

export type ErrorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  error_category_id?: boolean
  code?: boolean
  description?: boolean
  category?: boolean | Prisma.ErrorCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["error"]>

export type ErrorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  error_category_id?: boolean
  code?: boolean
  description?: boolean
  category?: boolean | Prisma.ErrorCategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["error"]>

export type ErrorSelectScalar = {
  id?: boolean
  error_category_id?: boolean
  code?: boolean
  description?: boolean
}

export type ErrorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "error_category_id" | "code" | "description", ExtArgs["result"]["error"]>
export type ErrorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.ErrorCategoryDefaultArgs<ExtArgs>
  asset_errors?: boolean | Prisma.Error$asset_errorsArgs<ExtArgs>
  _count?: boolean | Prisma.ErrorCountOutputTypeDefaultArgs<ExtArgs>
}
export type ErrorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.ErrorCategoryDefaultArgs<ExtArgs>
}
export type ErrorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.ErrorCategoryDefaultArgs<ExtArgs>
}

export type $ErrorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Error"
  objects: {
    category: Prisma.$ErrorCategoryPayload<ExtArgs>
    asset_errors: Prisma.$AssetErrorPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    error_category_id: number
    code: string
    description: string | null
  }, ExtArgs["result"]["error"]>
  composites: {}
}

export type ErrorGetPayload<S extends boolean | null | undefined | ErrorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ErrorPayload, S>

export type ErrorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ErrorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ErrorCountAggregateInputType | true
  }

export interface ErrorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Error'], meta: { name: 'Error' } }
  /**
   * Find zero or one Error that matches the filter.
   * @param {ErrorFindUniqueArgs} args - Arguments to find a Error
   * @example
   * // Get one Error
   * const error = await prisma.error.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ErrorFindUniqueArgs>(args: Prisma.SelectSubset<T, ErrorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Error that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ErrorFindUniqueOrThrowArgs} args - Arguments to find a Error
   * @example
   * // Get one Error
   * const error = await prisma.error.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ErrorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ErrorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Error that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorFindFirstArgs} args - Arguments to find a Error
   * @example
   * // Get one Error
   * const error = await prisma.error.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ErrorFindFirstArgs>(args?: Prisma.SelectSubset<T, ErrorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Error that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorFindFirstOrThrowArgs} args - Arguments to find a Error
   * @example
   * // Get one Error
   * const error = await prisma.error.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ErrorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ErrorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Errors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Errors
   * const errors = await prisma.error.findMany()
   * 
   * // Get first 10 Errors
   * const errors = await prisma.error.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const errorWithIdOnly = await prisma.error.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ErrorFindManyArgs>(args?: Prisma.SelectSubset<T, ErrorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Error.
   * @param {ErrorCreateArgs} args - Arguments to create a Error.
   * @example
   * // Create one Error
   * const Error = await prisma.error.create({
   *   data: {
   *     // ... data to create a Error
   *   }
   * })
   * 
   */
  create<T extends ErrorCreateArgs>(args: Prisma.SelectSubset<T, ErrorCreateArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Errors.
   * @param {ErrorCreateManyArgs} args - Arguments to create many Errors.
   * @example
   * // Create many Errors
   * const error = await prisma.error.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ErrorCreateManyArgs>(args?: Prisma.SelectSubset<T, ErrorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Errors and returns the data saved in the database.
   * @param {ErrorCreateManyAndReturnArgs} args - Arguments to create many Errors.
   * @example
   * // Create many Errors
   * const error = await prisma.error.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Errors and only return the `id`
   * const errorWithIdOnly = await prisma.error.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ErrorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ErrorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Error.
   * @param {ErrorDeleteArgs} args - Arguments to delete one Error.
   * @example
   * // Delete one Error
   * const Error = await prisma.error.delete({
   *   where: {
   *     // ... filter to delete one Error
   *   }
   * })
   * 
   */
  delete<T extends ErrorDeleteArgs>(args: Prisma.SelectSubset<T, ErrorDeleteArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Error.
   * @param {ErrorUpdateArgs} args - Arguments to update one Error.
   * @example
   * // Update one Error
   * const error = await prisma.error.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ErrorUpdateArgs>(args: Prisma.SelectSubset<T, ErrorUpdateArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Errors.
   * @param {ErrorDeleteManyArgs} args - Arguments to filter Errors to delete.
   * @example
   * // Delete a few Errors
   * const { count } = await prisma.error.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ErrorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ErrorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Errors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Errors
   * const error = await prisma.error.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ErrorUpdateManyArgs>(args: Prisma.SelectSubset<T, ErrorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Errors and returns the data updated in the database.
   * @param {ErrorUpdateManyAndReturnArgs} args - Arguments to update many Errors.
   * @example
   * // Update many Errors
   * const error = await prisma.error.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Errors and only return the `id`
   * const errorWithIdOnly = await prisma.error.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ErrorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ErrorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Error.
   * @param {ErrorUpsertArgs} args - Arguments to update or create a Error.
   * @example
   * // Update or create a Error
   * const error = await prisma.error.upsert({
   *   create: {
   *     // ... data to create a Error
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Error we want to update
   *   }
   * })
   */
  upsert<T extends ErrorUpsertArgs>(args: Prisma.SelectSubset<T, ErrorUpsertArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Errors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCountArgs} args - Arguments to filter Errors to count.
   * @example
   * // Count the number of Errors
   * const count = await prisma.error.count({
   *   where: {
   *     // ... the filter for the Errors we want to count
   *   }
   * })
  **/
  count<T extends ErrorCountArgs>(
    args?: Prisma.Subset<T, ErrorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ErrorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Error.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ErrorAggregateArgs>(args: Prisma.Subset<T, ErrorAggregateArgs>): Prisma.PrismaPromise<GetErrorAggregateType<T>>

  /**
   * Group by Error.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ErrorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ErrorGroupByArgs['orderBy'] }
      : { orderBy?: ErrorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ErrorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetErrorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Error model
 */
readonly fields: ErrorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Error.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ErrorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  category<T extends Prisma.ErrorCategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ErrorCategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  asset_errors<T extends Prisma.Error$asset_errorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Error$asset_errorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Error model
 */
export interface ErrorFieldRefs {
  readonly id: Prisma.FieldRef<"Error", 'Int'>
  readonly error_category_id: Prisma.FieldRef<"Error", 'Int'>
  readonly code: Prisma.FieldRef<"Error", 'String'>
  readonly description: Prisma.FieldRef<"Error", 'String'>
}
    

// Custom InputTypes
/**
 * Error findUnique
 */
export type ErrorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * Filter, which Error to fetch.
   */
  where: Prisma.ErrorWhereUniqueInput
}

/**
 * Error findUniqueOrThrow
 */
export type ErrorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * Filter, which Error to fetch.
   */
  where: Prisma.ErrorWhereUniqueInput
}

/**
 * Error findFirst
 */
export type ErrorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * Filter, which Error to fetch.
   */
  where?: Prisma.ErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Errors to fetch.
   */
  orderBy?: Prisma.ErrorOrderByWithRelationInput | Prisma.ErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Errors.
   */
  cursor?: Prisma.ErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Errors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Errors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Errors.
   */
  distinct?: Prisma.ErrorScalarFieldEnum | Prisma.ErrorScalarFieldEnum[]
}

/**
 * Error findFirstOrThrow
 */
export type ErrorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * Filter, which Error to fetch.
   */
  where?: Prisma.ErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Errors to fetch.
   */
  orderBy?: Prisma.ErrorOrderByWithRelationInput | Prisma.ErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Errors.
   */
  cursor?: Prisma.ErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Errors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Errors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Errors.
   */
  distinct?: Prisma.ErrorScalarFieldEnum | Prisma.ErrorScalarFieldEnum[]
}

/**
 * Error findMany
 */
export type ErrorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * Filter, which Errors to fetch.
   */
  where?: Prisma.ErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Errors to fetch.
   */
  orderBy?: Prisma.ErrorOrderByWithRelationInput | Prisma.ErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Errors.
   */
  cursor?: Prisma.ErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Errors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Errors.
   */
  skip?: number
  distinct?: Prisma.ErrorScalarFieldEnum | Prisma.ErrorScalarFieldEnum[]
}

/**
 * Error create
 */
export type ErrorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * The data needed to create a Error.
   */
  data: Prisma.XOR<Prisma.ErrorCreateInput, Prisma.ErrorUncheckedCreateInput>
}

/**
 * Error createMany
 */
export type ErrorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Errors.
   */
  data: Prisma.ErrorCreateManyInput | Prisma.ErrorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Error createManyAndReturn
 */
export type ErrorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * The data used to create many Errors.
   */
  data: Prisma.ErrorCreateManyInput | Prisma.ErrorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Error update
 */
export type ErrorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * The data needed to update a Error.
   */
  data: Prisma.XOR<Prisma.ErrorUpdateInput, Prisma.ErrorUncheckedUpdateInput>
  /**
   * Choose, which Error to update.
   */
  where: Prisma.ErrorWhereUniqueInput
}

/**
 * Error updateMany
 */
export type ErrorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Errors.
   */
  data: Prisma.XOR<Prisma.ErrorUpdateManyMutationInput, Prisma.ErrorUncheckedUpdateManyInput>
  /**
   * Filter which Errors to update
   */
  where?: Prisma.ErrorWhereInput
  /**
   * Limit how many Errors to update.
   */
  limit?: number
}

/**
 * Error updateManyAndReturn
 */
export type ErrorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * The data used to update Errors.
   */
  data: Prisma.XOR<Prisma.ErrorUpdateManyMutationInput, Prisma.ErrorUncheckedUpdateManyInput>
  /**
   * Filter which Errors to update
   */
  where?: Prisma.ErrorWhereInput
  /**
   * Limit how many Errors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Error upsert
 */
export type ErrorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * The filter to search for the Error to update in case it exists.
   */
  where: Prisma.ErrorWhereUniqueInput
  /**
   * In case the Error found by the `where` argument doesn't exist, create a new Error with this data.
   */
  create: Prisma.XOR<Prisma.ErrorCreateInput, Prisma.ErrorUncheckedCreateInput>
  /**
   * In case the Error was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ErrorUpdateInput, Prisma.ErrorUncheckedUpdateInput>
}

/**
 * Error delete
 */
export type ErrorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  /**
   * Filter which Error to delete.
   */
  where: Prisma.ErrorWhereUniqueInput
}

/**
 * Error deleteMany
 */
export type ErrorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Errors to delete
   */
  where?: Prisma.ErrorWhereInput
  /**
   * Limit how many Errors to delete.
   */
  limit?: number
}

/**
 * Error.asset_errors
 */
export type Error$asset_errorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  where?: Prisma.AssetErrorWhereInput
  orderBy?: Prisma.AssetErrorOrderByWithRelationInput | Prisma.AssetErrorOrderByWithRelationInput[]
  cursor?: Prisma.AssetErrorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetErrorScalarFieldEnum | Prisma.AssetErrorScalarFieldEnum[]
}

/**
 * Error without action
 */
export type ErrorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
}
