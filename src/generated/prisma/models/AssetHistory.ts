
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AssetHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AssetHistory
 * 
 */
export type AssetHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$AssetHistoryPayload>

export type AggregateAssetHistory = {
  _count: AssetHistoryCountAggregateOutputType | null
  _avg: AssetHistoryAvgAggregateOutputType | null
  _sum: AssetHistorySumAggregateOutputType | null
  _min: AssetHistoryMinAggregateOutputType | null
  _max: AssetHistoryMaxAggregateOutputType | null
}

export type AssetHistoryAvgAggregateOutputType = {
  id: number | null
  asset_id: number | null
  user_id: number | null
}

export type AssetHistorySumAggregateOutputType = {
  id: number | null
  asset_id: number | null
  user_id: number | null
}

export type AssetHistoryMinAggregateOutputType = {
  id: number | null
  asset_id: number | null
  user_id: number | null
  operation: $Enums.GeneralOperation | null
  data_field: $Enums.DataField | null
  changed_on: Date | null
}

export type AssetHistoryMaxAggregateOutputType = {
  id: number | null
  asset_id: number | null
  user_id: number | null
  operation: $Enums.GeneralOperation | null
  data_field: $Enums.DataField | null
  changed_on: Date | null
}

export type AssetHistoryCountAggregateOutputType = {
  id: number
  asset_id: number
  user_id: number
  operation: number
  data_field: number
  changed_on: number
  changes: number
  _all: number
}


export type AssetHistoryAvgAggregateInputType = {
  id?: true
  asset_id?: true
  user_id?: true
}

export type AssetHistorySumAggregateInputType = {
  id?: true
  asset_id?: true
  user_id?: true
}

export type AssetHistoryMinAggregateInputType = {
  id?: true
  asset_id?: true
  user_id?: true
  operation?: true
  data_field?: true
  changed_on?: true
}

export type AssetHistoryMaxAggregateInputType = {
  id?: true
  asset_id?: true
  user_id?: true
  operation?: true
  data_field?: true
  changed_on?: true
}

export type AssetHistoryCountAggregateInputType = {
  id?: true
  asset_id?: true
  user_id?: true
  operation?: true
  data_field?: true
  changed_on?: true
  changes?: true
  _all?: true
}

export type AssetHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetHistory to aggregate.
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetHistories to fetch.
   */
  orderBy?: Prisma.AssetHistoryOrderByWithRelationInput | Prisma.AssetHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssetHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AssetHistories
  **/
  _count?: true | AssetHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssetHistoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssetHistorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssetHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssetHistoryMaxAggregateInputType
}

export type GetAssetHistoryAggregateType<T extends AssetHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateAssetHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssetHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateAssetHistory[P]>
}




export type AssetHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetHistoryWhereInput
  orderBy?: Prisma.AssetHistoryOrderByWithAggregationInput | Prisma.AssetHistoryOrderByWithAggregationInput[]
  by: Prisma.AssetHistoryScalarFieldEnum[] | Prisma.AssetHistoryScalarFieldEnum
  having?: Prisma.AssetHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssetHistoryCountAggregateInputType | true
  _avg?: AssetHistoryAvgAggregateInputType
  _sum?: AssetHistorySumAggregateInputType
  _min?: AssetHistoryMinAggregateInputType
  _max?: AssetHistoryMaxAggregateInputType
}

export type AssetHistoryGroupByOutputType = {
  id: number
  asset_id: number
  user_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date
  changes: runtime.JsonValue
  _count: AssetHistoryCountAggregateOutputType | null
  _avg: AssetHistoryAvgAggregateOutputType | null
  _sum: AssetHistorySumAggregateOutputType | null
  _min: AssetHistoryMinAggregateOutputType | null
  _max: AssetHistoryMaxAggregateOutputType | null
}

type GetAssetHistoryGroupByPayload<T extends AssetHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssetHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssetHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssetHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssetHistoryGroupByOutputType[P]>
      }
    >
  > 



export type AssetHistoryWhereInput = {
  AND?: Prisma.AssetHistoryWhereInput | Prisma.AssetHistoryWhereInput[]
  OR?: Prisma.AssetHistoryWhereInput[]
  NOT?: Prisma.AssetHistoryWhereInput | Prisma.AssetHistoryWhereInput[]
  id?: Prisma.IntFilter<"AssetHistory"> | number
  asset_id?: Prisma.IntFilter<"AssetHistory"> | number
  user_id?: Prisma.IntFilter<"AssetHistory"> | number
  operation?: Prisma.EnumGeneralOperationFilter<"AssetHistory"> | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFilter<"AssetHistory"> | $Enums.DataField
  changed_on?: Prisma.DateTimeFilter<"AssetHistory"> | Date | string
  changes?: Prisma.JsonFilter<"AssetHistory">
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AssetHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  data_field?: Prisma.SortOrder
  changed_on?: Prisma.SortOrder
  changes?: Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type AssetHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AssetHistoryWhereInput | Prisma.AssetHistoryWhereInput[]
  OR?: Prisma.AssetHistoryWhereInput[]
  NOT?: Prisma.AssetHistoryWhereInput | Prisma.AssetHistoryWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetHistory"> | number
  user_id?: Prisma.IntFilter<"AssetHistory"> | number
  operation?: Prisma.EnumGeneralOperationFilter<"AssetHistory"> | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFilter<"AssetHistory"> | $Enums.DataField
  changed_on?: Prisma.DateTimeFilter<"AssetHistory"> | Date | string
  changes?: Prisma.JsonFilter<"AssetHistory">
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AssetHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  data_field?: Prisma.SortOrder
  changed_on?: Prisma.SortOrder
  changes?: Prisma.SortOrder
  _count?: Prisma.AssetHistoryCountOrderByAggregateInput
  _avg?: Prisma.AssetHistoryAvgOrderByAggregateInput
  _max?: Prisma.AssetHistoryMaxOrderByAggregateInput
  _min?: Prisma.AssetHistoryMinOrderByAggregateInput
  _sum?: Prisma.AssetHistorySumOrderByAggregateInput
}

export type AssetHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssetHistoryScalarWhereWithAggregatesInput | Prisma.AssetHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssetHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssetHistoryScalarWhereWithAggregatesInput | Prisma.AssetHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AssetHistory"> | number
  asset_id?: Prisma.IntWithAggregatesFilter<"AssetHistory"> | number
  user_id?: Prisma.IntWithAggregatesFilter<"AssetHistory"> | number
  operation?: Prisma.EnumGeneralOperationWithAggregatesFilter<"AssetHistory"> | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldWithAggregatesFilter<"AssetHistory"> | $Enums.DataField
  changed_on?: Prisma.DateTimeWithAggregatesFilter<"AssetHistory"> | Date | string
  changes?: Prisma.JsonWithAggregatesFilter<"AssetHistory">
}

export type AssetHistoryCreateInput = {
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
  asset: Prisma.AssetCreateNestedOneWithoutAsset_historyInput
  user: Prisma.UserCreateNestedOneWithoutAsset_historyInput
}

export type AssetHistoryUncheckedCreateInput = {
  id?: number
  asset_id: number
  user_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUpdateInput = {
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_historyNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutAsset_historyNestedInput
}

export type AssetHistoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryCreateManyInput = {
  id?: number
  asset_id: number
  user_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUpdateManyMutationInput = {
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryListRelationFilter = {
  every?: Prisma.AssetHistoryWhereInput
  some?: Prisma.AssetHistoryWhereInput
  none?: Prisma.AssetHistoryWhereInput
}

export type AssetHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AssetHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  data_field?: Prisma.SortOrder
  changed_on?: Prisma.SortOrder
  changes?: Prisma.SortOrder
}

export type AssetHistoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type AssetHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  data_field?: Prisma.SortOrder
  changed_on?: Prisma.SortOrder
}

export type AssetHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  data_field?: Prisma.SortOrder
  changed_on?: Prisma.SortOrder
}

export type AssetHistorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type AssetHistoryCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutAssetInput, Prisma.AssetHistoryUncheckedCreateWithoutAssetInput> | Prisma.AssetHistoryCreateWithoutAssetInput[] | Prisma.AssetHistoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutAssetInput | Prisma.AssetHistoryCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetHistoryCreateManyAssetInputEnvelope
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
}

export type AssetHistoryUncheckedCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutAssetInput, Prisma.AssetHistoryUncheckedCreateWithoutAssetInput> | Prisma.AssetHistoryCreateWithoutAssetInput[] | Prisma.AssetHistoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutAssetInput | Prisma.AssetHistoryCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetHistoryCreateManyAssetInputEnvelope
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
}

export type AssetHistoryUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutAssetInput, Prisma.AssetHistoryUncheckedCreateWithoutAssetInput> | Prisma.AssetHistoryCreateWithoutAssetInput[] | Prisma.AssetHistoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutAssetInput | Prisma.AssetHistoryCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetHistoryUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetHistoryUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetHistoryCreateManyAssetInputEnvelope
  set?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  disconnect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  delete?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  update?: Prisma.AssetHistoryUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetHistoryUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetHistoryUpdateManyWithWhereWithoutAssetInput | Prisma.AssetHistoryUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetHistoryScalarWhereInput | Prisma.AssetHistoryScalarWhereInput[]
}

export type AssetHistoryUncheckedUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutAssetInput, Prisma.AssetHistoryUncheckedCreateWithoutAssetInput> | Prisma.AssetHistoryCreateWithoutAssetInput[] | Prisma.AssetHistoryUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutAssetInput | Prisma.AssetHistoryCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetHistoryUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetHistoryUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetHistoryCreateManyAssetInputEnvelope
  set?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  disconnect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  delete?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  update?: Prisma.AssetHistoryUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetHistoryUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetHistoryUpdateManyWithWhereWithoutAssetInput | Prisma.AssetHistoryUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetHistoryScalarWhereInput | Prisma.AssetHistoryScalarWhereInput[]
}

export type AssetHistoryCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutUserInput, Prisma.AssetHistoryUncheckedCreateWithoutUserInput> | Prisma.AssetHistoryCreateWithoutUserInput[] | Prisma.AssetHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutUserInput | Prisma.AssetHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AssetHistoryCreateManyUserInputEnvelope
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
}

export type AssetHistoryUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutUserInput, Prisma.AssetHistoryUncheckedCreateWithoutUserInput> | Prisma.AssetHistoryCreateWithoutUserInput[] | Prisma.AssetHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutUserInput | Prisma.AssetHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AssetHistoryCreateManyUserInputEnvelope
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
}

export type AssetHistoryUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutUserInput, Prisma.AssetHistoryUncheckedCreateWithoutUserInput> | Prisma.AssetHistoryCreateWithoutUserInput[] | Prisma.AssetHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutUserInput | Prisma.AssetHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AssetHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.AssetHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AssetHistoryCreateManyUserInputEnvelope
  set?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  disconnect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  delete?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  update?: Prisma.AssetHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.AssetHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AssetHistoryUpdateManyWithWhereWithoutUserInput | Prisma.AssetHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AssetHistoryScalarWhereInput | Prisma.AssetHistoryScalarWhereInput[]
}

export type AssetHistoryUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AssetHistoryCreateWithoutUserInput, Prisma.AssetHistoryUncheckedCreateWithoutUserInput> | Prisma.AssetHistoryCreateWithoutUserInput[] | Prisma.AssetHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssetHistoryCreateOrConnectWithoutUserInput | Prisma.AssetHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AssetHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.AssetHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AssetHistoryCreateManyUserInputEnvelope
  set?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  disconnect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  delete?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  connect?: Prisma.AssetHistoryWhereUniqueInput | Prisma.AssetHistoryWhereUniqueInput[]
  update?: Prisma.AssetHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.AssetHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AssetHistoryUpdateManyWithWhereWithoutUserInput | Prisma.AssetHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AssetHistoryScalarWhereInput | Prisma.AssetHistoryScalarWhereInput[]
}

export type EnumGeneralOperationFieldUpdateOperationsInput = {
  set?: $Enums.GeneralOperation
}

export type EnumDataFieldFieldUpdateOperationsInput = {
  set?: $Enums.DataField
}

export type AssetHistoryCreateWithoutAssetInput = {
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
  user: Prisma.UserCreateNestedOneWithoutAsset_historyInput
}

export type AssetHistoryUncheckedCreateWithoutAssetInput = {
  id?: number
  user_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryCreateOrConnectWithoutAssetInput = {
  where: Prisma.AssetHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetHistoryCreateWithoutAssetInput, Prisma.AssetHistoryUncheckedCreateWithoutAssetInput>
}

export type AssetHistoryCreateManyAssetInputEnvelope = {
  data: Prisma.AssetHistoryCreateManyAssetInput | Prisma.AssetHistoryCreateManyAssetInput[]
  skipDuplicates?: boolean
}

export type AssetHistoryUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetHistoryUpdateWithoutAssetInput, Prisma.AssetHistoryUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.AssetHistoryCreateWithoutAssetInput, Prisma.AssetHistoryUncheckedCreateWithoutAssetInput>
}

export type AssetHistoryUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetHistoryUpdateWithoutAssetInput, Prisma.AssetHistoryUncheckedUpdateWithoutAssetInput>
}

export type AssetHistoryUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.AssetHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.AssetHistoryUpdateManyMutationInput, Prisma.AssetHistoryUncheckedUpdateManyWithoutAssetInput>
}

export type AssetHistoryScalarWhereInput = {
  AND?: Prisma.AssetHistoryScalarWhereInput | Prisma.AssetHistoryScalarWhereInput[]
  OR?: Prisma.AssetHistoryScalarWhereInput[]
  NOT?: Prisma.AssetHistoryScalarWhereInput | Prisma.AssetHistoryScalarWhereInput[]
  id?: Prisma.IntFilter<"AssetHistory"> | number
  asset_id?: Prisma.IntFilter<"AssetHistory"> | number
  user_id?: Prisma.IntFilter<"AssetHistory"> | number
  operation?: Prisma.EnumGeneralOperationFilter<"AssetHistory"> | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFilter<"AssetHistory"> | $Enums.DataField
  changed_on?: Prisma.DateTimeFilter<"AssetHistory"> | Date | string
  changes?: Prisma.JsonFilter<"AssetHistory">
}

export type AssetHistoryCreateWithoutUserInput = {
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
  asset: Prisma.AssetCreateNestedOneWithoutAsset_historyInput
}

export type AssetHistoryUncheckedCreateWithoutUserInput = {
  id?: number
  asset_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryCreateOrConnectWithoutUserInput = {
  where: Prisma.AssetHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetHistoryCreateWithoutUserInput, Prisma.AssetHistoryUncheckedCreateWithoutUserInput>
}

export type AssetHistoryCreateManyUserInputEnvelope = {
  data: Prisma.AssetHistoryCreateManyUserInput | Prisma.AssetHistoryCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AssetHistoryUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AssetHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetHistoryUpdateWithoutUserInput, Prisma.AssetHistoryUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AssetHistoryCreateWithoutUserInput, Prisma.AssetHistoryUncheckedCreateWithoutUserInput>
}

export type AssetHistoryUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AssetHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetHistoryUpdateWithoutUserInput, Prisma.AssetHistoryUncheckedUpdateWithoutUserInput>
}

export type AssetHistoryUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AssetHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.AssetHistoryUpdateManyMutationInput, Prisma.AssetHistoryUncheckedUpdateManyWithoutUserInput>
}

export type AssetHistoryCreateManyAssetInput = {
  id?: number
  user_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUpdateWithoutAssetInput = {
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  user?: Prisma.UserUpdateOneRequiredWithoutAsset_historyNestedInput
}

export type AssetHistoryUncheckedUpdateWithoutAssetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUncheckedUpdateManyWithoutAssetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryCreateManyUserInput = {
  id?: number
  asset_id: number
  operation: $Enums.GeneralOperation
  data_field: $Enums.DataField
  changed_on: Date | string
  changes: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUpdateWithoutUserInput = {
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_historyNestedInput
}

export type AssetHistoryUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type AssetHistoryUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  operation?: Prisma.EnumGeneralOperationFieldUpdateOperationsInput | $Enums.GeneralOperation
  data_field?: Prisma.EnumDataFieldFieldUpdateOperationsInput | $Enums.DataField
  changed_on?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  changes?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}



export type AssetHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  user_id?: boolean
  operation?: boolean
  data_field?: boolean
  changed_on?: boolean
  changes?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetHistory"]>

export type AssetHistorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  user_id?: boolean
  operation?: boolean
  data_field?: boolean
  changed_on?: boolean
  changes?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetHistory"]>

export type AssetHistorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  user_id?: boolean
  operation?: boolean
  data_field?: boolean
  changed_on?: boolean
  changes?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetHistory"]>

export type AssetHistorySelectScalar = {
  id?: boolean
  asset_id?: boolean
  user_id?: boolean
  operation?: boolean
  data_field?: boolean
  changed_on?: boolean
  changes?: boolean
}

export type AssetHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "asset_id" | "user_id" | "operation" | "data_field" | "changed_on" | "changes", ExtArgs["result"]["assetHistory"]>
export type AssetHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AssetHistoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AssetHistoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AssetHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AssetHistory"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    asset_id: number
    user_id: number
    operation: $Enums.GeneralOperation
    data_field: $Enums.DataField
    changed_on: Date
    changes: runtime.JsonValue
  }, ExtArgs["result"]["assetHistory"]>
  composites: {}
}

export type AssetHistoryGetPayload<S extends boolean | null | undefined | AssetHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload, S>

export type AssetHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssetHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssetHistoryCountAggregateInputType | true
  }

export interface AssetHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetHistory'], meta: { name: 'AssetHistory' } }
  /**
   * Find zero or one AssetHistory that matches the filter.
   * @param {AssetHistoryFindUniqueArgs} args - Arguments to find a AssetHistory
   * @example
   * // Get one AssetHistory
   * const assetHistory = await prisma.assetHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssetHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, AssetHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AssetHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssetHistoryFindUniqueOrThrowArgs} args - Arguments to find a AssetHistory
   * @example
   * // Get one AssetHistory
   * const assetHistory = await prisma.assetHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssetHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssetHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryFindFirstArgs} args - Arguments to find a AssetHistory
   * @example
   * // Get one AssetHistory
   * const assetHistory = await prisma.assetHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssetHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, AssetHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryFindFirstOrThrowArgs} args - Arguments to find a AssetHistory
   * @example
   * // Get one AssetHistory
   * const assetHistory = await prisma.assetHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssetHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssetHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AssetHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssetHistories
   * const assetHistories = await prisma.assetHistory.findMany()
   * 
   * // Get first 10 AssetHistories
   * const assetHistories = await prisma.assetHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const assetHistoryWithIdOnly = await prisma.assetHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AssetHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, AssetHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AssetHistory.
   * @param {AssetHistoryCreateArgs} args - Arguments to create a AssetHistory.
   * @example
   * // Create one AssetHistory
   * const AssetHistory = await prisma.assetHistory.create({
   *   data: {
   *     // ... data to create a AssetHistory
   *   }
   * })
   * 
   */
  create<T extends AssetHistoryCreateArgs>(args: Prisma.SelectSubset<T, AssetHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AssetHistories.
   * @param {AssetHistoryCreateManyArgs} args - Arguments to create many AssetHistories.
   * @example
   * // Create many AssetHistories
   * const assetHistory = await prisma.assetHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssetHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, AssetHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AssetHistories and returns the data saved in the database.
   * @param {AssetHistoryCreateManyAndReturnArgs} args - Arguments to create many AssetHistories.
   * @example
   * // Create many AssetHistories
   * const assetHistory = await prisma.assetHistory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AssetHistories and only return the `id`
   * const assetHistoryWithIdOnly = await prisma.assetHistory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssetHistoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssetHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AssetHistory.
   * @param {AssetHistoryDeleteArgs} args - Arguments to delete one AssetHistory.
   * @example
   * // Delete one AssetHistory
   * const AssetHistory = await prisma.assetHistory.delete({
   *   where: {
   *     // ... filter to delete one AssetHistory
   *   }
   * })
   * 
   */
  delete<T extends AssetHistoryDeleteArgs>(args: Prisma.SelectSubset<T, AssetHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AssetHistory.
   * @param {AssetHistoryUpdateArgs} args - Arguments to update one AssetHistory.
   * @example
   * // Update one AssetHistory
   * const assetHistory = await prisma.assetHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssetHistoryUpdateArgs>(args: Prisma.SelectSubset<T, AssetHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AssetHistories.
   * @param {AssetHistoryDeleteManyArgs} args - Arguments to filter AssetHistories to delete.
   * @example
   * // Delete a few AssetHistories
   * const { count } = await prisma.assetHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssetHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssetHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssetHistories
   * const assetHistory = await prisma.assetHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssetHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, AssetHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetHistories and returns the data updated in the database.
   * @param {AssetHistoryUpdateManyAndReturnArgs} args - Arguments to update many AssetHistories.
   * @example
   * // Update many AssetHistories
   * const assetHistory = await prisma.assetHistory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AssetHistories and only return the `id`
   * const assetHistoryWithIdOnly = await prisma.assetHistory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssetHistoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssetHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AssetHistory.
   * @param {AssetHistoryUpsertArgs} args - Arguments to update or create a AssetHistory.
   * @example
   * // Update or create a AssetHistory
   * const assetHistory = await prisma.assetHistory.upsert({
   *   create: {
   *     // ... data to create a AssetHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssetHistory we want to update
   *   }
   * })
   */
  upsert<T extends AssetHistoryUpsertArgs>(args: Prisma.SelectSubset<T, AssetHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__AssetHistoryClient<runtime.Types.Result.GetResult<Prisma.$AssetHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AssetHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryCountArgs} args - Arguments to filter AssetHistories to count.
   * @example
   * // Count the number of AssetHistories
   * const count = await prisma.assetHistory.count({
   *   where: {
   *     // ... the filter for the AssetHistories we want to count
   *   }
   * })
  **/
  count<T extends AssetHistoryCountArgs>(
    args?: Prisma.Subset<T, AssetHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssetHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AssetHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssetHistoryAggregateArgs>(args: Prisma.Subset<T, AssetHistoryAggregateArgs>): Prisma.PrismaPromise<GetAssetHistoryAggregateType<T>>

  /**
   * Group by AssetHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssetHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssetHistoryGroupByArgs['orderBy'] }
      : { orderBy?: AssetHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssetHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AssetHistory model
 */
readonly fields: AssetHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssetHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssetHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AssetHistory model
 */
export interface AssetHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"AssetHistory", 'Int'>
  readonly asset_id: Prisma.FieldRef<"AssetHistory", 'Int'>
  readonly user_id: Prisma.FieldRef<"AssetHistory", 'Int'>
  readonly operation: Prisma.FieldRef<"AssetHistory", 'GeneralOperation'>
  readonly data_field: Prisma.FieldRef<"AssetHistory", 'DataField'>
  readonly changed_on: Prisma.FieldRef<"AssetHistory", 'DateTime'>
  readonly changes: Prisma.FieldRef<"AssetHistory", 'Json'>
}
    

// Custom InputTypes
/**
 * AssetHistory findUnique
 */
export type AssetHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetHistory to fetch.
   */
  where: Prisma.AssetHistoryWhereUniqueInput
}

/**
 * AssetHistory findUniqueOrThrow
 */
export type AssetHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetHistory to fetch.
   */
  where: Prisma.AssetHistoryWhereUniqueInput
}

/**
 * AssetHistory findFirst
 */
export type AssetHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetHistory to fetch.
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetHistories to fetch.
   */
  orderBy?: Prisma.AssetHistoryOrderByWithRelationInput | Prisma.AssetHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetHistories.
   */
  cursor?: Prisma.AssetHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetHistories.
   */
  distinct?: Prisma.AssetHistoryScalarFieldEnum | Prisma.AssetHistoryScalarFieldEnum[]
}

/**
 * AssetHistory findFirstOrThrow
 */
export type AssetHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetHistory to fetch.
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetHistories to fetch.
   */
  orderBy?: Prisma.AssetHistoryOrderByWithRelationInput | Prisma.AssetHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetHistories.
   */
  cursor?: Prisma.AssetHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetHistories.
   */
  distinct?: Prisma.AssetHistoryScalarFieldEnum | Prisma.AssetHistoryScalarFieldEnum[]
}

/**
 * AssetHistory findMany
 */
export type AssetHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * Filter, which AssetHistories to fetch.
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetHistories to fetch.
   */
  orderBy?: Prisma.AssetHistoryOrderByWithRelationInput | Prisma.AssetHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AssetHistories.
   */
  cursor?: Prisma.AssetHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetHistories.
   */
  skip?: number
  distinct?: Prisma.AssetHistoryScalarFieldEnum | Prisma.AssetHistoryScalarFieldEnum[]
}

/**
 * AssetHistory create
 */
export type AssetHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a AssetHistory.
   */
  data: Prisma.XOR<Prisma.AssetHistoryCreateInput, Prisma.AssetHistoryUncheckedCreateInput>
}

/**
 * AssetHistory createMany
 */
export type AssetHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AssetHistories.
   */
  data: Prisma.AssetHistoryCreateManyInput | Prisma.AssetHistoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetHistory createManyAndReturn
 */
export type AssetHistoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * The data used to create many AssetHistories.
   */
  data: Prisma.AssetHistoryCreateManyInput | Prisma.AssetHistoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AssetHistory update
 */
export type AssetHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a AssetHistory.
   */
  data: Prisma.XOR<Prisma.AssetHistoryUpdateInput, Prisma.AssetHistoryUncheckedUpdateInput>
  /**
   * Choose, which AssetHistory to update.
   */
  where: Prisma.AssetHistoryWhereUniqueInput
}

/**
 * AssetHistory updateMany
 */
export type AssetHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AssetHistories.
   */
  data: Prisma.XOR<Prisma.AssetHistoryUpdateManyMutationInput, Prisma.AssetHistoryUncheckedUpdateManyInput>
  /**
   * Filter which AssetHistories to update
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * Limit how many AssetHistories to update.
   */
  limit?: number
}

/**
 * AssetHistory updateManyAndReturn
 */
export type AssetHistoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * The data used to update AssetHistories.
   */
  data: Prisma.XOR<Prisma.AssetHistoryUpdateManyMutationInput, Prisma.AssetHistoryUncheckedUpdateManyInput>
  /**
   * Filter which AssetHistories to update
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * Limit how many AssetHistories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AssetHistory upsert
 */
export type AssetHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the AssetHistory to update in case it exists.
   */
  where: Prisma.AssetHistoryWhereUniqueInput
  /**
   * In case the AssetHistory found by the `where` argument doesn't exist, create a new AssetHistory with this data.
   */
  create: Prisma.XOR<Prisma.AssetHistoryCreateInput, Prisma.AssetHistoryUncheckedCreateInput>
  /**
   * In case the AssetHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssetHistoryUpdateInput, Prisma.AssetHistoryUncheckedUpdateInput>
}

/**
 * AssetHistory delete
 */
export type AssetHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
  /**
   * Filter which AssetHistory to delete.
   */
  where: Prisma.AssetHistoryWhereUniqueInput
}

/**
 * AssetHistory deleteMany
 */
export type AssetHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetHistories to delete
   */
  where?: Prisma.AssetHistoryWhereInput
  /**
   * Limit how many AssetHistories to delete.
   */
  limit?: number
}

/**
 * AssetHistory without action
 */
export type AssetHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetHistory
   */
  select?: Prisma.AssetHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetHistory
   */
  omit?: Prisma.AssetHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetHistoryInclude<ExtArgs> | null
}
