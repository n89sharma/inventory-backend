
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Hold` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Hold
 * 
 */
export type HoldModel = runtime.Types.Result.DefaultSelection<Prisma.$HoldPayload>

export type AggregateHold = {
  _count: HoldCountAggregateOutputType | null
  _avg: HoldAvgAggregateOutputType | null
  _sum: HoldSumAggregateOutputType | null
  _min: HoldMinAggregateOutputType | null
  _max: HoldMaxAggregateOutputType | null
}

export type HoldAvgAggregateOutputType = {
  id: number | null
  created_by_id: number | null
  created_for_id: number | null
  customer_id: number | null
}

export type HoldSumAggregateOutputType = {
  id: number | null
  created_by_id: number | null
  created_for_id: number | null
  customer_id: number | null
}

export type HoldMinAggregateOutputType = {
  id: number | null
  hold_number: string | null
  created_by_id: number | null
  created_for_id: number | null
  customer_id: number | null
  notes: string | null
  created_at: Date | null
}

export type HoldMaxAggregateOutputType = {
  id: number | null
  hold_number: string | null
  created_by_id: number | null
  created_for_id: number | null
  customer_id: number | null
  notes: string | null
  created_at: Date | null
}

export type HoldCountAggregateOutputType = {
  id: number
  hold_number: number
  created_by_id: number
  created_for_id: number
  customer_id: number
  notes: number
  created_at: number
  _all: number
}


export type HoldAvgAggregateInputType = {
  id?: true
  created_by_id?: true
  created_for_id?: true
  customer_id?: true
}

export type HoldSumAggregateInputType = {
  id?: true
  created_by_id?: true
  created_for_id?: true
  customer_id?: true
}

export type HoldMinAggregateInputType = {
  id?: true
  hold_number?: true
  created_by_id?: true
  created_for_id?: true
  customer_id?: true
  notes?: true
  created_at?: true
}

export type HoldMaxAggregateInputType = {
  id?: true
  hold_number?: true
  created_by_id?: true
  created_for_id?: true
  customer_id?: true
  notes?: true
  created_at?: true
}

export type HoldCountAggregateInputType = {
  id?: true
  hold_number?: true
  created_by_id?: true
  created_for_id?: true
  customer_id?: true
  notes?: true
  created_at?: true
  _all?: true
}

export type HoldAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Hold to aggregate.
   */
  where?: Prisma.HoldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Holds to fetch.
   */
  orderBy?: Prisma.HoldOrderByWithRelationInput | Prisma.HoldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HoldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Holds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Holds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Holds
  **/
  _count?: true | HoldCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: HoldAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: HoldSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HoldMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HoldMaxAggregateInputType
}

export type GetHoldAggregateType<T extends HoldAggregateArgs> = {
      [P in keyof T & keyof AggregateHold]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHold[P]>
    : Prisma.GetScalarType<T[P], AggregateHold[P]>
}




export type HoldGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HoldWhereInput
  orderBy?: Prisma.HoldOrderByWithAggregationInput | Prisma.HoldOrderByWithAggregationInput[]
  by: Prisma.HoldScalarFieldEnum[] | Prisma.HoldScalarFieldEnum
  having?: Prisma.HoldScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HoldCountAggregateInputType | true
  _avg?: HoldAvgAggregateInputType
  _sum?: HoldSumAggregateInputType
  _min?: HoldMinAggregateInputType
  _max?: HoldMaxAggregateInputType
}

export type HoldGroupByOutputType = {
  id: number
  hold_number: string
  created_by_id: number
  created_for_id: number
  customer_id: number
  notes: string | null
  created_at: Date
  _count: HoldCountAggregateOutputType | null
  _avg: HoldAvgAggregateOutputType | null
  _sum: HoldSumAggregateOutputType | null
  _min: HoldMinAggregateOutputType | null
  _max: HoldMaxAggregateOutputType | null
}

type GetHoldGroupByPayload<T extends HoldGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HoldGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HoldGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HoldGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HoldGroupByOutputType[P]>
      }
    >
  > 



export type HoldWhereInput = {
  AND?: Prisma.HoldWhereInput | Prisma.HoldWhereInput[]
  OR?: Prisma.HoldWhereInput[]
  NOT?: Prisma.HoldWhereInput | Prisma.HoldWhereInput[]
  id?: Prisma.IntFilter<"Hold"> | number
  hold_number?: Prisma.StringFilter<"Hold"> | string
  created_by_id?: Prisma.IntFilter<"Hold"> | number
  created_for_id?: Prisma.IntFilter<"Hold"> | number
  customer_id?: Prisma.IntFilter<"Hold"> | number
  notes?: Prisma.StringNullableFilter<"Hold"> | string | null
  created_at?: Prisma.DateTimeFilter<"Hold"> | Date | string
  created_by?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  created_for?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  customer?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  assets?: Prisma.AssetListRelationFilter
}

export type HoldOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  hold_number?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  created_by?: Prisma.UserOrderByWithRelationInput
  created_for?: Prisma.UserOrderByWithRelationInput
  customer?: Prisma.OrganizationOrderByWithRelationInput
  assets?: Prisma.AssetOrderByRelationAggregateInput
}

export type HoldWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  hold_number?: string
  AND?: Prisma.HoldWhereInput | Prisma.HoldWhereInput[]
  OR?: Prisma.HoldWhereInput[]
  NOT?: Prisma.HoldWhereInput | Prisma.HoldWhereInput[]
  created_by_id?: Prisma.IntFilter<"Hold"> | number
  created_for_id?: Prisma.IntFilter<"Hold"> | number
  customer_id?: Prisma.IntFilter<"Hold"> | number
  notes?: Prisma.StringNullableFilter<"Hold"> | string | null
  created_at?: Prisma.DateTimeFilter<"Hold"> | Date | string
  created_by?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  created_for?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  customer?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  assets?: Prisma.AssetListRelationFilter
}, "id" | "hold_number">

export type HoldOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  hold_number?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.HoldCountOrderByAggregateInput
  _avg?: Prisma.HoldAvgOrderByAggregateInput
  _max?: Prisma.HoldMaxOrderByAggregateInput
  _min?: Prisma.HoldMinOrderByAggregateInput
  _sum?: Prisma.HoldSumOrderByAggregateInput
}

export type HoldScalarWhereWithAggregatesInput = {
  AND?: Prisma.HoldScalarWhereWithAggregatesInput | Prisma.HoldScalarWhereWithAggregatesInput[]
  OR?: Prisma.HoldScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HoldScalarWhereWithAggregatesInput | Prisma.HoldScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Hold"> | number
  hold_number?: Prisma.StringWithAggregatesFilter<"Hold"> | string
  created_by_id?: Prisma.IntWithAggregatesFilter<"Hold"> | number
  created_for_id?: Prisma.IntWithAggregatesFilter<"Hold"> | number
  customer_id?: Prisma.IntWithAggregatesFilter<"Hold"> | number
  notes?: Prisma.StringNullableWithAggregatesFilter<"Hold"> | string | null
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Hold"> | Date | string
}

export type HoldCreateInput = {
  hold_number: string
  notes?: string | null
  created_at: Date | string
  created_by: Prisma.UserCreateNestedOneWithoutHolds_createdInput
  created_for: Prisma.UserCreateNestedOneWithoutHolds_forInput
  customer: Prisma.OrganizationCreateNestedOneWithoutHoldsInput
  assets?: Prisma.AssetCreateNestedManyWithoutHoldInput
}

export type HoldUncheckedCreateInput = {
  id?: number
  hold_number: string
  created_by_id: number
  created_for_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutHoldInput
}

export type HoldUpdateInput = {
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_by?: Prisma.UserUpdateOneRequiredWithoutHolds_createdNestedInput
  created_for?: Prisma.UserUpdateOneRequiredWithoutHolds_forNestedInput
  customer?: Prisma.OrganizationUpdateOneRequiredWithoutHoldsNestedInput
  assets?: Prisma.AssetUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutHoldNestedInput
}

export type HoldCreateManyInput = {
  id?: number
  hold_number: string
  created_by_id: number
  created_for_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
}

export type HoldUpdateManyMutationInput = {
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HoldUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HoldNullableScalarRelationFilter = {
  is?: Prisma.HoldWhereInput | null
  isNot?: Prisma.HoldWhereInput | null
}

export type HoldCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hold_number?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type HoldAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
}

export type HoldMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hold_number?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type HoldMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  hold_number?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type HoldSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  created_for_id?: Prisma.SortOrder
  customer_id?: Prisma.SortOrder
}

export type HoldListRelationFilter = {
  every?: Prisma.HoldWhereInput
  some?: Prisma.HoldWhereInput
  none?: Prisma.HoldWhereInput
}

export type HoldOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type HoldCreateNestedOneWithoutAssetsInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutAssetsInput, Prisma.HoldUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutAssetsInput
  connect?: Prisma.HoldWhereUniqueInput
}

export type HoldUpdateOneWithoutAssetsNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutAssetsInput, Prisma.HoldUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutAssetsInput
  upsert?: Prisma.HoldUpsertWithoutAssetsInput
  disconnect?: Prisma.HoldWhereInput | boolean
  delete?: Prisma.HoldWhereInput | boolean
  connect?: Prisma.HoldWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.HoldUpdateToOneWithWhereWithoutAssetsInput, Prisma.HoldUpdateWithoutAssetsInput>, Prisma.HoldUncheckedUpdateWithoutAssetsInput>
}

export type HoldCreateNestedManyWithoutCreated_byInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_byInput, Prisma.HoldUncheckedCreateWithoutCreated_byInput> | Prisma.HoldCreateWithoutCreated_byInput[] | Prisma.HoldUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_byInput | Prisma.HoldCreateOrConnectWithoutCreated_byInput[]
  createMany?: Prisma.HoldCreateManyCreated_byInputEnvelope
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
}

export type HoldCreateNestedManyWithoutCreated_forInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_forInput, Prisma.HoldUncheckedCreateWithoutCreated_forInput> | Prisma.HoldCreateWithoutCreated_forInput[] | Prisma.HoldUncheckedCreateWithoutCreated_forInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_forInput | Prisma.HoldCreateOrConnectWithoutCreated_forInput[]
  createMany?: Prisma.HoldCreateManyCreated_forInputEnvelope
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
}

export type HoldUncheckedCreateNestedManyWithoutCreated_byInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_byInput, Prisma.HoldUncheckedCreateWithoutCreated_byInput> | Prisma.HoldCreateWithoutCreated_byInput[] | Prisma.HoldUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_byInput | Prisma.HoldCreateOrConnectWithoutCreated_byInput[]
  createMany?: Prisma.HoldCreateManyCreated_byInputEnvelope
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
}

export type HoldUncheckedCreateNestedManyWithoutCreated_forInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_forInput, Prisma.HoldUncheckedCreateWithoutCreated_forInput> | Prisma.HoldCreateWithoutCreated_forInput[] | Prisma.HoldUncheckedCreateWithoutCreated_forInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_forInput | Prisma.HoldCreateOrConnectWithoutCreated_forInput[]
  createMany?: Prisma.HoldCreateManyCreated_forInputEnvelope
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
}

export type HoldUpdateManyWithoutCreated_byNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_byInput, Prisma.HoldUncheckedCreateWithoutCreated_byInput> | Prisma.HoldCreateWithoutCreated_byInput[] | Prisma.HoldUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_byInput | Prisma.HoldCreateOrConnectWithoutCreated_byInput[]
  upsert?: Prisma.HoldUpsertWithWhereUniqueWithoutCreated_byInput | Prisma.HoldUpsertWithWhereUniqueWithoutCreated_byInput[]
  createMany?: Prisma.HoldCreateManyCreated_byInputEnvelope
  set?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  disconnect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  delete?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  update?: Prisma.HoldUpdateWithWhereUniqueWithoutCreated_byInput | Prisma.HoldUpdateWithWhereUniqueWithoutCreated_byInput[]
  updateMany?: Prisma.HoldUpdateManyWithWhereWithoutCreated_byInput | Prisma.HoldUpdateManyWithWhereWithoutCreated_byInput[]
  deleteMany?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
}

export type HoldUpdateManyWithoutCreated_forNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_forInput, Prisma.HoldUncheckedCreateWithoutCreated_forInput> | Prisma.HoldCreateWithoutCreated_forInput[] | Prisma.HoldUncheckedCreateWithoutCreated_forInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_forInput | Prisma.HoldCreateOrConnectWithoutCreated_forInput[]
  upsert?: Prisma.HoldUpsertWithWhereUniqueWithoutCreated_forInput | Prisma.HoldUpsertWithWhereUniqueWithoutCreated_forInput[]
  createMany?: Prisma.HoldCreateManyCreated_forInputEnvelope
  set?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  disconnect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  delete?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  update?: Prisma.HoldUpdateWithWhereUniqueWithoutCreated_forInput | Prisma.HoldUpdateWithWhereUniqueWithoutCreated_forInput[]
  updateMany?: Prisma.HoldUpdateManyWithWhereWithoutCreated_forInput | Prisma.HoldUpdateManyWithWhereWithoutCreated_forInput[]
  deleteMany?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
}

export type HoldUncheckedUpdateManyWithoutCreated_byNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_byInput, Prisma.HoldUncheckedCreateWithoutCreated_byInput> | Prisma.HoldCreateWithoutCreated_byInput[] | Prisma.HoldUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_byInput | Prisma.HoldCreateOrConnectWithoutCreated_byInput[]
  upsert?: Prisma.HoldUpsertWithWhereUniqueWithoutCreated_byInput | Prisma.HoldUpsertWithWhereUniqueWithoutCreated_byInput[]
  createMany?: Prisma.HoldCreateManyCreated_byInputEnvelope
  set?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  disconnect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  delete?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  update?: Prisma.HoldUpdateWithWhereUniqueWithoutCreated_byInput | Prisma.HoldUpdateWithWhereUniqueWithoutCreated_byInput[]
  updateMany?: Prisma.HoldUpdateManyWithWhereWithoutCreated_byInput | Prisma.HoldUpdateManyWithWhereWithoutCreated_byInput[]
  deleteMany?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
}

export type HoldUncheckedUpdateManyWithoutCreated_forNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCreated_forInput, Prisma.HoldUncheckedCreateWithoutCreated_forInput> | Prisma.HoldCreateWithoutCreated_forInput[] | Prisma.HoldUncheckedCreateWithoutCreated_forInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCreated_forInput | Prisma.HoldCreateOrConnectWithoutCreated_forInput[]
  upsert?: Prisma.HoldUpsertWithWhereUniqueWithoutCreated_forInput | Prisma.HoldUpsertWithWhereUniqueWithoutCreated_forInput[]
  createMany?: Prisma.HoldCreateManyCreated_forInputEnvelope
  set?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  disconnect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  delete?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  update?: Prisma.HoldUpdateWithWhereUniqueWithoutCreated_forInput | Prisma.HoldUpdateWithWhereUniqueWithoutCreated_forInput[]
  updateMany?: Prisma.HoldUpdateManyWithWhereWithoutCreated_forInput | Prisma.HoldUpdateManyWithWhereWithoutCreated_forInput[]
  deleteMany?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
}

export type HoldCreateNestedManyWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCustomerInput, Prisma.HoldUncheckedCreateWithoutCustomerInput> | Prisma.HoldCreateWithoutCustomerInput[] | Prisma.HoldUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCustomerInput | Prisma.HoldCreateOrConnectWithoutCustomerInput[]
  createMany?: Prisma.HoldCreateManyCustomerInputEnvelope
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
}

export type HoldUncheckedCreateNestedManyWithoutCustomerInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCustomerInput, Prisma.HoldUncheckedCreateWithoutCustomerInput> | Prisma.HoldCreateWithoutCustomerInput[] | Prisma.HoldUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCustomerInput | Prisma.HoldCreateOrConnectWithoutCustomerInput[]
  createMany?: Prisma.HoldCreateManyCustomerInputEnvelope
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
}

export type HoldUpdateManyWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCustomerInput, Prisma.HoldUncheckedCreateWithoutCustomerInput> | Prisma.HoldCreateWithoutCustomerInput[] | Prisma.HoldUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCustomerInput | Prisma.HoldCreateOrConnectWithoutCustomerInput[]
  upsert?: Prisma.HoldUpsertWithWhereUniqueWithoutCustomerInput | Prisma.HoldUpsertWithWhereUniqueWithoutCustomerInput[]
  createMany?: Prisma.HoldCreateManyCustomerInputEnvelope
  set?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  disconnect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  delete?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  update?: Prisma.HoldUpdateWithWhereUniqueWithoutCustomerInput | Prisma.HoldUpdateWithWhereUniqueWithoutCustomerInput[]
  updateMany?: Prisma.HoldUpdateManyWithWhereWithoutCustomerInput | Prisma.HoldUpdateManyWithWhereWithoutCustomerInput[]
  deleteMany?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
}

export type HoldUncheckedUpdateManyWithoutCustomerNestedInput = {
  create?: Prisma.XOR<Prisma.HoldCreateWithoutCustomerInput, Prisma.HoldUncheckedCreateWithoutCustomerInput> | Prisma.HoldCreateWithoutCustomerInput[] | Prisma.HoldUncheckedCreateWithoutCustomerInput[]
  connectOrCreate?: Prisma.HoldCreateOrConnectWithoutCustomerInput | Prisma.HoldCreateOrConnectWithoutCustomerInput[]
  upsert?: Prisma.HoldUpsertWithWhereUniqueWithoutCustomerInput | Prisma.HoldUpsertWithWhereUniqueWithoutCustomerInput[]
  createMany?: Prisma.HoldCreateManyCustomerInputEnvelope
  set?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  disconnect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  delete?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  connect?: Prisma.HoldWhereUniqueInput | Prisma.HoldWhereUniqueInput[]
  update?: Prisma.HoldUpdateWithWhereUniqueWithoutCustomerInput | Prisma.HoldUpdateWithWhereUniqueWithoutCustomerInput[]
  updateMany?: Prisma.HoldUpdateManyWithWhereWithoutCustomerInput | Prisma.HoldUpdateManyWithWhereWithoutCustomerInput[]
  deleteMany?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
}

export type HoldCreateWithoutAssetsInput = {
  hold_number: string
  notes?: string | null
  created_at: Date | string
  created_by: Prisma.UserCreateNestedOneWithoutHolds_createdInput
  created_for: Prisma.UserCreateNestedOneWithoutHolds_forInput
  customer: Prisma.OrganizationCreateNestedOneWithoutHoldsInput
}

export type HoldUncheckedCreateWithoutAssetsInput = {
  id?: number
  hold_number: string
  created_by_id: number
  created_for_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
}

export type HoldCreateOrConnectWithoutAssetsInput = {
  where: Prisma.HoldWhereUniqueInput
  create: Prisma.XOR<Prisma.HoldCreateWithoutAssetsInput, Prisma.HoldUncheckedCreateWithoutAssetsInput>
}

export type HoldUpsertWithoutAssetsInput = {
  update: Prisma.XOR<Prisma.HoldUpdateWithoutAssetsInput, Prisma.HoldUncheckedUpdateWithoutAssetsInput>
  create: Prisma.XOR<Prisma.HoldCreateWithoutAssetsInput, Prisma.HoldUncheckedCreateWithoutAssetsInput>
  where?: Prisma.HoldWhereInput
}

export type HoldUpdateToOneWithWhereWithoutAssetsInput = {
  where?: Prisma.HoldWhereInput
  data: Prisma.XOR<Prisma.HoldUpdateWithoutAssetsInput, Prisma.HoldUncheckedUpdateWithoutAssetsInput>
}

export type HoldUpdateWithoutAssetsInput = {
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_by?: Prisma.UserUpdateOneRequiredWithoutHolds_createdNestedInput
  created_for?: Prisma.UserUpdateOneRequiredWithoutHolds_forNestedInput
  customer?: Prisma.OrganizationUpdateOneRequiredWithoutHoldsNestedInput
}

export type HoldUncheckedUpdateWithoutAssetsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HoldCreateWithoutCreated_byInput = {
  hold_number: string
  notes?: string | null
  created_at: Date | string
  created_for: Prisma.UserCreateNestedOneWithoutHolds_forInput
  customer: Prisma.OrganizationCreateNestedOneWithoutHoldsInput
  assets?: Prisma.AssetCreateNestedManyWithoutHoldInput
}

export type HoldUncheckedCreateWithoutCreated_byInput = {
  id?: number
  hold_number: string
  created_for_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutHoldInput
}

export type HoldCreateOrConnectWithoutCreated_byInput = {
  where: Prisma.HoldWhereUniqueInput
  create: Prisma.XOR<Prisma.HoldCreateWithoutCreated_byInput, Prisma.HoldUncheckedCreateWithoutCreated_byInput>
}

export type HoldCreateManyCreated_byInputEnvelope = {
  data: Prisma.HoldCreateManyCreated_byInput | Prisma.HoldCreateManyCreated_byInput[]
  skipDuplicates?: boolean
}

export type HoldCreateWithoutCreated_forInput = {
  hold_number: string
  notes?: string | null
  created_at: Date | string
  created_by: Prisma.UserCreateNestedOneWithoutHolds_createdInput
  customer: Prisma.OrganizationCreateNestedOneWithoutHoldsInput
  assets?: Prisma.AssetCreateNestedManyWithoutHoldInput
}

export type HoldUncheckedCreateWithoutCreated_forInput = {
  id?: number
  hold_number: string
  created_by_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutHoldInput
}

export type HoldCreateOrConnectWithoutCreated_forInput = {
  where: Prisma.HoldWhereUniqueInput
  create: Prisma.XOR<Prisma.HoldCreateWithoutCreated_forInput, Prisma.HoldUncheckedCreateWithoutCreated_forInput>
}

export type HoldCreateManyCreated_forInputEnvelope = {
  data: Prisma.HoldCreateManyCreated_forInput | Prisma.HoldCreateManyCreated_forInput[]
  skipDuplicates?: boolean
}

export type HoldUpsertWithWhereUniqueWithoutCreated_byInput = {
  where: Prisma.HoldWhereUniqueInput
  update: Prisma.XOR<Prisma.HoldUpdateWithoutCreated_byInput, Prisma.HoldUncheckedUpdateWithoutCreated_byInput>
  create: Prisma.XOR<Prisma.HoldCreateWithoutCreated_byInput, Prisma.HoldUncheckedCreateWithoutCreated_byInput>
}

export type HoldUpdateWithWhereUniqueWithoutCreated_byInput = {
  where: Prisma.HoldWhereUniqueInput
  data: Prisma.XOR<Prisma.HoldUpdateWithoutCreated_byInput, Prisma.HoldUncheckedUpdateWithoutCreated_byInput>
}

export type HoldUpdateManyWithWhereWithoutCreated_byInput = {
  where: Prisma.HoldScalarWhereInput
  data: Prisma.XOR<Prisma.HoldUpdateManyMutationInput, Prisma.HoldUncheckedUpdateManyWithoutCreated_byInput>
}

export type HoldScalarWhereInput = {
  AND?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
  OR?: Prisma.HoldScalarWhereInput[]
  NOT?: Prisma.HoldScalarWhereInput | Prisma.HoldScalarWhereInput[]
  id?: Prisma.IntFilter<"Hold"> | number
  hold_number?: Prisma.StringFilter<"Hold"> | string
  created_by_id?: Prisma.IntFilter<"Hold"> | number
  created_for_id?: Prisma.IntFilter<"Hold"> | number
  customer_id?: Prisma.IntFilter<"Hold"> | number
  notes?: Prisma.StringNullableFilter<"Hold"> | string | null
  created_at?: Prisma.DateTimeFilter<"Hold"> | Date | string
}

export type HoldUpsertWithWhereUniqueWithoutCreated_forInput = {
  where: Prisma.HoldWhereUniqueInput
  update: Prisma.XOR<Prisma.HoldUpdateWithoutCreated_forInput, Prisma.HoldUncheckedUpdateWithoutCreated_forInput>
  create: Prisma.XOR<Prisma.HoldCreateWithoutCreated_forInput, Prisma.HoldUncheckedCreateWithoutCreated_forInput>
}

export type HoldUpdateWithWhereUniqueWithoutCreated_forInput = {
  where: Prisma.HoldWhereUniqueInput
  data: Prisma.XOR<Prisma.HoldUpdateWithoutCreated_forInput, Prisma.HoldUncheckedUpdateWithoutCreated_forInput>
}

export type HoldUpdateManyWithWhereWithoutCreated_forInput = {
  where: Prisma.HoldScalarWhereInput
  data: Prisma.XOR<Prisma.HoldUpdateManyMutationInput, Prisma.HoldUncheckedUpdateManyWithoutCreated_forInput>
}

export type HoldCreateWithoutCustomerInput = {
  hold_number: string
  notes?: string | null
  created_at: Date | string
  created_by: Prisma.UserCreateNestedOneWithoutHolds_createdInput
  created_for: Prisma.UserCreateNestedOneWithoutHolds_forInput
  assets?: Prisma.AssetCreateNestedManyWithoutHoldInput
}

export type HoldUncheckedCreateWithoutCustomerInput = {
  id?: number
  hold_number: string
  created_by_id: number
  created_for_id: number
  notes?: string | null
  created_at: Date | string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutHoldInput
}

export type HoldCreateOrConnectWithoutCustomerInput = {
  where: Prisma.HoldWhereUniqueInput
  create: Prisma.XOR<Prisma.HoldCreateWithoutCustomerInput, Prisma.HoldUncheckedCreateWithoutCustomerInput>
}

export type HoldCreateManyCustomerInputEnvelope = {
  data: Prisma.HoldCreateManyCustomerInput | Prisma.HoldCreateManyCustomerInput[]
  skipDuplicates?: boolean
}

export type HoldUpsertWithWhereUniqueWithoutCustomerInput = {
  where: Prisma.HoldWhereUniqueInput
  update: Prisma.XOR<Prisma.HoldUpdateWithoutCustomerInput, Prisma.HoldUncheckedUpdateWithoutCustomerInput>
  create: Prisma.XOR<Prisma.HoldCreateWithoutCustomerInput, Prisma.HoldUncheckedCreateWithoutCustomerInput>
}

export type HoldUpdateWithWhereUniqueWithoutCustomerInput = {
  where: Prisma.HoldWhereUniqueInput
  data: Prisma.XOR<Prisma.HoldUpdateWithoutCustomerInput, Prisma.HoldUncheckedUpdateWithoutCustomerInput>
}

export type HoldUpdateManyWithWhereWithoutCustomerInput = {
  where: Prisma.HoldScalarWhereInput
  data: Prisma.XOR<Prisma.HoldUpdateManyMutationInput, Prisma.HoldUncheckedUpdateManyWithoutCustomerInput>
}

export type HoldCreateManyCreated_byInput = {
  id?: number
  hold_number: string
  created_for_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
}

export type HoldCreateManyCreated_forInput = {
  id?: number
  hold_number: string
  created_by_id: number
  customer_id: number
  notes?: string | null
  created_at: Date | string
}

export type HoldUpdateWithoutCreated_byInput = {
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_for?: Prisma.UserUpdateOneRequiredWithoutHolds_forNestedInput
  customer?: Prisma.OrganizationUpdateOneRequiredWithoutHoldsNestedInput
  assets?: Prisma.AssetUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateWithoutCreated_byInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateManyWithoutCreated_byInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HoldUpdateWithoutCreated_forInput = {
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_by?: Prisma.UserUpdateOneRequiredWithoutHolds_createdNestedInput
  customer?: Prisma.OrganizationUpdateOneRequiredWithoutHoldsNestedInput
  assets?: Prisma.AssetUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateWithoutCreated_forInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateManyWithoutCreated_forInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  customer_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HoldCreateManyCustomerInput = {
  id?: number
  hold_number: string
  created_by_id: number
  created_for_id: number
  notes?: string | null
  created_at: Date | string
}

export type HoldUpdateWithoutCustomerInput = {
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_by?: Prisma.UserUpdateOneRequiredWithoutHolds_createdNestedInput
  created_for?: Prisma.UserUpdateOneRequiredWithoutHolds_forNestedInput
  assets?: Prisma.AssetUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateWithoutCustomerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutHoldNestedInput
}

export type HoldUncheckedUpdateManyWithoutCustomerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  hold_number?: Prisma.StringFieldUpdateOperationsInput | string
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_for_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type HoldCountOutputType
 */

export type HoldCountOutputType = {
  assets: number
}

export type HoldCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  assets?: boolean | HoldCountOutputTypeCountAssetsArgs
}

/**
 * HoldCountOutputType without action
 */
export type HoldCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HoldCountOutputType
   */
  select?: Prisma.HoldCountOutputTypeSelect<ExtArgs> | null
}

/**
 * HoldCountOutputType without action
 */
export type HoldCountOutputTypeCountAssetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetWhereInput
}


export type HoldSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  hold_number?: boolean
  created_by_id?: boolean
  created_for_id?: boolean
  customer_id?: boolean
  notes?: boolean
  created_at?: boolean
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  created_for?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  assets?: boolean | Prisma.Hold$assetsArgs<ExtArgs>
  _count?: boolean | Prisma.HoldCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hold"]>

export type HoldSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  hold_number?: boolean
  created_by_id?: boolean
  created_for_id?: boolean
  customer_id?: boolean
  notes?: boolean
  created_at?: boolean
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  created_for?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hold"]>

export type HoldSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  hold_number?: boolean
  created_by_id?: boolean
  created_for_id?: boolean
  customer_id?: boolean
  notes?: boolean
  created_at?: boolean
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  created_for?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hold"]>

export type HoldSelectScalar = {
  id?: boolean
  hold_number?: boolean
  created_by_id?: boolean
  created_for_id?: boolean
  customer_id?: boolean
  notes?: boolean
  created_at?: boolean
}

export type HoldOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "hold_number" | "created_by_id" | "created_for_id" | "customer_id" | "notes" | "created_at", ExtArgs["result"]["hold"]>
export type HoldInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  created_for?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  assets?: boolean | Prisma.Hold$assetsArgs<ExtArgs>
  _count?: boolean | Prisma.HoldCountOutputTypeDefaultArgs<ExtArgs>
}
export type HoldIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  created_for?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type HoldIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  created_for?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  customer?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $HoldPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Hold"
  objects: {
    created_by: Prisma.$UserPayload<ExtArgs>
    created_for: Prisma.$UserPayload<ExtArgs>
    customer: Prisma.$OrganizationPayload<ExtArgs>
    assets: Prisma.$AssetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    hold_number: string
    created_by_id: number
    created_for_id: number
    customer_id: number
    notes: string | null
    created_at: Date
  }, ExtArgs["result"]["hold"]>
  composites: {}
}

export type HoldGetPayload<S extends boolean | null | undefined | HoldDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HoldPayload, S>

export type HoldCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HoldFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HoldCountAggregateInputType | true
  }

export interface HoldDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hold'], meta: { name: 'Hold' } }
  /**
   * Find zero or one Hold that matches the filter.
   * @param {HoldFindUniqueArgs} args - Arguments to find a Hold
   * @example
   * // Get one Hold
   * const hold = await prisma.hold.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HoldFindUniqueArgs>(args: Prisma.SelectSubset<T, HoldFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Hold that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HoldFindUniqueOrThrowArgs} args - Arguments to find a Hold
   * @example
   * // Get one Hold
   * const hold = await prisma.hold.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HoldFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HoldFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Hold that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldFindFirstArgs} args - Arguments to find a Hold
   * @example
   * // Get one Hold
   * const hold = await prisma.hold.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HoldFindFirstArgs>(args?: Prisma.SelectSubset<T, HoldFindFirstArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Hold that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldFindFirstOrThrowArgs} args - Arguments to find a Hold
   * @example
   * // Get one Hold
   * const hold = await prisma.hold.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HoldFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HoldFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Holds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Holds
   * const holds = await prisma.hold.findMany()
   * 
   * // Get first 10 Holds
   * const holds = await prisma.hold.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const holdWithIdOnly = await prisma.hold.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HoldFindManyArgs>(args?: Prisma.SelectSubset<T, HoldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Hold.
   * @param {HoldCreateArgs} args - Arguments to create a Hold.
   * @example
   * // Create one Hold
   * const Hold = await prisma.hold.create({
   *   data: {
   *     // ... data to create a Hold
   *   }
   * })
   * 
   */
  create<T extends HoldCreateArgs>(args: Prisma.SelectSubset<T, HoldCreateArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Holds.
   * @param {HoldCreateManyArgs} args - Arguments to create many Holds.
   * @example
   * // Create many Holds
   * const hold = await prisma.hold.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HoldCreateManyArgs>(args?: Prisma.SelectSubset<T, HoldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Holds and returns the data saved in the database.
   * @param {HoldCreateManyAndReturnArgs} args - Arguments to create many Holds.
   * @example
   * // Create many Holds
   * const hold = await prisma.hold.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Holds and only return the `id`
   * const holdWithIdOnly = await prisma.hold.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HoldCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HoldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Hold.
   * @param {HoldDeleteArgs} args - Arguments to delete one Hold.
   * @example
   * // Delete one Hold
   * const Hold = await prisma.hold.delete({
   *   where: {
   *     // ... filter to delete one Hold
   *   }
   * })
   * 
   */
  delete<T extends HoldDeleteArgs>(args: Prisma.SelectSubset<T, HoldDeleteArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Hold.
   * @param {HoldUpdateArgs} args - Arguments to update one Hold.
   * @example
   * // Update one Hold
   * const hold = await prisma.hold.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HoldUpdateArgs>(args: Prisma.SelectSubset<T, HoldUpdateArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Holds.
   * @param {HoldDeleteManyArgs} args - Arguments to filter Holds to delete.
   * @example
   * // Delete a few Holds
   * const { count } = await prisma.hold.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HoldDeleteManyArgs>(args?: Prisma.SelectSubset<T, HoldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Holds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Holds
   * const hold = await prisma.hold.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HoldUpdateManyArgs>(args: Prisma.SelectSubset<T, HoldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Holds and returns the data updated in the database.
   * @param {HoldUpdateManyAndReturnArgs} args - Arguments to update many Holds.
   * @example
   * // Update many Holds
   * const hold = await prisma.hold.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Holds and only return the `id`
   * const holdWithIdOnly = await prisma.hold.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HoldUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HoldUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Hold.
   * @param {HoldUpsertArgs} args - Arguments to update or create a Hold.
   * @example
   * // Update or create a Hold
   * const hold = await prisma.hold.upsert({
   *   create: {
   *     // ... data to create a Hold
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Hold we want to update
   *   }
   * })
   */
  upsert<T extends HoldUpsertArgs>(args: Prisma.SelectSubset<T, HoldUpsertArgs<ExtArgs>>): Prisma.Prisma__HoldClient<runtime.Types.Result.GetResult<Prisma.$HoldPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Holds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldCountArgs} args - Arguments to filter Holds to count.
   * @example
   * // Count the number of Holds
   * const count = await prisma.hold.count({
   *   where: {
   *     // ... the filter for the Holds we want to count
   *   }
   * })
  **/
  count<T extends HoldCountArgs>(
    args?: Prisma.Subset<T, HoldCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HoldCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Hold.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HoldAggregateArgs>(args: Prisma.Subset<T, HoldAggregateArgs>): Prisma.PrismaPromise<GetHoldAggregateType<T>>

  /**
   * Group by Hold.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HoldGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HoldGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HoldGroupByArgs['orderBy'] }
      : { orderBy?: HoldGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HoldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHoldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Hold model
 */
readonly fields: HoldFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Hold.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HoldClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  created_by<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  created_for<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  customer<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  assets<T extends Prisma.Hold$assetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Hold$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Hold model
 */
export interface HoldFieldRefs {
  readonly id: Prisma.FieldRef<"Hold", 'Int'>
  readonly hold_number: Prisma.FieldRef<"Hold", 'String'>
  readonly created_by_id: Prisma.FieldRef<"Hold", 'Int'>
  readonly created_for_id: Prisma.FieldRef<"Hold", 'Int'>
  readonly customer_id: Prisma.FieldRef<"Hold", 'Int'>
  readonly notes: Prisma.FieldRef<"Hold", 'String'>
  readonly created_at: Prisma.FieldRef<"Hold", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Hold findUnique
 */
export type HoldFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * Filter, which Hold to fetch.
   */
  where: Prisma.HoldWhereUniqueInput
}

/**
 * Hold findUniqueOrThrow
 */
export type HoldFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * Filter, which Hold to fetch.
   */
  where: Prisma.HoldWhereUniqueInput
}

/**
 * Hold findFirst
 */
export type HoldFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * Filter, which Hold to fetch.
   */
  where?: Prisma.HoldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Holds to fetch.
   */
  orderBy?: Prisma.HoldOrderByWithRelationInput | Prisma.HoldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Holds.
   */
  cursor?: Prisma.HoldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Holds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Holds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Holds.
   */
  distinct?: Prisma.HoldScalarFieldEnum | Prisma.HoldScalarFieldEnum[]
}

/**
 * Hold findFirstOrThrow
 */
export type HoldFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * Filter, which Hold to fetch.
   */
  where?: Prisma.HoldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Holds to fetch.
   */
  orderBy?: Prisma.HoldOrderByWithRelationInput | Prisma.HoldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Holds.
   */
  cursor?: Prisma.HoldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Holds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Holds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Holds.
   */
  distinct?: Prisma.HoldScalarFieldEnum | Prisma.HoldScalarFieldEnum[]
}

/**
 * Hold findMany
 */
export type HoldFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * Filter, which Holds to fetch.
   */
  where?: Prisma.HoldWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Holds to fetch.
   */
  orderBy?: Prisma.HoldOrderByWithRelationInput | Prisma.HoldOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Holds.
   */
  cursor?: Prisma.HoldWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Holds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Holds.
   */
  skip?: number
  distinct?: Prisma.HoldScalarFieldEnum | Prisma.HoldScalarFieldEnum[]
}

/**
 * Hold create
 */
export type HoldCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * The data needed to create a Hold.
   */
  data: Prisma.XOR<Prisma.HoldCreateInput, Prisma.HoldUncheckedCreateInput>
}

/**
 * Hold createMany
 */
export type HoldCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Holds.
   */
  data: Prisma.HoldCreateManyInput | Prisma.HoldCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Hold createManyAndReturn
 */
export type HoldCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * The data used to create many Holds.
   */
  data: Prisma.HoldCreateManyInput | Prisma.HoldCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Hold update
 */
export type HoldUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * The data needed to update a Hold.
   */
  data: Prisma.XOR<Prisma.HoldUpdateInput, Prisma.HoldUncheckedUpdateInput>
  /**
   * Choose, which Hold to update.
   */
  where: Prisma.HoldWhereUniqueInput
}

/**
 * Hold updateMany
 */
export type HoldUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Holds.
   */
  data: Prisma.XOR<Prisma.HoldUpdateManyMutationInput, Prisma.HoldUncheckedUpdateManyInput>
  /**
   * Filter which Holds to update
   */
  where?: Prisma.HoldWhereInput
  /**
   * Limit how many Holds to update.
   */
  limit?: number
}

/**
 * Hold updateManyAndReturn
 */
export type HoldUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * The data used to update Holds.
   */
  data: Prisma.XOR<Prisma.HoldUpdateManyMutationInput, Prisma.HoldUncheckedUpdateManyInput>
  /**
   * Filter which Holds to update
   */
  where?: Prisma.HoldWhereInput
  /**
   * Limit how many Holds to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Hold upsert
 */
export type HoldUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * The filter to search for the Hold to update in case it exists.
   */
  where: Prisma.HoldWhereUniqueInput
  /**
   * In case the Hold found by the `where` argument doesn't exist, create a new Hold with this data.
   */
  create: Prisma.XOR<Prisma.HoldCreateInput, Prisma.HoldUncheckedCreateInput>
  /**
   * In case the Hold was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HoldUpdateInput, Prisma.HoldUncheckedUpdateInput>
}

/**
 * Hold delete
 */
export type HoldDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
  /**
   * Filter which Hold to delete.
   */
  where: Prisma.HoldWhereUniqueInput
}

/**
 * Hold deleteMany
 */
export type HoldDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Holds to delete
   */
  where?: Prisma.HoldWhereInput
  /**
   * Limit how many Holds to delete.
   */
  limit?: number
}

/**
 * Hold.assets
 */
export type Hold$assetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Asset
   */
  select?: Prisma.AssetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Asset
   */
  omit?: Prisma.AssetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetInclude<ExtArgs> | null
  where?: Prisma.AssetWhereInput
  orderBy?: Prisma.AssetOrderByWithRelationInput | Prisma.AssetOrderByWithRelationInput[]
  cursor?: Prisma.AssetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetScalarFieldEnum | Prisma.AssetScalarFieldEnum[]
}

/**
 * Hold without action
 */
export type HoldDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Hold
   */
  select?: Prisma.HoldSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Hold
   */
  omit?: Prisma.HoldOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HoldInclude<ExtArgs> | null
}
