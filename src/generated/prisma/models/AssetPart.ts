
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AssetPart` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AssetPart
 * 
 */
export type AssetPartModel = runtime.Types.Result.DefaultSelection<Prisma.$AssetPartPayload>

export type AggregateAssetPart = {
  _count: AssetPartCountAggregateOutputType | null
  _avg: AssetPartAvgAggregateOutputType | null
  _sum: AssetPartSumAggregateOutputType | null
  _min: AssetPartMinAggregateOutputType | null
  _max: AssetPartMaxAggregateOutputType | null
}

export type AssetPartAvgAggregateOutputType = {
  asset_id: number | null
  part_id: number | null
  updated_by: number | null
}

export type AssetPartSumAggregateOutputType = {
  asset_id: number | null
  part_id: number | null
  updated_by: number | null
}

export type AssetPartMinAggregateOutputType = {
  asset_id: number | null
  part_id: number | null
  updated_at: Date | null
  updated_by: number | null
  part_operation: $Enums.PartOperation | null
}

export type AssetPartMaxAggregateOutputType = {
  asset_id: number | null
  part_id: number | null
  updated_at: Date | null
  updated_by: number | null
  part_operation: $Enums.PartOperation | null
}

export type AssetPartCountAggregateOutputType = {
  asset_id: number
  part_id: number
  updated_at: number
  updated_by: number
  part_operation: number
  _all: number
}


export type AssetPartAvgAggregateInputType = {
  asset_id?: true
  part_id?: true
  updated_by?: true
}

export type AssetPartSumAggregateInputType = {
  asset_id?: true
  part_id?: true
  updated_by?: true
}

export type AssetPartMinAggregateInputType = {
  asset_id?: true
  part_id?: true
  updated_at?: true
  updated_by?: true
  part_operation?: true
}

export type AssetPartMaxAggregateInputType = {
  asset_id?: true
  part_id?: true
  updated_at?: true
  updated_by?: true
  part_operation?: true
}

export type AssetPartCountAggregateInputType = {
  asset_id?: true
  part_id?: true
  updated_at?: true
  updated_by?: true
  part_operation?: true
  _all?: true
}

export type AssetPartAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetPart to aggregate.
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetParts to fetch.
   */
  orderBy?: Prisma.AssetPartOrderByWithRelationInput | Prisma.AssetPartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssetPartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetParts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetParts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AssetParts
  **/
  _count?: true | AssetPartCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssetPartAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssetPartSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssetPartMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssetPartMaxAggregateInputType
}

export type GetAssetPartAggregateType<T extends AssetPartAggregateArgs> = {
      [P in keyof T & keyof AggregateAssetPart]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssetPart[P]>
    : Prisma.GetScalarType<T[P], AggregateAssetPart[P]>
}




export type AssetPartGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetPartWhereInput
  orderBy?: Prisma.AssetPartOrderByWithAggregationInput | Prisma.AssetPartOrderByWithAggregationInput[]
  by: Prisma.AssetPartScalarFieldEnum[] | Prisma.AssetPartScalarFieldEnum
  having?: Prisma.AssetPartScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssetPartCountAggregateInputType | true
  _avg?: AssetPartAvgAggregateInputType
  _sum?: AssetPartSumAggregateInputType
  _min?: AssetPartMinAggregateInputType
  _max?: AssetPartMaxAggregateInputType
}

export type AssetPartGroupByOutputType = {
  asset_id: number
  part_id: number
  updated_at: Date
  updated_by: number
  part_operation: $Enums.PartOperation
  _count: AssetPartCountAggregateOutputType | null
  _avg: AssetPartAvgAggregateOutputType | null
  _sum: AssetPartSumAggregateOutputType | null
  _min: AssetPartMinAggregateOutputType | null
  _max: AssetPartMaxAggregateOutputType | null
}

type GetAssetPartGroupByPayload<T extends AssetPartGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssetPartGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssetPartGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssetPartGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssetPartGroupByOutputType[P]>
      }
    >
  > 



export type AssetPartWhereInput = {
  AND?: Prisma.AssetPartWhereInput | Prisma.AssetPartWhereInput[]
  OR?: Prisma.AssetPartWhereInput[]
  NOT?: Prisma.AssetPartWhereInput | Prisma.AssetPartWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetPart"> | number
  part_id?: Prisma.IntFilter<"AssetPart"> | number
  updated_at?: Prisma.DateTimeFilter<"AssetPart"> | Date | string
  updated_by?: Prisma.IntFilter<"AssetPart"> | number
  part_operation?: Prisma.EnumPartOperationFilter<"AssetPart"> | $Enums.PartOperation
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  part?: Prisma.XOR<Prisma.PartScalarRelationFilter, Prisma.PartWhereInput>
  updatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AssetPartOrderByWithRelationInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
  part_operation?: Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
  part?: Prisma.PartOrderByWithRelationInput
  updatedBy?: Prisma.UserOrderByWithRelationInput
}

export type AssetPartWhereUniqueInput = Prisma.AtLeast<{
  asset_id_part_id?: Prisma.AssetPartAsset_idPart_idCompoundUniqueInput
  AND?: Prisma.AssetPartWhereInput | Prisma.AssetPartWhereInput[]
  OR?: Prisma.AssetPartWhereInput[]
  NOT?: Prisma.AssetPartWhereInput | Prisma.AssetPartWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetPart"> | number
  part_id?: Prisma.IntFilter<"AssetPart"> | number
  updated_at?: Prisma.DateTimeFilter<"AssetPart"> | Date | string
  updated_by?: Prisma.IntFilter<"AssetPart"> | number
  part_operation?: Prisma.EnumPartOperationFilter<"AssetPart"> | $Enums.PartOperation
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  part?: Prisma.XOR<Prisma.PartScalarRelationFilter, Prisma.PartWhereInput>
  updatedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "asset_id_part_id">

export type AssetPartOrderByWithAggregationInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
  part_operation?: Prisma.SortOrder
  _count?: Prisma.AssetPartCountOrderByAggregateInput
  _avg?: Prisma.AssetPartAvgOrderByAggregateInput
  _max?: Prisma.AssetPartMaxOrderByAggregateInput
  _min?: Prisma.AssetPartMinOrderByAggregateInput
  _sum?: Prisma.AssetPartSumOrderByAggregateInput
}

export type AssetPartScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssetPartScalarWhereWithAggregatesInput | Prisma.AssetPartScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssetPartScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssetPartScalarWhereWithAggregatesInput | Prisma.AssetPartScalarWhereWithAggregatesInput[]
  asset_id?: Prisma.IntWithAggregatesFilter<"AssetPart"> | number
  part_id?: Prisma.IntWithAggregatesFilter<"AssetPart"> | number
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"AssetPart"> | Date | string
  updated_by?: Prisma.IntWithAggregatesFilter<"AssetPart"> | number
  part_operation?: Prisma.EnumPartOperationWithAggregatesFilter<"AssetPart"> | $Enums.PartOperation
}

export type AssetPartCreateInput = {
  updated_at: Date | string
  part_operation: $Enums.PartOperation
  asset: Prisma.AssetCreateNestedOneWithoutAsset_partsInput
  part: Prisma.PartCreateNestedOneWithoutAsset_partsInput
  updatedBy: Prisma.UserCreateNestedOneWithoutAsset_partsInput
}

export type AssetPartUncheckedCreateInput = {
  asset_id: number
  part_id: number
  updated_at: Date | string
  updated_by: number
  part_operation: $Enums.PartOperation
}

export type AssetPartUpdateInput = {
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_partsNestedInput
  part?: Prisma.PartUpdateOneRequiredWithoutAsset_partsNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_partsNestedInput
}

export type AssetPartUncheckedUpdateInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  part_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_by?: Prisma.IntFieldUpdateOperationsInput | number
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartCreateManyInput = {
  asset_id: number
  part_id: number
  updated_at: Date | string
  updated_by: number
  part_operation: $Enums.PartOperation
}

export type AssetPartUpdateManyMutationInput = {
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartUncheckedUpdateManyInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  part_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_by?: Prisma.IntFieldUpdateOperationsInput | number
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartListRelationFilter = {
  every?: Prisma.AssetPartWhereInput
  some?: Prisma.AssetPartWhereInput
  none?: Prisma.AssetPartWhereInput
}

export type AssetPartOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AssetPartAsset_idPart_idCompoundUniqueInput = {
  asset_id: number
  part_id: number
}

export type AssetPartCountOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
  part_operation?: Prisma.SortOrder
}

export type AssetPartAvgOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
}

export type AssetPartMaxOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
  part_operation?: Prisma.SortOrder
}

export type AssetPartMinOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
  part_operation?: Prisma.SortOrder
}

export type AssetPartSumOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  part_id?: Prisma.SortOrder
  updated_by?: Prisma.SortOrder
}

export type AssetPartCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutAssetInput, Prisma.AssetPartUncheckedCreateWithoutAssetInput> | Prisma.AssetPartCreateWithoutAssetInput[] | Prisma.AssetPartUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutAssetInput | Prisma.AssetPartCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetPartCreateManyAssetInputEnvelope
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
}

export type AssetPartUncheckedCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutAssetInput, Prisma.AssetPartUncheckedCreateWithoutAssetInput> | Prisma.AssetPartCreateWithoutAssetInput[] | Prisma.AssetPartUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutAssetInput | Prisma.AssetPartCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetPartCreateManyAssetInputEnvelope
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
}

export type AssetPartUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutAssetInput, Prisma.AssetPartUncheckedCreateWithoutAssetInput> | Prisma.AssetPartCreateWithoutAssetInput[] | Prisma.AssetPartUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutAssetInput | Prisma.AssetPartCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetPartUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetPartUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetPartCreateManyAssetInputEnvelope
  set?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  disconnect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  delete?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  update?: Prisma.AssetPartUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetPartUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetPartUpdateManyWithWhereWithoutAssetInput | Prisma.AssetPartUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
}

export type AssetPartUncheckedUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutAssetInput, Prisma.AssetPartUncheckedCreateWithoutAssetInput> | Prisma.AssetPartCreateWithoutAssetInput[] | Prisma.AssetPartUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutAssetInput | Prisma.AssetPartCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetPartUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetPartUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetPartCreateManyAssetInputEnvelope
  set?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  disconnect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  delete?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  update?: Prisma.AssetPartUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetPartUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetPartUpdateManyWithWhereWithoutAssetInput | Prisma.AssetPartUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
}

export type AssetPartCreateNestedManyWithoutPartInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutPartInput, Prisma.AssetPartUncheckedCreateWithoutPartInput> | Prisma.AssetPartCreateWithoutPartInput[] | Prisma.AssetPartUncheckedCreateWithoutPartInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutPartInput | Prisma.AssetPartCreateOrConnectWithoutPartInput[]
  createMany?: Prisma.AssetPartCreateManyPartInputEnvelope
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
}

export type AssetPartUncheckedCreateNestedManyWithoutPartInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutPartInput, Prisma.AssetPartUncheckedCreateWithoutPartInput> | Prisma.AssetPartCreateWithoutPartInput[] | Prisma.AssetPartUncheckedCreateWithoutPartInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutPartInput | Prisma.AssetPartCreateOrConnectWithoutPartInput[]
  createMany?: Prisma.AssetPartCreateManyPartInputEnvelope
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
}

export type AssetPartUpdateManyWithoutPartNestedInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutPartInput, Prisma.AssetPartUncheckedCreateWithoutPartInput> | Prisma.AssetPartCreateWithoutPartInput[] | Prisma.AssetPartUncheckedCreateWithoutPartInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutPartInput | Prisma.AssetPartCreateOrConnectWithoutPartInput[]
  upsert?: Prisma.AssetPartUpsertWithWhereUniqueWithoutPartInput | Prisma.AssetPartUpsertWithWhereUniqueWithoutPartInput[]
  createMany?: Prisma.AssetPartCreateManyPartInputEnvelope
  set?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  disconnect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  delete?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  update?: Prisma.AssetPartUpdateWithWhereUniqueWithoutPartInput | Prisma.AssetPartUpdateWithWhereUniqueWithoutPartInput[]
  updateMany?: Prisma.AssetPartUpdateManyWithWhereWithoutPartInput | Prisma.AssetPartUpdateManyWithWhereWithoutPartInput[]
  deleteMany?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
}

export type AssetPartUncheckedUpdateManyWithoutPartNestedInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutPartInput, Prisma.AssetPartUncheckedCreateWithoutPartInput> | Prisma.AssetPartCreateWithoutPartInput[] | Prisma.AssetPartUncheckedCreateWithoutPartInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutPartInput | Prisma.AssetPartCreateOrConnectWithoutPartInput[]
  upsert?: Prisma.AssetPartUpsertWithWhereUniqueWithoutPartInput | Prisma.AssetPartUpsertWithWhereUniqueWithoutPartInput[]
  createMany?: Prisma.AssetPartCreateManyPartInputEnvelope
  set?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  disconnect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  delete?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  update?: Prisma.AssetPartUpdateWithWhereUniqueWithoutPartInput | Prisma.AssetPartUpdateWithWhereUniqueWithoutPartInput[]
  updateMany?: Prisma.AssetPartUpdateManyWithWhereWithoutPartInput | Prisma.AssetPartUpdateManyWithWhereWithoutPartInput[]
  deleteMany?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
}

export type EnumPartOperationFieldUpdateOperationsInput = {
  set?: $Enums.PartOperation
}

export type AssetPartCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutUpdatedByInput, Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput> | Prisma.AssetPartCreateWithoutUpdatedByInput[] | Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput | Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.AssetPartCreateManyUpdatedByInputEnvelope
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
}

export type AssetPartUncheckedCreateNestedManyWithoutUpdatedByInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutUpdatedByInput, Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput> | Prisma.AssetPartCreateWithoutUpdatedByInput[] | Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput | Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput[]
  createMany?: Prisma.AssetPartCreateManyUpdatedByInputEnvelope
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
}

export type AssetPartUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutUpdatedByInput, Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput> | Prisma.AssetPartCreateWithoutUpdatedByInput[] | Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput | Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.AssetPartUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.AssetPartUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.AssetPartCreateManyUpdatedByInputEnvelope
  set?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  disconnect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  delete?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  update?: Prisma.AssetPartUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.AssetPartUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.AssetPartUpdateManyWithWhereWithoutUpdatedByInput | Prisma.AssetPartUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
}

export type AssetPartUncheckedUpdateManyWithoutUpdatedByNestedInput = {
  create?: Prisma.XOR<Prisma.AssetPartCreateWithoutUpdatedByInput, Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput> | Prisma.AssetPartCreateWithoutUpdatedByInput[] | Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput[]
  connectOrCreate?: Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput | Prisma.AssetPartCreateOrConnectWithoutUpdatedByInput[]
  upsert?: Prisma.AssetPartUpsertWithWhereUniqueWithoutUpdatedByInput | Prisma.AssetPartUpsertWithWhereUniqueWithoutUpdatedByInput[]
  createMany?: Prisma.AssetPartCreateManyUpdatedByInputEnvelope
  set?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  disconnect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  delete?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  connect?: Prisma.AssetPartWhereUniqueInput | Prisma.AssetPartWhereUniqueInput[]
  update?: Prisma.AssetPartUpdateWithWhereUniqueWithoutUpdatedByInput | Prisma.AssetPartUpdateWithWhereUniqueWithoutUpdatedByInput[]
  updateMany?: Prisma.AssetPartUpdateManyWithWhereWithoutUpdatedByInput | Prisma.AssetPartUpdateManyWithWhereWithoutUpdatedByInput[]
  deleteMany?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
}

export type AssetPartCreateWithoutAssetInput = {
  updated_at: Date | string
  part_operation: $Enums.PartOperation
  part: Prisma.PartCreateNestedOneWithoutAsset_partsInput
  updatedBy: Prisma.UserCreateNestedOneWithoutAsset_partsInput
}

export type AssetPartUncheckedCreateWithoutAssetInput = {
  part_id: number
  updated_at: Date | string
  updated_by: number
  part_operation: $Enums.PartOperation
}

export type AssetPartCreateOrConnectWithoutAssetInput = {
  where: Prisma.AssetPartWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetPartCreateWithoutAssetInput, Prisma.AssetPartUncheckedCreateWithoutAssetInput>
}

export type AssetPartCreateManyAssetInputEnvelope = {
  data: Prisma.AssetPartCreateManyAssetInput | Prisma.AssetPartCreateManyAssetInput[]
  skipDuplicates?: boolean
}

export type AssetPartUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetPartWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetPartUpdateWithoutAssetInput, Prisma.AssetPartUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.AssetPartCreateWithoutAssetInput, Prisma.AssetPartUncheckedCreateWithoutAssetInput>
}

export type AssetPartUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetPartWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetPartUpdateWithoutAssetInput, Prisma.AssetPartUncheckedUpdateWithoutAssetInput>
}

export type AssetPartUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.AssetPartScalarWhereInput
  data: Prisma.XOR<Prisma.AssetPartUpdateManyMutationInput, Prisma.AssetPartUncheckedUpdateManyWithoutAssetInput>
}

export type AssetPartScalarWhereInput = {
  AND?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
  OR?: Prisma.AssetPartScalarWhereInput[]
  NOT?: Prisma.AssetPartScalarWhereInput | Prisma.AssetPartScalarWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetPart"> | number
  part_id?: Prisma.IntFilter<"AssetPart"> | number
  updated_at?: Prisma.DateTimeFilter<"AssetPart"> | Date | string
  updated_by?: Prisma.IntFilter<"AssetPart"> | number
  part_operation?: Prisma.EnumPartOperationFilter<"AssetPart"> | $Enums.PartOperation
}

export type AssetPartCreateWithoutPartInput = {
  updated_at: Date | string
  part_operation: $Enums.PartOperation
  asset: Prisma.AssetCreateNestedOneWithoutAsset_partsInput
  updatedBy: Prisma.UserCreateNestedOneWithoutAsset_partsInput
}

export type AssetPartUncheckedCreateWithoutPartInput = {
  asset_id: number
  updated_at: Date | string
  updated_by: number
  part_operation: $Enums.PartOperation
}

export type AssetPartCreateOrConnectWithoutPartInput = {
  where: Prisma.AssetPartWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetPartCreateWithoutPartInput, Prisma.AssetPartUncheckedCreateWithoutPartInput>
}

export type AssetPartCreateManyPartInputEnvelope = {
  data: Prisma.AssetPartCreateManyPartInput | Prisma.AssetPartCreateManyPartInput[]
  skipDuplicates?: boolean
}

export type AssetPartUpsertWithWhereUniqueWithoutPartInput = {
  where: Prisma.AssetPartWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetPartUpdateWithoutPartInput, Prisma.AssetPartUncheckedUpdateWithoutPartInput>
  create: Prisma.XOR<Prisma.AssetPartCreateWithoutPartInput, Prisma.AssetPartUncheckedCreateWithoutPartInput>
}

export type AssetPartUpdateWithWhereUniqueWithoutPartInput = {
  where: Prisma.AssetPartWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetPartUpdateWithoutPartInput, Prisma.AssetPartUncheckedUpdateWithoutPartInput>
}

export type AssetPartUpdateManyWithWhereWithoutPartInput = {
  where: Prisma.AssetPartScalarWhereInput
  data: Prisma.XOR<Prisma.AssetPartUpdateManyMutationInput, Prisma.AssetPartUncheckedUpdateManyWithoutPartInput>
}

export type AssetPartCreateWithoutUpdatedByInput = {
  updated_at: Date | string
  part_operation: $Enums.PartOperation
  asset: Prisma.AssetCreateNestedOneWithoutAsset_partsInput
  part: Prisma.PartCreateNestedOneWithoutAsset_partsInput
}

export type AssetPartUncheckedCreateWithoutUpdatedByInput = {
  asset_id: number
  part_id: number
  updated_at: Date | string
  part_operation: $Enums.PartOperation
}

export type AssetPartCreateOrConnectWithoutUpdatedByInput = {
  where: Prisma.AssetPartWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetPartCreateWithoutUpdatedByInput, Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput>
}

export type AssetPartCreateManyUpdatedByInputEnvelope = {
  data: Prisma.AssetPartCreateManyUpdatedByInput | Prisma.AssetPartCreateManyUpdatedByInput[]
  skipDuplicates?: boolean
}

export type AssetPartUpsertWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.AssetPartWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetPartUpdateWithoutUpdatedByInput, Prisma.AssetPartUncheckedUpdateWithoutUpdatedByInput>
  create: Prisma.XOR<Prisma.AssetPartCreateWithoutUpdatedByInput, Prisma.AssetPartUncheckedCreateWithoutUpdatedByInput>
}

export type AssetPartUpdateWithWhereUniqueWithoutUpdatedByInput = {
  where: Prisma.AssetPartWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetPartUpdateWithoutUpdatedByInput, Prisma.AssetPartUncheckedUpdateWithoutUpdatedByInput>
}

export type AssetPartUpdateManyWithWhereWithoutUpdatedByInput = {
  where: Prisma.AssetPartScalarWhereInput
  data: Prisma.XOR<Prisma.AssetPartUpdateManyMutationInput, Prisma.AssetPartUncheckedUpdateManyWithoutUpdatedByInput>
}

export type AssetPartCreateManyAssetInput = {
  part_id: number
  updated_at: Date | string
  updated_by: number
  part_operation: $Enums.PartOperation
}

export type AssetPartUpdateWithoutAssetInput = {
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
  part?: Prisma.PartUpdateOneRequiredWithoutAsset_partsNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_partsNestedInput
}

export type AssetPartUncheckedUpdateWithoutAssetInput = {
  part_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_by?: Prisma.IntFieldUpdateOperationsInput | number
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartUncheckedUpdateManyWithoutAssetInput = {
  part_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_by?: Prisma.IntFieldUpdateOperationsInput | number
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartCreateManyPartInput = {
  asset_id: number
  updated_at: Date | string
  updated_by: number
  part_operation: $Enums.PartOperation
}

export type AssetPartUpdateWithoutPartInput = {
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_partsNestedInput
  updatedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_partsNestedInput
}

export type AssetPartUncheckedUpdateWithoutPartInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_by?: Prisma.IntFieldUpdateOperationsInput | number
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartUncheckedUpdateManyWithoutPartInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_by?: Prisma.IntFieldUpdateOperationsInput | number
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartCreateManyUpdatedByInput = {
  asset_id: number
  part_id: number
  updated_at: Date | string
  part_operation: $Enums.PartOperation
}

export type AssetPartUpdateWithoutUpdatedByInput = {
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_partsNestedInput
  part?: Prisma.PartUpdateOneRequiredWithoutAsset_partsNestedInput
}

export type AssetPartUncheckedUpdateWithoutUpdatedByInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  part_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}

export type AssetPartUncheckedUpdateManyWithoutUpdatedByInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  part_id?: Prisma.IntFieldUpdateOperationsInput | number
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  part_operation?: Prisma.EnumPartOperationFieldUpdateOperationsInput | $Enums.PartOperation
}



export type AssetPartSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  part_id?: boolean
  updated_at?: boolean
  updated_by?: boolean
  part_operation?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  part?: boolean | Prisma.PartDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetPart"]>

export type AssetPartSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  part_id?: boolean
  updated_at?: boolean
  updated_by?: boolean
  part_operation?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  part?: boolean | Prisma.PartDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetPart"]>

export type AssetPartSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  part_id?: boolean
  updated_at?: boolean
  updated_by?: boolean
  part_operation?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  part?: boolean | Prisma.PartDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetPart"]>

export type AssetPartSelectScalar = {
  asset_id?: boolean
  part_id?: boolean
  updated_at?: boolean
  updated_by?: boolean
  part_operation?: boolean
}

export type AssetPartOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"asset_id" | "part_id" | "updated_at" | "updated_by" | "part_operation", ExtArgs["result"]["assetPart"]>
export type AssetPartInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  part?: boolean | Prisma.PartDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AssetPartIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  part?: boolean | Prisma.PartDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AssetPartIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  part?: boolean | Prisma.PartDefaultArgs<ExtArgs>
  updatedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AssetPartPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AssetPart"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
    part: Prisma.$PartPayload<ExtArgs>
    updatedBy: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    asset_id: number
    part_id: number
    updated_at: Date
    updated_by: number
    part_operation: $Enums.PartOperation
  }, ExtArgs["result"]["assetPart"]>
  composites: {}
}

export type AssetPartGetPayload<S extends boolean | null | undefined | AssetPartDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssetPartPayload, S>

export type AssetPartCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssetPartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssetPartCountAggregateInputType | true
  }

export interface AssetPartDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetPart'], meta: { name: 'AssetPart' } }
  /**
   * Find zero or one AssetPart that matches the filter.
   * @param {AssetPartFindUniqueArgs} args - Arguments to find a AssetPart
   * @example
   * // Get one AssetPart
   * const assetPart = await prisma.assetPart.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssetPartFindUniqueArgs>(args: Prisma.SelectSubset<T, AssetPartFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AssetPart that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssetPartFindUniqueOrThrowArgs} args - Arguments to find a AssetPart
   * @example
   * // Get one AssetPart
   * const assetPart = await prisma.assetPart.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssetPartFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssetPartFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetPart that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartFindFirstArgs} args - Arguments to find a AssetPart
   * @example
   * // Get one AssetPart
   * const assetPart = await prisma.assetPart.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssetPartFindFirstArgs>(args?: Prisma.SelectSubset<T, AssetPartFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetPart that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartFindFirstOrThrowArgs} args - Arguments to find a AssetPart
   * @example
   * // Get one AssetPart
   * const assetPart = await prisma.assetPart.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssetPartFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssetPartFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AssetParts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssetParts
   * const assetParts = await prisma.assetPart.findMany()
   * 
   * // Get first 10 AssetParts
   * const assetParts = await prisma.assetPart.findMany({ take: 10 })
   * 
   * // Only select the `asset_id`
   * const assetPartWithAsset_idOnly = await prisma.assetPart.findMany({ select: { asset_id: true } })
   * 
   */
  findMany<T extends AssetPartFindManyArgs>(args?: Prisma.SelectSubset<T, AssetPartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AssetPart.
   * @param {AssetPartCreateArgs} args - Arguments to create a AssetPart.
   * @example
   * // Create one AssetPart
   * const AssetPart = await prisma.assetPart.create({
   *   data: {
   *     // ... data to create a AssetPart
   *   }
   * })
   * 
   */
  create<T extends AssetPartCreateArgs>(args: Prisma.SelectSubset<T, AssetPartCreateArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AssetParts.
   * @param {AssetPartCreateManyArgs} args - Arguments to create many AssetParts.
   * @example
   * // Create many AssetParts
   * const assetPart = await prisma.assetPart.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssetPartCreateManyArgs>(args?: Prisma.SelectSubset<T, AssetPartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AssetParts and returns the data saved in the database.
   * @param {AssetPartCreateManyAndReturnArgs} args - Arguments to create many AssetParts.
   * @example
   * // Create many AssetParts
   * const assetPart = await prisma.assetPart.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AssetParts and only return the `asset_id`
   * const assetPartWithAsset_idOnly = await prisma.assetPart.createManyAndReturn({
   *   select: { asset_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssetPartCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssetPartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AssetPart.
   * @param {AssetPartDeleteArgs} args - Arguments to delete one AssetPart.
   * @example
   * // Delete one AssetPart
   * const AssetPart = await prisma.assetPart.delete({
   *   where: {
   *     // ... filter to delete one AssetPart
   *   }
   * })
   * 
   */
  delete<T extends AssetPartDeleteArgs>(args: Prisma.SelectSubset<T, AssetPartDeleteArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AssetPart.
   * @param {AssetPartUpdateArgs} args - Arguments to update one AssetPart.
   * @example
   * // Update one AssetPart
   * const assetPart = await prisma.assetPart.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssetPartUpdateArgs>(args: Prisma.SelectSubset<T, AssetPartUpdateArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AssetParts.
   * @param {AssetPartDeleteManyArgs} args - Arguments to filter AssetParts to delete.
   * @example
   * // Delete a few AssetParts
   * const { count } = await prisma.assetPart.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssetPartDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssetPartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetParts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssetParts
   * const assetPart = await prisma.assetPart.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssetPartUpdateManyArgs>(args: Prisma.SelectSubset<T, AssetPartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetParts and returns the data updated in the database.
   * @param {AssetPartUpdateManyAndReturnArgs} args - Arguments to update many AssetParts.
   * @example
   * // Update many AssetParts
   * const assetPart = await prisma.assetPart.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AssetParts and only return the `asset_id`
   * const assetPartWithAsset_idOnly = await prisma.assetPart.updateManyAndReturn({
   *   select: { asset_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssetPartUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssetPartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AssetPart.
   * @param {AssetPartUpsertArgs} args - Arguments to update or create a AssetPart.
   * @example
   * // Update or create a AssetPart
   * const assetPart = await prisma.assetPart.upsert({
   *   create: {
   *     // ... data to create a AssetPart
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssetPart we want to update
   *   }
   * })
   */
  upsert<T extends AssetPartUpsertArgs>(args: Prisma.SelectSubset<T, AssetPartUpsertArgs<ExtArgs>>): Prisma.Prisma__AssetPartClient<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AssetParts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartCountArgs} args - Arguments to filter AssetParts to count.
   * @example
   * // Count the number of AssetParts
   * const count = await prisma.assetPart.count({
   *   where: {
   *     // ... the filter for the AssetParts we want to count
   *   }
   * })
  **/
  count<T extends AssetPartCountArgs>(
    args?: Prisma.Subset<T, AssetPartCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssetPartCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AssetPart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssetPartAggregateArgs>(args: Prisma.Subset<T, AssetPartAggregateArgs>): Prisma.PrismaPromise<GetAssetPartAggregateType<T>>

  /**
   * Group by AssetPart.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetPartGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssetPartGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssetPartGroupByArgs['orderBy'] }
      : { orderBy?: AssetPartGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssetPartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AssetPart model
 */
readonly fields: AssetPartFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssetPart.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssetPartClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  part<T extends Prisma.PartDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PartDefaultArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  updatedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AssetPart model
 */
export interface AssetPartFieldRefs {
  readonly asset_id: Prisma.FieldRef<"AssetPart", 'Int'>
  readonly part_id: Prisma.FieldRef<"AssetPart", 'Int'>
  readonly updated_at: Prisma.FieldRef<"AssetPart", 'DateTime'>
  readonly updated_by: Prisma.FieldRef<"AssetPart", 'Int'>
  readonly part_operation: Prisma.FieldRef<"AssetPart", 'PartOperation'>
}
    

// Custom InputTypes
/**
 * AssetPart findUnique
 */
export type AssetPartFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * Filter, which AssetPart to fetch.
   */
  where: Prisma.AssetPartWhereUniqueInput
}

/**
 * AssetPart findUniqueOrThrow
 */
export type AssetPartFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * Filter, which AssetPart to fetch.
   */
  where: Prisma.AssetPartWhereUniqueInput
}

/**
 * AssetPart findFirst
 */
export type AssetPartFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * Filter, which AssetPart to fetch.
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetParts to fetch.
   */
  orderBy?: Prisma.AssetPartOrderByWithRelationInput | Prisma.AssetPartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetParts.
   */
  cursor?: Prisma.AssetPartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetParts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetParts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetParts.
   */
  distinct?: Prisma.AssetPartScalarFieldEnum | Prisma.AssetPartScalarFieldEnum[]
}

/**
 * AssetPart findFirstOrThrow
 */
export type AssetPartFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * Filter, which AssetPart to fetch.
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetParts to fetch.
   */
  orderBy?: Prisma.AssetPartOrderByWithRelationInput | Prisma.AssetPartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetParts.
   */
  cursor?: Prisma.AssetPartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetParts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetParts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetParts.
   */
  distinct?: Prisma.AssetPartScalarFieldEnum | Prisma.AssetPartScalarFieldEnum[]
}

/**
 * AssetPart findMany
 */
export type AssetPartFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * Filter, which AssetParts to fetch.
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetParts to fetch.
   */
  orderBy?: Prisma.AssetPartOrderByWithRelationInput | Prisma.AssetPartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AssetParts.
   */
  cursor?: Prisma.AssetPartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetParts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetParts.
   */
  skip?: number
  distinct?: Prisma.AssetPartScalarFieldEnum | Prisma.AssetPartScalarFieldEnum[]
}

/**
 * AssetPart create
 */
export type AssetPartCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * The data needed to create a AssetPart.
   */
  data: Prisma.XOR<Prisma.AssetPartCreateInput, Prisma.AssetPartUncheckedCreateInput>
}

/**
 * AssetPart createMany
 */
export type AssetPartCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AssetParts.
   */
  data: Prisma.AssetPartCreateManyInput | Prisma.AssetPartCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetPart createManyAndReturn
 */
export type AssetPartCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * The data used to create many AssetParts.
   */
  data: Prisma.AssetPartCreateManyInput | Prisma.AssetPartCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AssetPart update
 */
export type AssetPartUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * The data needed to update a AssetPart.
   */
  data: Prisma.XOR<Prisma.AssetPartUpdateInput, Prisma.AssetPartUncheckedUpdateInput>
  /**
   * Choose, which AssetPart to update.
   */
  where: Prisma.AssetPartWhereUniqueInput
}

/**
 * AssetPart updateMany
 */
export type AssetPartUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AssetParts.
   */
  data: Prisma.XOR<Prisma.AssetPartUpdateManyMutationInput, Prisma.AssetPartUncheckedUpdateManyInput>
  /**
   * Filter which AssetParts to update
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * Limit how many AssetParts to update.
   */
  limit?: number
}

/**
 * AssetPart updateManyAndReturn
 */
export type AssetPartUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * The data used to update AssetParts.
   */
  data: Prisma.XOR<Prisma.AssetPartUpdateManyMutationInput, Prisma.AssetPartUncheckedUpdateManyInput>
  /**
   * Filter which AssetParts to update
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * Limit how many AssetParts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AssetPart upsert
 */
export type AssetPartUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * The filter to search for the AssetPart to update in case it exists.
   */
  where: Prisma.AssetPartWhereUniqueInput
  /**
   * In case the AssetPart found by the `where` argument doesn't exist, create a new AssetPart with this data.
   */
  create: Prisma.XOR<Prisma.AssetPartCreateInput, Prisma.AssetPartUncheckedCreateInput>
  /**
   * In case the AssetPart was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssetPartUpdateInput, Prisma.AssetPartUncheckedUpdateInput>
}

/**
 * AssetPart delete
 */
export type AssetPartDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  /**
   * Filter which AssetPart to delete.
   */
  where: Prisma.AssetPartWhereUniqueInput
}

/**
 * AssetPart deleteMany
 */
export type AssetPartDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetParts to delete
   */
  where?: Prisma.AssetPartWhereInput
  /**
   * Limit how many AssetParts to delete.
   */
  limit?: number
}

/**
 * AssetPart without action
 */
export type AssetPartDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
}
