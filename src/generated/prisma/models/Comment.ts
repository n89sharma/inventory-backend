
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Comment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Comment
 * 
 */
export type CommentModel = runtime.Types.Result.DefaultSelection<Prisma.$CommentPayload>

export type AggregateComment = {
  _count: CommentCountAggregateOutputType | null
  _avg: CommentAvgAggregateOutputType | null
  _sum: CommentSumAggregateOutputType | null
  _min: CommentMinAggregateOutputType | null
  _max: CommentMaxAggregateOutputType | null
}

export type CommentAvgAggregateOutputType = {
  id: number | null
  asset_id: number | null
  created_by_id: number | null
}

export type CommentSumAggregateOutputType = {
  id: number | null
  asset_id: number | null
  created_by_id: number | null
}

export type CommentMinAggregateOutputType = {
  id: number | null
  asset_id: number | null
  created_by_id: number | null
  comment: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type CommentMaxAggregateOutputType = {
  id: number | null
  asset_id: number | null
  created_by_id: number | null
  comment: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type CommentCountAggregateOutputType = {
  id: number
  asset_id: number
  created_by_id: number
  comment: number
  created_at: number
  updated_at: number
  _all: number
}


export type CommentAvgAggregateInputType = {
  id?: true
  asset_id?: true
  created_by_id?: true
}

export type CommentSumAggregateInputType = {
  id?: true
  asset_id?: true
  created_by_id?: true
}

export type CommentMinAggregateInputType = {
  id?: true
  asset_id?: true
  created_by_id?: true
  comment?: true
  created_at?: true
  updated_at?: true
}

export type CommentMaxAggregateInputType = {
  id?: true
  asset_id?: true
  created_by_id?: true
  comment?: true
  created_at?: true
  updated_at?: true
}

export type CommentCountAggregateInputType = {
  id?: true
  asset_id?: true
  created_by_id?: true
  comment?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type CommentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Comment to aggregate.
   */
  where?: Prisma.CommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Comments
  **/
  _count?: true | CommentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CommentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CommentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CommentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CommentMaxAggregateInputType
}

export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
      [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateComment[P]>
    : Prisma.GetScalarType<T[P], AggregateComment[P]>
}




export type CommentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommentWhereInput
  orderBy?: Prisma.CommentOrderByWithAggregationInput | Prisma.CommentOrderByWithAggregationInput[]
  by: Prisma.CommentScalarFieldEnum[] | Prisma.CommentScalarFieldEnum
  having?: Prisma.CommentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CommentCountAggregateInputType | true
  _avg?: CommentAvgAggregateInputType
  _sum?: CommentSumAggregateInputType
  _min?: CommentMinAggregateInputType
  _max?: CommentMaxAggregateInputType
}

export type CommentGroupByOutputType = {
  id: number
  asset_id: number
  created_by_id: number
  comment: string
  created_at: Date
  updated_at: Date
  _count: CommentCountAggregateOutputType | null
  _avg: CommentAvgAggregateOutputType | null
  _sum: CommentSumAggregateOutputType | null
  _min: CommentMinAggregateOutputType | null
  _max: CommentMaxAggregateOutputType | null
}

type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CommentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CommentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CommentGroupByOutputType[P]>
      }
    >
  > 



export type CommentWhereInput = {
  AND?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[]
  OR?: Prisma.CommentWhereInput[]
  NOT?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[]
  id?: Prisma.IntFilter<"Comment"> | number
  asset_id?: Prisma.IntFilter<"Comment"> | number
  created_by_id?: Prisma.IntFilter<"Comment"> | number
  comment?: Prisma.StringFilter<"Comment"> | string
  created_at?: Prisma.DateTimeFilter<"Comment"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Comment"> | Date | string
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  created_by?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CommentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
  created_by?: Prisma.UserOrderByWithRelationInput
}

export type CommentWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[]
  OR?: Prisma.CommentWhereInput[]
  NOT?: Prisma.CommentWhereInput | Prisma.CommentWhereInput[]
  asset_id?: Prisma.IntFilter<"Comment"> | number
  created_by_id?: Prisma.IntFilter<"Comment"> | number
  comment?: Prisma.StringFilter<"Comment"> | string
  created_at?: Prisma.DateTimeFilter<"Comment"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Comment"> | Date | string
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  created_by?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type CommentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.CommentCountOrderByAggregateInput
  _avg?: Prisma.CommentAvgOrderByAggregateInput
  _max?: Prisma.CommentMaxOrderByAggregateInput
  _min?: Prisma.CommentMinOrderByAggregateInput
  _sum?: Prisma.CommentSumOrderByAggregateInput
}

export type CommentScalarWhereWithAggregatesInput = {
  AND?: Prisma.CommentScalarWhereWithAggregatesInput | Prisma.CommentScalarWhereWithAggregatesInput[]
  OR?: Prisma.CommentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CommentScalarWhereWithAggregatesInput | Prisma.CommentScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Comment"> | number
  asset_id?: Prisma.IntWithAggregatesFilter<"Comment"> | number
  created_by_id?: Prisma.IntWithAggregatesFilter<"Comment"> | number
  comment?: Prisma.StringWithAggregatesFilter<"Comment"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Comment"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"Comment"> | Date | string
}

export type CommentCreateInput = {
  comment: string
  created_at: Date | string
  updated_at: Date | string
  asset: Prisma.AssetCreateNestedOneWithoutCommentsInput
  created_by: Prisma.UserCreateNestedOneWithoutCommentsInput
}

export type CommentUncheckedCreateInput = {
  id?: number
  asset_id: number
  created_by_id: number
  comment: string
  created_at: Date | string
  updated_at: Date | string
}

export type CommentUpdateInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset?: Prisma.AssetUpdateOneRequiredWithoutCommentsNestedInput
  created_by?: Prisma.UserUpdateOneRequiredWithoutCommentsNestedInput
}

export type CommentUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentCreateManyInput = {
  id?: number
  asset_id: number
  created_by_id: number
  comment: string
  created_at: Date | string
  updated_at: Date | string
}

export type CommentUpdateManyMutationInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentListRelationFilter = {
  every?: Prisma.CommentWhereInput
  some?: Prisma.CommentWhereInput
  none?: Prisma.CommentWhereInput
}

export type CommentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CommentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type CommentAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
}

export type CommentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type CommentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type CommentSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
}

export type CommentCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutAssetInput, Prisma.CommentUncheckedCreateWithoutAssetInput> | Prisma.CommentCreateWithoutAssetInput[] | Prisma.CommentUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutAssetInput | Prisma.CommentCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.CommentCreateManyAssetInputEnvelope
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
}

export type CommentUncheckedCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutAssetInput, Prisma.CommentUncheckedCreateWithoutAssetInput> | Prisma.CommentCreateWithoutAssetInput[] | Prisma.CommentUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutAssetInput | Prisma.CommentCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.CommentCreateManyAssetInputEnvelope
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
}

export type CommentUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutAssetInput, Prisma.CommentUncheckedCreateWithoutAssetInput> | Prisma.CommentCreateWithoutAssetInput[] | Prisma.CommentUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutAssetInput | Prisma.CommentCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.CommentUpsertWithWhereUniqueWithoutAssetInput | Prisma.CommentUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.CommentCreateManyAssetInputEnvelope
  set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  disconnect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  update?: Prisma.CommentUpdateWithWhereUniqueWithoutAssetInput | Prisma.CommentUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.CommentUpdateManyWithWhereWithoutAssetInput | Prisma.CommentUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[]
}

export type CommentUncheckedUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutAssetInput, Prisma.CommentUncheckedCreateWithoutAssetInput> | Prisma.CommentCreateWithoutAssetInput[] | Prisma.CommentUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutAssetInput | Prisma.CommentCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.CommentUpsertWithWhereUniqueWithoutAssetInput | Prisma.CommentUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.CommentCreateManyAssetInputEnvelope
  set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  disconnect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  update?: Prisma.CommentUpdateWithWhereUniqueWithoutAssetInput | Prisma.CommentUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.CommentUpdateManyWithWhereWithoutAssetInput | Prisma.CommentUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[]
}

export type CommentCreateNestedManyWithoutCreated_byInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutCreated_byInput, Prisma.CommentUncheckedCreateWithoutCreated_byInput> | Prisma.CommentCreateWithoutCreated_byInput[] | Prisma.CommentUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutCreated_byInput | Prisma.CommentCreateOrConnectWithoutCreated_byInput[]
  createMany?: Prisma.CommentCreateManyCreated_byInputEnvelope
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
}

export type CommentUncheckedCreateNestedManyWithoutCreated_byInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutCreated_byInput, Prisma.CommentUncheckedCreateWithoutCreated_byInput> | Prisma.CommentCreateWithoutCreated_byInput[] | Prisma.CommentUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutCreated_byInput | Prisma.CommentCreateOrConnectWithoutCreated_byInput[]
  createMany?: Prisma.CommentCreateManyCreated_byInputEnvelope
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
}

export type CommentUpdateManyWithoutCreated_byNestedInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutCreated_byInput, Prisma.CommentUncheckedCreateWithoutCreated_byInput> | Prisma.CommentCreateWithoutCreated_byInput[] | Prisma.CommentUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutCreated_byInput | Prisma.CommentCreateOrConnectWithoutCreated_byInput[]
  upsert?: Prisma.CommentUpsertWithWhereUniqueWithoutCreated_byInput | Prisma.CommentUpsertWithWhereUniqueWithoutCreated_byInput[]
  createMany?: Prisma.CommentCreateManyCreated_byInputEnvelope
  set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  disconnect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  update?: Prisma.CommentUpdateWithWhereUniqueWithoutCreated_byInput | Prisma.CommentUpdateWithWhereUniqueWithoutCreated_byInput[]
  updateMany?: Prisma.CommentUpdateManyWithWhereWithoutCreated_byInput | Prisma.CommentUpdateManyWithWhereWithoutCreated_byInput[]
  deleteMany?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[]
}

export type CommentUncheckedUpdateManyWithoutCreated_byNestedInput = {
  create?: Prisma.XOR<Prisma.CommentCreateWithoutCreated_byInput, Prisma.CommentUncheckedCreateWithoutCreated_byInput> | Prisma.CommentCreateWithoutCreated_byInput[] | Prisma.CommentUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.CommentCreateOrConnectWithoutCreated_byInput | Prisma.CommentCreateOrConnectWithoutCreated_byInput[]
  upsert?: Prisma.CommentUpsertWithWhereUniqueWithoutCreated_byInput | Prisma.CommentUpsertWithWhereUniqueWithoutCreated_byInput[]
  createMany?: Prisma.CommentCreateManyCreated_byInputEnvelope
  set?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  disconnect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  delete?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  connect?: Prisma.CommentWhereUniqueInput | Prisma.CommentWhereUniqueInput[]
  update?: Prisma.CommentUpdateWithWhereUniqueWithoutCreated_byInput | Prisma.CommentUpdateWithWhereUniqueWithoutCreated_byInput[]
  updateMany?: Prisma.CommentUpdateManyWithWhereWithoutCreated_byInput | Prisma.CommentUpdateManyWithWhereWithoutCreated_byInput[]
  deleteMany?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[]
}

export type CommentCreateWithoutAssetInput = {
  comment: string
  created_at: Date | string
  updated_at: Date | string
  created_by: Prisma.UserCreateNestedOneWithoutCommentsInput
}

export type CommentUncheckedCreateWithoutAssetInput = {
  id?: number
  created_by_id: number
  comment: string
  created_at: Date | string
  updated_at: Date | string
}

export type CommentCreateOrConnectWithoutAssetInput = {
  where: Prisma.CommentWhereUniqueInput
  create: Prisma.XOR<Prisma.CommentCreateWithoutAssetInput, Prisma.CommentUncheckedCreateWithoutAssetInput>
}

export type CommentCreateManyAssetInputEnvelope = {
  data: Prisma.CommentCreateManyAssetInput | Prisma.CommentCreateManyAssetInput[]
  skipDuplicates?: boolean
}

export type CommentUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.CommentWhereUniqueInput
  update: Prisma.XOR<Prisma.CommentUpdateWithoutAssetInput, Prisma.CommentUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.CommentCreateWithoutAssetInput, Prisma.CommentUncheckedCreateWithoutAssetInput>
}

export type CommentUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.CommentWhereUniqueInput
  data: Prisma.XOR<Prisma.CommentUpdateWithoutAssetInput, Prisma.CommentUncheckedUpdateWithoutAssetInput>
}

export type CommentUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.CommentScalarWhereInput
  data: Prisma.XOR<Prisma.CommentUpdateManyMutationInput, Prisma.CommentUncheckedUpdateManyWithoutAssetInput>
}

export type CommentScalarWhereInput = {
  AND?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[]
  OR?: Prisma.CommentScalarWhereInput[]
  NOT?: Prisma.CommentScalarWhereInput | Prisma.CommentScalarWhereInput[]
  id?: Prisma.IntFilter<"Comment"> | number
  asset_id?: Prisma.IntFilter<"Comment"> | number
  created_by_id?: Prisma.IntFilter<"Comment"> | number
  comment?: Prisma.StringFilter<"Comment"> | string
  created_at?: Prisma.DateTimeFilter<"Comment"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Comment"> | Date | string
}

export type CommentCreateWithoutCreated_byInput = {
  comment: string
  created_at: Date | string
  updated_at: Date | string
  asset: Prisma.AssetCreateNestedOneWithoutCommentsInput
}

export type CommentUncheckedCreateWithoutCreated_byInput = {
  id?: number
  asset_id: number
  comment: string
  created_at: Date | string
  updated_at: Date | string
}

export type CommentCreateOrConnectWithoutCreated_byInput = {
  where: Prisma.CommentWhereUniqueInput
  create: Prisma.XOR<Prisma.CommentCreateWithoutCreated_byInput, Prisma.CommentUncheckedCreateWithoutCreated_byInput>
}

export type CommentCreateManyCreated_byInputEnvelope = {
  data: Prisma.CommentCreateManyCreated_byInput | Prisma.CommentCreateManyCreated_byInput[]
  skipDuplicates?: boolean
}

export type CommentUpsertWithWhereUniqueWithoutCreated_byInput = {
  where: Prisma.CommentWhereUniqueInput
  update: Prisma.XOR<Prisma.CommentUpdateWithoutCreated_byInput, Prisma.CommentUncheckedUpdateWithoutCreated_byInput>
  create: Prisma.XOR<Prisma.CommentCreateWithoutCreated_byInput, Prisma.CommentUncheckedCreateWithoutCreated_byInput>
}

export type CommentUpdateWithWhereUniqueWithoutCreated_byInput = {
  where: Prisma.CommentWhereUniqueInput
  data: Prisma.XOR<Prisma.CommentUpdateWithoutCreated_byInput, Prisma.CommentUncheckedUpdateWithoutCreated_byInput>
}

export type CommentUpdateManyWithWhereWithoutCreated_byInput = {
  where: Prisma.CommentScalarWhereInput
  data: Prisma.XOR<Prisma.CommentUpdateManyMutationInput, Prisma.CommentUncheckedUpdateManyWithoutCreated_byInput>
}

export type CommentCreateManyAssetInput = {
  id?: number
  created_by_id: number
  comment: string
  created_at: Date | string
  updated_at: Date | string
}

export type CommentUpdateWithoutAssetInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  created_by?: Prisma.UserUpdateOneRequiredWithoutCommentsNestedInput
}

export type CommentUncheckedUpdateWithoutAssetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentUncheckedUpdateManyWithoutAssetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentCreateManyCreated_byInput = {
  id?: number
  asset_id: number
  comment: string
  created_at: Date | string
  updated_at: Date | string
}

export type CommentUpdateWithoutCreated_byInput = {
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset?: Prisma.AssetUpdateOneRequiredWithoutCommentsNestedInput
}

export type CommentUncheckedUpdateWithoutCreated_byInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommentUncheckedUpdateManyWithoutCreated_byInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CommentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  created_by_id?: boolean
  comment?: boolean
  created_at?: boolean
  updated_at?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["comment"]>

export type CommentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  created_by_id?: boolean
  comment?: boolean
  created_at?: boolean
  updated_at?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["comment"]>

export type CommentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  created_by_id?: boolean
  comment?: boolean
  created_at?: boolean
  updated_at?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["comment"]>

export type CommentSelectScalar = {
  id?: boolean
  asset_id?: boolean
  created_by_id?: boolean
  comment?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type CommentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "asset_id" | "created_by_id" | "comment" | "created_at" | "updated_at", ExtArgs["result"]["comment"]>
export type CommentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CommentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CommentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CommentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Comment"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
    created_by: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    asset_id: number
    created_by_id: number
    comment: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["comment"]>
  composites: {}
}

export type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CommentPayload, S>

export type CommentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CommentCountAggregateInputType | true
  }

export interface CommentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
  /**
   * Find zero or one Comment that matches the filter.
   * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CommentFindUniqueArgs>(args: Prisma.SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Comment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentFindFirstArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CommentFindFirstArgs>(args?: Prisma.SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Comment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
   * @example
   * // Get one Comment
   * const comment = await prisma.comment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Comments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Comments
   * const comments = await prisma.comment.findMany()
   * 
   * // Get first 10 Comments
   * const comments = await prisma.comment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CommentFindManyArgs>(args?: Prisma.SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Comment.
   * @param {CommentCreateArgs} args - Arguments to create a Comment.
   * @example
   * // Create one Comment
   * const Comment = await prisma.comment.create({
   *   data: {
   *     // ... data to create a Comment
   *   }
   * })
   * 
   */
  create<T extends CommentCreateArgs>(args: Prisma.SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Comments.
   * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
   * @example
   * // Create many Comments
   * const comment = await prisma.comment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CommentCreateManyArgs>(args?: Prisma.SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Comments and returns the data saved in the database.
   * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
   * @example
   * // Create many Comments
   * const comment = await prisma.comment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Comments and only return the `id`
   * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Comment.
   * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
   * @example
   * // Delete one Comment
   * const Comment = await prisma.comment.delete({
   *   where: {
   *     // ... filter to delete one Comment
   *   }
   * })
   * 
   */
  delete<T extends CommentDeleteArgs>(args: Prisma.SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Comment.
   * @param {CommentUpdateArgs} args - Arguments to update one Comment.
   * @example
   * // Update one Comment
   * const comment = await prisma.comment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CommentUpdateArgs>(args: Prisma.SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Comments.
   * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
   * @example
   * // Delete a few Comments
   * const { count } = await prisma.comment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CommentDeleteManyArgs>(args?: Prisma.SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Comments
   * const comment = await prisma.comment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CommentUpdateManyArgs>(args: Prisma.SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Comments and returns the data updated in the database.
   * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
   * @example
   * // Update many Comments
   * const comment = await prisma.comment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Comments and only return the `id`
   * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Comment.
   * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
   * @example
   * // Update or create a Comment
   * const comment = await prisma.comment.upsert({
   *   create: {
   *     // ... data to create a Comment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Comment we want to update
   *   }
   * })
   */
  upsert<T extends CommentUpsertArgs>(args: Prisma.SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma.Prisma__CommentClient<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Comments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentCountArgs} args - Arguments to filter Comments to count.
   * @example
   * // Count the number of Comments
   * const count = await prisma.comment.count({
   *   where: {
   *     // ... the filter for the Comments we want to count
   *   }
   * })
  **/
  count<T extends CommentCountArgs>(
    args?: Prisma.Subset<T, CommentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CommentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Comment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CommentAggregateArgs>(args: Prisma.Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

  /**
   * Group by Comment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CommentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CommentGroupByArgs['orderBy'] }
      : { orderBy?: CommentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Comment model
 */
readonly fields: CommentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Comment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  created_by<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Comment model
 */
export interface CommentFieldRefs {
  readonly id: Prisma.FieldRef<"Comment", 'Int'>
  readonly asset_id: Prisma.FieldRef<"Comment", 'Int'>
  readonly created_by_id: Prisma.FieldRef<"Comment", 'Int'>
  readonly comment: Prisma.FieldRef<"Comment", 'String'>
  readonly created_at: Prisma.FieldRef<"Comment", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"Comment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Comment findUnique
 */
export type CommentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * Filter, which Comment to fetch.
   */
  where: Prisma.CommentWhereUniqueInput
}

/**
 * Comment findUniqueOrThrow
 */
export type CommentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * Filter, which Comment to fetch.
   */
  where: Prisma.CommentWhereUniqueInput
}

/**
 * Comment findFirst
 */
export type CommentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * Filter, which Comment to fetch.
   */
  where?: Prisma.CommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Comments.
   */
  cursor?: Prisma.CommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Comments.
   */
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[]
}

/**
 * Comment findFirstOrThrow
 */
export type CommentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * Filter, which Comment to fetch.
   */
  where?: Prisma.CommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Comments.
   */
  cursor?: Prisma.CommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Comments.
   */
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[]
}

/**
 * Comment findMany
 */
export type CommentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * Filter, which Comments to fetch.
   */
  where?: Prisma.CommentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Comments to fetch.
   */
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Comments.
   */
  cursor?: Prisma.CommentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Comments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Comments.
   */
  skip?: number
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[]
}

/**
 * Comment create
 */
export type CommentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * The data needed to create a Comment.
   */
  data: Prisma.XOR<Prisma.CommentCreateInput, Prisma.CommentUncheckedCreateInput>
}

/**
 * Comment createMany
 */
export type CommentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Comments.
   */
  data: Prisma.CommentCreateManyInput | Prisma.CommentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Comment createManyAndReturn
 */
export type CommentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * The data used to create many Comments.
   */
  data: Prisma.CommentCreateManyInput | Prisma.CommentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Comment update
 */
export type CommentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * The data needed to update a Comment.
   */
  data: Prisma.XOR<Prisma.CommentUpdateInput, Prisma.CommentUncheckedUpdateInput>
  /**
   * Choose, which Comment to update.
   */
  where: Prisma.CommentWhereUniqueInput
}

/**
 * Comment updateMany
 */
export type CommentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Comments.
   */
  data: Prisma.XOR<Prisma.CommentUpdateManyMutationInput, Prisma.CommentUncheckedUpdateManyInput>
  /**
   * Filter which Comments to update
   */
  where?: Prisma.CommentWhereInput
  /**
   * Limit how many Comments to update.
   */
  limit?: number
}

/**
 * Comment updateManyAndReturn
 */
export type CommentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * The data used to update Comments.
   */
  data: Prisma.XOR<Prisma.CommentUpdateManyMutationInput, Prisma.CommentUncheckedUpdateManyInput>
  /**
   * Filter which Comments to update
   */
  where?: Prisma.CommentWhereInput
  /**
   * Limit how many Comments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Comment upsert
 */
export type CommentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * The filter to search for the Comment to update in case it exists.
   */
  where: Prisma.CommentWhereUniqueInput
  /**
   * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
   */
  create: Prisma.XOR<Prisma.CommentCreateInput, Prisma.CommentUncheckedCreateInput>
  /**
   * In case the Comment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CommentUpdateInput, Prisma.CommentUncheckedUpdateInput>
}

/**
 * Comment delete
 */
export type CommentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  /**
   * Filter which Comment to delete.
   */
  where: Prisma.CommentWhereUniqueInput
}

/**
 * Comment deleteMany
 */
export type CommentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Comments to delete
   */
  where?: Prisma.CommentWhereInput
  /**
   * Limit how many Comments to delete.
   */
  limit?: number
}

/**
 * Comment without action
 */
export type CommentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
}
