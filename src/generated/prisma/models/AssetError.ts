
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AssetError` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AssetError
 * 
 */
export type AssetErrorModel = runtime.Types.Result.DefaultSelection<Prisma.$AssetErrorPayload>

export type AggregateAssetError = {
  _count: AssetErrorCountAggregateOutputType | null
  _avg: AssetErrorAvgAggregateOutputType | null
  _sum: AssetErrorSumAggregateOutputType | null
  _min: AssetErrorMinAggregateOutputType | null
  _max: AssetErrorMaxAggregateOutputType | null
}

export type AssetErrorAvgAggregateOutputType = {
  asset_id: number | null
  error_id: number | null
  added_by: number | null
  fixed_by: number | null
}

export type AssetErrorSumAggregateOutputType = {
  asset_id: number | null
  error_id: number | null
  added_by: number | null
  fixed_by: number | null
}

export type AssetErrorMinAggregateOutputType = {
  asset_id: number | null
  error_id: number | null
  is_fixed: boolean | null
  added_by: number | null
  added_at: Date | null
  fixed_by: number | null
  fixed_at: Date | null
}

export type AssetErrorMaxAggregateOutputType = {
  asset_id: number | null
  error_id: number | null
  is_fixed: boolean | null
  added_by: number | null
  added_at: Date | null
  fixed_by: number | null
  fixed_at: Date | null
}

export type AssetErrorCountAggregateOutputType = {
  asset_id: number
  error_id: number
  is_fixed: number
  added_by: number
  added_at: number
  fixed_by: number
  fixed_at: number
  _all: number
}


export type AssetErrorAvgAggregateInputType = {
  asset_id?: true
  error_id?: true
  added_by?: true
  fixed_by?: true
}

export type AssetErrorSumAggregateInputType = {
  asset_id?: true
  error_id?: true
  added_by?: true
  fixed_by?: true
}

export type AssetErrorMinAggregateInputType = {
  asset_id?: true
  error_id?: true
  is_fixed?: true
  added_by?: true
  added_at?: true
  fixed_by?: true
  fixed_at?: true
}

export type AssetErrorMaxAggregateInputType = {
  asset_id?: true
  error_id?: true
  is_fixed?: true
  added_by?: true
  added_at?: true
  fixed_by?: true
  fixed_at?: true
}

export type AssetErrorCountAggregateInputType = {
  asset_id?: true
  error_id?: true
  is_fixed?: true
  added_by?: true
  added_at?: true
  fixed_by?: true
  fixed_at?: true
  _all?: true
}

export type AssetErrorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetError to aggregate.
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetErrors to fetch.
   */
  orderBy?: Prisma.AssetErrorOrderByWithRelationInput | Prisma.AssetErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssetErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetErrors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetErrors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AssetErrors
  **/
  _count?: true | AssetErrorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssetErrorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssetErrorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssetErrorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssetErrorMaxAggregateInputType
}

export type GetAssetErrorAggregateType<T extends AssetErrorAggregateArgs> = {
      [P in keyof T & keyof AggregateAssetError]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssetError[P]>
    : Prisma.GetScalarType<T[P], AggregateAssetError[P]>
}




export type AssetErrorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetErrorWhereInput
  orderBy?: Prisma.AssetErrorOrderByWithAggregationInput | Prisma.AssetErrorOrderByWithAggregationInput[]
  by: Prisma.AssetErrorScalarFieldEnum[] | Prisma.AssetErrorScalarFieldEnum
  having?: Prisma.AssetErrorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssetErrorCountAggregateInputType | true
  _avg?: AssetErrorAvgAggregateInputType
  _sum?: AssetErrorSumAggregateInputType
  _min?: AssetErrorMinAggregateInputType
  _max?: AssetErrorMaxAggregateInputType
}

export type AssetErrorGroupByOutputType = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date
  fixed_by: number | null
  fixed_at: Date | null
  _count: AssetErrorCountAggregateOutputType | null
  _avg: AssetErrorAvgAggregateOutputType | null
  _sum: AssetErrorSumAggregateOutputType | null
  _min: AssetErrorMinAggregateOutputType | null
  _max: AssetErrorMaxAggregateOutputType | null
}

type GetAssetErrorGroupByPayload<T extends AssetErrorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssetErrorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssetErrorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssetErrorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssetErrorGroupByOutputType[P]>
      }
    >
  > 



export type AssetErrorWhereInput = {
  AND?: Prisma.AssetErrorWhereInput | Prisma.AssetErrorWhereInput[]
  OR?: Prisma.AssetErrorWhereInput[]
  NOT?: Prisma.AssetErrorWhereInput | Prisma.AssetErrorWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetError"> | number
  error_id?: Prisma.IntFilter<"AssetError"> | number
  is_fixed?: Prisma.BoolFilter<"AssetError"> | boolean
  added_by?: Prisma.IntFilter<"AssetError"> | number
  added_at?: Prisma.DateTimeFilter<"AssetError"> | Date | string
  fixed_by?: Prisma.IntNullableFilter<"AssetError"> | number | null
  fixed_at?: Prisma.DateTimeNullableFilter<"AssetError"> | Date | string | null
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  error?: Prisma.XOR<Prisma.ErrorScalarRelationFilter, Prisma.ErrorWhereInput>
  addedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  fixedBy?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type AssetErrorOrderByWithRelationInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  is_fixed?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  added_at?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrderInput | Prisma.SortOrder
  fixed_at?: Prisma.SortOrderInput | Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
  error?: Prisma.ErrorOrderByWithRelationInput
  addedBy?: Prisma.UserOrderByWithRelationInput
  fixedBy?: Prisma.UserOrderByWithRelationInput
}

export type AssetErrorWhereUniqueInput = Prisma.AtLeast<{
  asset_id_error_id?: Prisma.AssetErrorAsset_idError_idCompoundUniqueInput
  AND?: Prisma.AssetErrorWhereInput | Prisma.AssetErrorWhereInput[]
  OR?: Prisma.AssetErrorWhereInput[]
  NOT?: Prisma.AssetErrorWhereInput | Prisma.AssetErrorWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetError"> | number
  error_id?: Prisma.IntFilter<"AssetError"> | number
  is_fixed?: Prisma.BoolFilter<"AssetError"> | boolean
  added_by?: Prisma.IntFilter<"AssetError"> | number
  added_at?: Prisma.DateTimeFilter<"AssetError"> | Date | string
  fixed_by?: Prisma.IntNullableFilter<"AssetError"> | number | null
  fixed_at?: Prisma.DateTimeNullableFilter<"AssetError"> | Date | string | null
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  error?: Prisma.XOR<Prisma.ErrorScalarRelationFilter, Prisma.ErrorWhereInput>
  addedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  fixedBy?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "asset_id_error_id">

export type AssetErrorOrderByWithAggregationInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  is_fixed?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  added_at?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrderInput | Prisma.SortOrder
  fixed_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AssetErrorCountOrderByAggregateInput
  _avg?: Prisma.AssetErrorAvgOrderByAggregateInput
  _max?: Prisma.AssetErrorMaxOrderByAggregateInput
  _min?: Prisma.AssetErrorMinOrderByAggregateInput
  _sum?: Prisma.AssetErrorSumOrderByAggregateInput
}

export type AssetErrorScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssetErrorScalarWhereWithAggregatesInput | Prisma.AssetErrorScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssetErrorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssetErrorScalarWhereWithAggregatesInput | Prisma.AssetErrorScalarWhereWithAggregatesInput[]
  asset_id?: Prisma.IntWithAggregatesFilter<"AssetError"> | number
  error_id?: Prisma.IntWithAggregatesFilter<"AssetError"> | number
  is_fixed?: Prisma.BoolWithAggregatesFilter<"AssetError"> | boolean
  added_by?: Prisma.IntWithAggregatesFilter<"AssetError"> | number
  added_at?: Prisma.DateTimeWithAggregatesFilter<"AssetError"> | Date | string
  fixed_by?: Prisma.IntNullableWithAggregatesFilter<"AssetError"> | number | null
  fixed_at?: Prisma.DateTimeNullableWithAggregatesFilter<"AssetError"> | Date | string | null
}

export type AssetErrorCreateInput = {
  is_fixed: boolean
  added_at: Date | string
  fixed_at?: Date | string | null
  asset: Prisma.AssetCreateNestedOneWithoutAsset_errorsInput
  error: Prisma.ErrorCreateNestedOneWithoutAsset_errorsInput
  addedBy: Prisma.UserCreateNestedOneWithoutAsset_errors_addedInput
  fixedBy?: Prisma.UserCreateNestedOneWithoutAsset_errors_fixedInput
}

export type AssetErrorUncheckedCreateInput = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorUpdateInput = {
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_errorsNestedInput
  error?: Prisma.ErrorUpdateOneRequiredWithoutAsset_errorsNestedInput
  addedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_errors_addedNestedInput
  fixedBy?: Prisma.UserUpdateOneWithoutAsset_errors_fixedNestedInput
}

export type AssetErrorUncheckedUpdateInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorCreateManyInput = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorUpdateManyMutationInput = {
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorUncheckedUpdateManyInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorListRelationFilter = {
  every?: Prisma.AssetErrorWhereInput
  some?: Prisma.AssetErrorWhereInput
  none?: Prisma.AssetErrorWhereInput
}

export type AssetErrorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AssetErrorAsset_idError_idCompoundUniqueInput = {
  asset_id: number
  error_id: number
}

export type AssetErrorCountOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  is_fixed?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  added_at?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrder
  fixed_at?: Prisma.SortOrder
}

export type AssetErrorAvgOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrder
}

export type AssetErrorMaxOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  is_fixed?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  added_at?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrder
  fixed_at?: Prisma.SortOrder
}

export type AssetErrorMinOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  is_fixed?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  added_at?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrder
  fixed_at?: Prisma.SortOrder
}

export type AssetErrorSumOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  error_id?: Prisma.SortOrder
  added_by?: Prisma.SortOrder
  fixed_by?: Prisma.SortOrder
}

export type AssetErrorCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAssetInput, Prisma.AssetErrorUncheckedCreateWithoutAssetInput> | Prisma.AssetErrorCreateWithoutAssetInput[] | Prisma.AssetErrorUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAssetInput | Prisma.AssetErrorCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetErrorCreateManyAssetInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUncheckedCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAssetInput, Prisma.AssetErrorUncheckedCreateWithoutAssetInput> | Prisma.AssetErrorCreateWithoutAssetInput[] | Prisma.AssetErrorUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAssetInput | Prisma.AssetErrorCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetErrorCreateManyAssetInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAssetInput, Prisma.AssetErrorUncheckedCreateWithoutAssetInput> | Prisma.AssetErrorCreateWithoutAssetInput[] | Prisma.AssetErrorUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAssetInput | Prisma.AssetErrorCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetErrorCreateManyAssetInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutAssetInput | Prisma.AssetErrorUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorUncheckedUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAssetInput, Prisma.AssetErrorUncheckedCreateWithoutAssetInput> | Prisma.AssetErrorCreateWithoutAssetInput[] | Prisma.AssetErrorUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAssetInput | Prisma.AssetErrorCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetErrorCreateManyAssetInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutAssetInput | Prisma.AssetErrorUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorCreateNestedManyWithoutErrorInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutErrorInput, Prisma.AssetErrorUncheckedCreateWithoutErrorInput> | Prisma.AssetErrorCreateWithoutErrorInput[] | Prisma.AssetErrorUncheckedCreateWithoutErrorInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutErrorInput | Prisma.AssetErrorCreateOrConnectWithoutErrorInput[]
  createMany?: Prisma.AssetErrorCreateManyErrorInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUncheckedCreateNestedManyWithoutErrorInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutErrorInput, Prisma.AssetErrorUncheckedCreateWithoutErrorInput> | Prisma.AssetErrorCreateWithoutErrorInput[] | Prisma.AssetErrorUncheckedCreateWithoutErrorInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutErrorInput | Prisma.AssetErrorCreateOrConnectWithoutErrorInput[]
  createMany?: Prisma.AssetErrorCreateManyErrorInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUpdateManyWithoutErrorNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutErrorInput, Prisma.AssetErrorUncheckedCreateWithoutErrorInput> | Prisma.AssetErrorCreateWithoutErrorInput[] | Prisma.AssetErrorUncheckedCreateWithoutErrorInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutErrorInput | Prisma.AssetErrorCreateOrConnectWithoutErrorInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutErrorInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutErrorInput[]
  createMany?: Prisma.AssetErrorCreateManyErrorInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutErrorInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutErrorInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutErrorInput | Prisma.AssetErrorUpdateManyWithWhereWithoutErrorInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorUncheckedUpdateManyWithoutErrorNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutErrorInput, Prisma.AssetErrorUncheckedCreateWithoutErrorInput> | Prisma.AssetErrorCreateWithoutErrorInput[] | Prisma.AssetErrorUncheckedCreateWithoutErrorInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutErrorInput | Prisma.AssetErrorCreateOrConnectWithoutErrorInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutErrorInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutErrorInput[]
  createMany?: Prisma.AssetErrorCreateManyErrorInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutErrorInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutErrorInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutErrorInput | Prisma.AssetErrorUpdateManyWithWhereWithoutErrorInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type AssetErrorCreateNestedManyWithoutAddedByInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAddedByInput, Prisma.AssetErrorUncheckedCreateWithoutAddedByInput> | Prisma.AssetErrorCreateWithoutAddedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutAddedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAddedByInput | Prisma.AssetErrorCreateOrConnectWithoutAddedByInput[]
  createMany?: Prisma.AssetErrorCreateManyAddedByInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorCreateNestedManyWithoutFixedByInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutFixedByInput, Prisma.AssetErrorUncheckedCreateWithoutFixedByInput> | Prisma.AssetErrorCreateWithoutFixedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutFixedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutFixedByInput | Prisma.AssetErrorCreateOrConnectWithoutFixedByInput[]
  createMany?: Prisma.AssetErrorCreateManyFixedByInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUncheckedCreateNestedManyWithoutAddedByInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAddedByInput, Prisma.AssetErrorUncheckedCreateWithoutAddedByInput> | Prisma.AssetErrorCreateWithoutAddedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutAddedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAddedByInput | Prisma.AssetErrorCreateOrConnectWithoutAddedByInput[]
  createMany?: Prisma.AssetErrorCreateManyAddedByInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUncheckedCreateNestedManyWithoutFixedByInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutFixedByInput, Prisma.AssetErrorUncheckedCreateWithoutFixedByInput> | Prisma.AssetErrorCreateWithoutFixedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutFixedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutFixedByInput | Prisma.AssetErrorCreateOrConnectWithoutFixedByInput[]
  createMany?: Prisma.AssetErrorCreateManyFixedByInputEnvelope
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
}

export type AssetErrorUpdateManyWithoutAddedByNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAddedByInput, Prisma.AssetErrorUncheckedCreateWithoutAddedByInput> | Prisma.AssetErrorCreateWithoutAddedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutAddedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAddedByInput | Prisma.AssetErrorCreateOrConnectWithoutAddedByInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutAddedByInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutAddedByInput[]
  createMany?: Prisma.AssetErrorCreateManyAddedByInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutAddedByInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutAddedByInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutAddedByInput | Prisma.AssetErrorUpdateManyWithWhereWithoutAddedByInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorUpdateManyWithoutFixedByNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutFixedByInput, Prisma.AssetErrorUncheckedCreateWithoutFixedByInput> | Prisma.AssetErrorCreateWithoutFixedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutFixedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutFixedByInput | Prisma.AssetErrorCreateOrConnectWithoutFixedByInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutFixedByInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutFixedByInput[]
  createMany?: Prisma.AssetErrorCreateManyFixedByInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutFixedByInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutFixedByInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutFixedByInput | Prisma.AssetErrorUpdateManyWithWhereWithoutFixedByInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorUncheckedUpdateManyWithoutAddedByNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutAddedByInput, Prisma.AssetErrorUncheckedCreateWithoutAddedByInput> | Prisma.AssetErrorCreateWithoutAddedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutAddedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutAddedByInput | Prisma.AssetErrorCreateOrConnectWithoutAddedByInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutAddedByInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutAddedByInput[]
  createMany?: Prisma.AssetErrorCreateManyAddedByInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutAddedByInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutAddedByInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutAddedByInput | Prisma.AssetErrorUpdateManyWithWhereWithoutAddedByInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorUncheckedUpdateManyWithoutFixedByNestedInput = {
  create?: Prisma.XOR<Prisma.AssetErrorCreateWithoutFixedByInput, Prisma.AssetErrorUncheckedCreateWithoutFixedByInput> | Prisma.AssetErrorCreateWithoutFixedByInput[] | Prisma.AssetErrorUncheckedCreateWithoutFixedByInput[]
  connectOrCreate?: Prisma.AssetErrorCreateOrConnectWithoutFixedByInput | Prisma.AssetErrorCreateOrConnectWithoutFixedByInput[]
  upsert?: Prisma.AssetErrorUpsertWithWhereUniqueWithoutFixedByInput | Prisma.AssetErrorUpsertWithWhereUniqueWithoutFixedByInput[]
  createMany?: Prisma.AssetErrorCreateManyFixedByInputEnvelope
  set?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  disconnect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  delete?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  connect?: Prisma.AssetErrorWhereUniqueInput | Prisma.AssetErrorWhereUniqueInput[]
  update?: Prisma.AssetErrorUpdateWithWhereUniqueWithoutFixedByInput | Prisma.AssetErrorUpdateWithWhereUniqueWithoutFixedByInput[]
  updateMany?: Prisma.AssetErrorUpdateManyWithWhereWithoutFixedByInput | Prisma.AssetErrorUpdateManyWithWhereWithoutFixedByInput[]
  deleteMany?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
}

export type AssetErrorCreateWithoutAssetInput = {
  is_fixed: boolean
  added_at: Date | string
  fixed_at?: Date | string | null
  error: Prisma.ErrorCreateNestedOneWithoutAsset_errorsInput
  addedBy: Prisma.UserCreateNestedOneWithoutAsset_errors_addedInput
  fixedBy?: Prisma.UserCreateNestedOneWithoutAsset_errors_fixedInput
}

export type AssetErrorUncheckedCreateWithoutAssetInput = {
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorCreateOrConnectWithoutAssetInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutAssetInput, Prisma.AssetErrorUncheckedCreateWithoutAssetInput>
}

export type AssetErrorCreateManyAssetInputEnvelope = {
  data: Prisma.AssetErrorCreateManyAssetInput | Prisma.AssetErrorCreateManyAssetInput[]
  skipDuplicates?: boolean
}

export type AssetErrorUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetErrorUpdateWithoutAssetInput, Prisma.AssetErrorUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutAssetInput, Prisma.AssetErrorUncheckedCreateWithoutAssetInput>
}

export type AssetErrorUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateWithoutAssetInput, Prisma.AssetErrorUncheckedUpdateWithoutAssetInput>
}

export type AssetErrorUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.AssetErrorScalarWhereInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateManyMutationInput, Prisma.AssetErrorUncheckedUpdateManyWithoutAssetInput>
}

export type AssetErrorScalarWhereInput = {
  AND?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
  OR?: Prisma.AssetErrorScalarWhereInput[]
  NOT?: Prisma.AssetErrorScalarWhereInput | Prisma.AssetErrorScalarWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetError"> | number
  error_id?: Prisma.IntFilter<"AssetError"> | number
  is_fixed?: Prisma.BoolFilter<"AssetError"> | boolean
  added_by?: Prisma.IntFilter<"AssetError"> | number
  added_at?: Prisma.DateTimeFilter<"AssetError"> | Date | string
  fixed_by?: Prisma.IntNullableFilter<"AssetError"> | number | null
  fixed_at?: Prisma.DateTimeNullableFilter<"AssetError"> | Date | string | null
}

export type AssetErrorCreateWithoutErrorInput = {
  is_fixed: boolean
  added_at: Date | string
  fixed_at?: Date | string | null
  asset: Prisma.AssetCreateNestedOneWithoutAsset_errorsInput
  addedBy: Prisma.UserCreateNestedOneWithoutAsset_errors_addedInput
  fixedBy?: Prisma.UserCreateNestedOneWithoutAsset_errors_fixedInput
}

export type AssetErrorUncheckedCreateWithoutErrorInput = {
  asset_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorCreateOrConnectWithoutErrorInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutErrorInput, Prisma.AssetErrorUncheckedCreateWithoutErrorInput>
}

export type AssetErrorCreateManyErrorInputEnvelope = {
  data: Prisma.AssetErrorCreateManyErrorInput | Prisma.AssetErrorCreateManyErrorInput[]
  skipDuplicates?: boolean
}

export type AssetErrorUpsertWithWhereUniqueWithoutErrorInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetErrorUpdateWithoutErrorInput, Prisma.AssetErrorUncheckedUpdateWithoutErrorInput>
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutErrorInput, Prisma.AssetErrorUncheckedCreateWithoutErrorInput>
}

export type AssetErrorUpdateWithWhereUniqueWithoutErrorInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateWithoutErrorInput, Prisma.AssetErrorUncheckedUpdateWithoutErrorInput>
}

export type AssetErrorUpdateManyWithWhereWithoutErrorInput = {
  where: Prisma.AssetErrorScalarWhereInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateManyMutationInput, Prisma.AssetErrorUncheckedUpdateManyWithoutErrorInput>
}

export type AssetErrorCreateWithoutAddedByInput = {
  is_fixed: boolean
  added_at: Date | string
  fixed_at?: Date | string | null
  asset: Prisma.AssetCreateNestedOneWithoutAsset_errorsInput
  error: Prisma.ErrorCreateNestedOneWithoutAsset_errorsInput
  fixedBy?: Prisma.UserCreateNestedOneWithoutAsset_errors_fixedInput
}

export type AssetErrorUncheckedCreateWithoutAddedByInput = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorCreateOrConnectWithoutAddedByInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutAddedByInput, Prisma.AssetErrorUncheckedCreateWithoutAddedByInput>
}

export type AssetErrorCreateManyAddedByInputEnvelope = {
  data: Prisma.AssetErrorCreateManyAddedByInput | Prisma.AssetErrorCreateManyAddedByInput[]
  skipDuplicates?: boolean
}

export type AssetErrorCreateWithoutFixedByInput = {
  is_fixed: boolean
  added_at: Date | string
  fixed_at?: Date | string | null
  asset: Prisma.AssetCreateNestedOneWithoutAsset_errorsInput
  error: Prisma.ErrorCreateNestedOneWithoutAsset_errorsInput
  addedBy: Prisma.UserCreateNestedOneWithoutAsset_errors_addedInput
}

export type AssetErrorUncheckedCreateWithoutFixedByInput = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_at?: Date | string | null
}

export type AssetErrorCreateOrConnectWithoutFixedByInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutFixedByInput, Prisma.AssetErrorUncheckedCreateWithoutFixedByInput>
}

export type AssetErrorCreateManyFixedByInputEnvelope = {
  data: Prisma.AssetErrorCreateManyFixedByInput | Prisma.AssetErrorCreateManyFixedByInput[]
  skipDuplicates?: boolean
}

export type AssetErrorUpsertWithWhereUniqueWithoutAddedByInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetErrorUpdateWithoutAddedByInput, Prisma.AssetErrorUncheckedUpdateWithoutAddedByInput>
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutAddedByInput, Prisma.AssetErrorUncheckedCreateWithoutAddedByInput>
}

export type AssetErrorUpdateWithWhereUniqueWithoutAddedByInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateWithoutAddedByInput, Prisma.AssetErrorUncheckedUpdateWithoutAddedByInput>
}

export type AssetErrorUpdateManyWithWhereWithoutAddedByInput = {
  where: Prisma.AssetErrorScalarWhereInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateManyMutationInput, Prisma.AssetErrorUncheckedUpdateManyWithoutAddedByInput>
}

export type AssetErrorUpsertWithWhereUniqueWithoutFixedByInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetErrorUpdateWithoutFixedByInput, Prisma.AssetErrorUncheckedUpdateWithoutFixedByInput>
  create: Prisma.XOR<Prisma.AssetErrorCreateWithoutFixedByInput, Prisma.AssetErrorUncheckedCreateWithoutFixedByInput>
}

export type AssetErrorUpdateWithWhereUniqueWithoutFixedByInput = {
  where: Prisma.AssetErrorWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateWithoutFixedByInput, Prisma.AssetErrorUncheckedUpdateWithoutFixedByInput>
}

export type AssetErrorUpdateManyWithWhereWithoutFixedByInput = {
  where: Prisma.AssetErrorScalarWhereInput
  data: Prisma.XOR<Prisma.AssetErrorUpdateManyMutationInput, Prisma.AssetErrorUncheckedUpdateManyWithoutFixedByInput>
}

export type AssetErrorCreateManyAssetInput = {
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorUpdateWithoutAssetInput = {
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  error?: Prisma.ErrorUpdateOneRequiredWithoutAsset_errorsNestedInput
  addedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_errors_addedNestedInput
  fixedBy?: Prisma.UserUpdateOneWithoutAsset_errors_fixedNestedInput
}

export type AssetErrorUncheckedUpdateWithoutAssetInput = {
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorUncheckedUpdateManyWithoutAssetInput = {
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorCreateManyErrorInput = {
  asset_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorUpdateWithoutErrorInput = {
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_errorsNestedInput
  addedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_errors_addedNestedInput
  fixedBy?: Prisma.UserUpdateOneWithoutAsset_errors_fixedNestedInput
}

export type AssetErrorUncheckedUpdateWithoutErrorInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorUncheckedUpdateManyWithoutErrorInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorCreateManyAddedByInput = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_at: Date | string
  fixed_by?: number | null
  fixed_at?: Date | string | null
}

export type AssetErrorCreateManyFixedByInput = {
  asset_id: number
  error_id: number
  is_fixed: boolean
  added_by: number
  added_at: Date | string
  fixed_at?: Date | string | null
}

export type AssetErrorUpdateWithoutAddedByInput = {
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_errorsNestedInput
  error?: Prisma.ErrorUpdateOneRequiredWithoutAsset_errorsNestedInput
  fixedBy?: Prisma.UserUpdateOneWithoutAsset_errors_fixedNestedInput
}

export type AssetErrorUncheckedUpdateWithoutAddedByInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorUncheckedUpdateManyWithoutAddedByInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_by?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorUpdateWithoutFixedByInput = {
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_errorsNestedInput
  error?: Prisma.ErrorUpdateOneRequiredWithoutAsset_errorsNestedInput
  addedBy?: Prisma.UserUpdateOneRequiredWithoutAsset_errors_addedNestedInput
}

export type AssetErrorUncheckedUpdateWithoutFixedByInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type AssetErrorUncheckedUpdateManyWithoutFixedByInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  error_id?: Prisma.IntFieldUpdateOperationsInput | number
  is_fixed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  added_by?: Prisma.IntFieldUpdateOperationsInput | number
  added_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fixed_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type AssetErrorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  error_id?: boolean
  is_fixed?: boolean
  added_by?: boolean
  added_at?: boolean
  fixed_by?: boolean
  fixed_at?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  error?: boolean | Prisma.ErrorDefaultArgs<ExtArgs>
  addedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  fixedBy?: boolean | Prisma.AssetError$fixedByArgs<ExtArgs>
}, ExtArgs["result"]["assetError"]>

export type AssetErrorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  error_id?: boolean
  is_fixed?: boolean
  added_by?: boolean
  added_at?: boolean
  fixed_by?: boolean
  fixed_at?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  error?: boolean | Prisma.ErrorDefaultArgs<ExtArgs>
  addedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  fixedBy?: boolean | Prisma.AssetError$fixedByArgs<ExtArgs>
}, ExtArgs["result"]["assetError"]>

export type AssetErrorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  error_id?: boolean
  is_fixed?: boolean
  added_by?: boolean
  added_at?: boolean
  fixed_by?: boolean
  fixed_at?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  error?: boolean | Prisma.ErrorDefaultArgs<ExtArgs>
  addedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  fixedBy?: boolean | Prisma.AssetError$fixedByArgs<ExtArgs>
}, ExtArgs["result"]["assetError"]>

export type AssetErrorSelectScalar = {
  asset_id?: boolean
  error_id?: boolean
  is_fixed?: boolean
  added_by?: boolean
  added_at?: boolean
  fixed_by?: boolean
  fixed_at?: boolean
}

export type AssetErrorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"asset_id" | "error_id" | "is_fixed" | "added_by" | "added_at" | "fixed_by" | "fixed_at", ExtArgs["result"]["assetError"]>
export type AssetErrorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  error?: boolean | Prisma.ErrorDefaultArgs<ExtArgs>
  addedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  fixedBy?: boolean | Prisma.AssetError$fixedByArgs<ExtArgs>
}
export type AssetErrorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  error?: boolean | Prisma.ErrorDefaultArgs<ExtArgs>
  addedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  fixedBy?: boolean | Prisma.AssetError$fixedByArgs<ExtArgs>
}
export type AssetErrorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  error?: boolean | Prisma.ErrorDefaultArgs<ExtArgs>
  addedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  fixedBy?: boolean | Prisma.AssetError$fixedByArgs<ExtArgs>
}

export type $AssetErrorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AssetError"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
    error: Prisma.$ErrorPayload<ExtArgs>
    addedBy: Prisma.$UserPayload<ExtArgs>
    fixedBy: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    asset_id: number
    error_id: number
    is_fixed: boolean
    added_by: number
    added_at: Date
    fixed_by: number | null
    fixed_at: Date | null
  }, ExtArgs["result"]["assetError"]>
  composites: {}
}

export type AssetErrorGetPayload<S extends boolean | null | undefined | AssetErrorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload, S>

export type AssetErrorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssetErrorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssetErrorCountAggregateInputType | true
  }

export interface AssetErrorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetError'], meta: { name: 'AssetError' } }
  /**
   * Find zero or one AssetError that matches the filter.
   * @param {AssetErrorFindUniqueArgs} args - Arguments to find a AssetError
   * @example
   * // Get one AssetError
   * const assetError = await prisma.assetError.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssetErrorFindUniqueArgs>(args: Prisma.SelectSubset<T, AssetErrorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AssetError that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssetErrorFindUniqueOrThrowArgs} args - Arguments to find a AssetError
   * @example
   * // Get one AssetError
   * const assetError = await prisma.assetError.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssetErrorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssetErrorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetError that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorFindFirstArgs} args - Arguments to find a AssetError
   * @example
   * // Get one AssetError
   * const assetError = await prisma.assetError.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssetErrorFindFirstArgs>(args?: Prisma.SelectSubset<T, AssetErrorFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetError that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorFindFirstOrThrowArgs} args - Arguments to find a AssetError
   * @example
   * // Get one AssetError
   * const assetError = await prisma.assetError.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssetErrorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssetErrorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AssetErrors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssetErrors
   * const assetErrors = await prisma.assetError.findMany()
   * 
   * // Get first 10 AssetErrors
   * const assetErrors = await prisma.assetError.findMany({ take: 10 })
   * 
   * // Only select the `asset_id`
   * const assetErrorWithAsset_idOnly = await prisma.assetError.findMany({ select: { asset_id: true } })
   * 
   */
  findMany<T extends AssetErrorFindManyArgs>(args?: Prisma.SelectSubset<T, AssetErrorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AssetError.
   * @param {AssetErrorCreateArgs} args - Arguments to create a AssetError.
   * @example
   * // Create one AssetError
   * const AssetError = await prisma.assetError.create({
   *   data: {
   *     // ... data to create a AssetError
   *   }
   * })
   * 
   */
  create<T extends AssetErrorCreateArgs>(args: Prisma.SelectSubset<T, AssetErrorCreateArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AssetErrors.
   * @param {AssetErrorCreateManyArgs} args - Arguments to create many AssetErrors.
   * @example
   * // Create many AssetErrors
   * const assetError = await prisma.assetError.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssetErrorCreateManyArgs>(args?: Prisma.SelectSubset<T, AssetErrorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AssetErrors and returns the data saved in the database.
   * @param {AssetErrorCreateManyAndReturnArgs} args - Arguments to create many AssetErrors.
   * @example
   * // Create many AssetErrors
   * const assetError = await prisma.assetError.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AssetErrors and only return the `asset_id`
   * const assetErrorWithAsset_idOnly = await prisma.assetError.createManyAndReturn({
   *   select: { asset_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssetErrorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssetErrorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AssetError.
   * @param {AssetErrorDeleteArgs} args - Arguments to delete one AssetError.
   * @example
   * // Delete one AssetError
   * const AssetError = await prisma.assetError.delete({
   *   where: {
   *     // ... filter to delete one AssetError
   *   }
   * })
   * 
   */
  delete<T extends AssetErrorDeleteArgs>(args: Prisma.SelectSubset<T, AssetErrorDeleteArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AssetError.
   * @param {AssetErrorUpdateArgs} args - Arguments to update one AssetError.
   * @example
   * // Update one AssetError
   * const assetError = await prisma.assetError.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssetErrorUpdateArgs>(args: Prisma.SelectSubset<T, AssetErrorUpdateArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AssetErrors.
   * @param {AssetErrorDeleteManyArgs} args - Arguments to filter AssetErrors to delete.
   * @example
   * // Delete a few AssetErrors
   * const { count } = await prisma.assetError.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssetErrorDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssetErrorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetErrors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssetErrors
   * const assetError = await prisma.assetError.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssetErrorUpdateManyArgs>(args: Prisma.SelectSubset<T, AssetErrorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetErrors and returns the data updated in the database.
   * @param {AssetErrorUpdateManyAndReturnArgs} args - Arguments to update many AssetErrors.
   * @example
   * // Update many AssetErrors
   * const assetError = await prisma.assetError.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AssetErrors and only return the `asset_id`
   * const assetErrorWithAsset_idOnly = await prisma.assetError.updateManyAndReturn({
   *   select: { asset_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssetErrorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssetErrorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AssetError.
   * @param {AssetErrorUpsertArgs} args - Arguments to update or create a AssetError.
   * @example
   * // Update or create a AssetError
   * const assetError = await prisma.assetError.upsert({
   *   create: {
   *     // ... data to create a AssetError
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssetError we want to update
   *   }
   * })
   */
  upsert<T extends AssetErrorUpsertArgs>(args: Prisma.SelectSubset<T, AssetErrorUpsertArgs<ExtArgs>>): Prisma.Prisma__AssetErrorClient<runtime.Types.Result.GetResult<Prisma.$AssetErrorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AssetErrors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorCountArgs} args - Arguments to filter AssetErrors to count.
   * @example
   * // Count the number of AssetErrors
   * const count = await prisma.assetError.count({
   *   where: {
   *     // ... the filter for the AssetErrors we want to count
   *   }
   * })
  **/
  count<T extends AssetErrorCountArgs>(
    args?: Prisma.Subset<T, AssetErrorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssetErrorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AssetError.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssetErrorAggregateArgs>(args: Prisma.Subset<T, AssetErrorAggregateArgs>): Prisma.PrismaPromise<GetAssetErrorAggregateType<T>>

  /**
   * Group by AssetError.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetErrorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssetErrorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssetErrorGroupByArgs['orderBy'] }
      : { orderBy?: AssetErrorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssetErrorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetErrorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AssetError model
 */
readonly fields: AssetErrorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssetError.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssetErrorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  error<T extends Prisma.ErrorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ErrorDefaultArgs<ExtArgs>>): Prisma.Prisma__ErrorClient<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  addedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  fixedBy<T extends Prisma.AssetError$fixedByArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetError$fixedByArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AssetError model
 */
export interface AssetErrorFieldRefs {
  readonly asset_id: Prisma.FieldRef<"AssetError", 'Int'>
  readonly error_id: Prisma.FieldRef<"AssetError", 'Int'>
  readonly is_fixed: Prisma.FieldRef<"AssetError", 'Boolean'>
  readonly added_by: Prisma.FieldRef<"AssetError", 'Int'>
  readonly added_at: Prisma.FieldRef<"AssetError", 'DateTime'>
  readonly fixed_by: Prisma.FieldRef<"AssetError", 'Int'>
  readonly fixed_at: Prisma.FieldRef<"AssetError", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AssetError findUnique
 */
export type AssetErrorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * Filter, which AssetError to fetch.
   */
  where: Prisma.AssetErrorWhereUniqueInput
}

/**
 * AssetError findUniqueOrThrow
 */
export type AssetErrorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * Filter, which AssetError to fetch.
   */
  where: Prisma.AssetErrorWhereUniqueInput
}

/**
 * AssetError findFirst
 */
export type AssetErrorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * Filter, which AssetError to fetch.
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetErrors to fetch.
   */
  orderBy?: Prisma.AssetErrorOrderByWithRelationInput | Prisma.AssetErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetErrors.
   */
  cursor?: Prisma.AssetErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetErrors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetErrors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetErrors.
   */
  distinct?: Prisma.AssetErrorScalarFieldEnum | Prisma.AssetErrorScalarFieldEnum[]
}

/**
 * AssetError findFirstOrThrow
 */
export type AssetErrorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * Filter, which AssetError to fetch.
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetErrors to fetch.
   */
  orderBy?: Prisma.AssetErrorOrderByWithRelationInput | Prisma.AssetErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetErrors.
   */
  cursor?: Prisma.AssetErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetErrors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetErrors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetErrors.
   */
  distinct?: Prisma.AssetErrorScalarFieldEnum | Prisma.AssetErrorScalarFieldEnum[]
}

/**
 * AssetError findMany
 */
export type AssetErrorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * Filter, which AssetErrors to fetch.
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetErrors to fetch.
   */
  orderBy?: Prisma.AssetErrorOrderByWithRelationInput | Prisma.AssetErrorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AssetErrors.
   */
  cursor?: Prisma.AssetErrorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetErrors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetErrors.
   */
  skip?: number
  distinct?: Prisma.AssetErrorScalarFieldEnum | Prisma.AssetErrorScalarFieldEnum[]
}

/**
 * AssetError create
 */
export type AssetErrorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * The data needed to create a AssetError.
   */
  data: Prisma.XOR<Prisma.AssetErrorCreateInput, Prisma.AssetErrorUncheckedCreateInput>
}

/**
 * AssetError createMany
 */
export type AssetErrorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AssetErrors.
   */
  data: Prisma.AssetErrorCreateManyInput | Prisma.AssetErrorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetError createManyAndReturn
 */
export type AssetErrorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * The data used to create many AssetErrors.
   */
  data: Prisma.AssetErrorCreateManyInput | Prisma.AssetErrorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AssetError update
 */
export type AssetErrorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * The data needed to update a AssetError.
   */
  data: Prisma.XOR<Prisma.AssetErrorUpdateInput, Prisma.AssetErrorUncheckedUpdateInput>
  /**
   * Choose, which AssetError to update.
   */
  where: Prisma.AssetErrorWhereUniqueInput
}

/**
 * AssetError updateMany
 */
export type AssetErrorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AssetErrors.
   */
  data: Prisma.XOR<Prisma.AssetErrorUpdateManyMutationInput, Prisma.AssetErrorUncheckedUpdateManyInput>
  /**
   * Filter which AssetErrors to update
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * Limit how many AssetErrors to update.
   */
  limit?: number
}

/**
 * AssetError updateManyAndReturn
 */
export type AssetErrorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * The data used to update AssetErrors.
   */
  data: Prisma.XOR<Prisma.AssetErrorUpdateManyMutationInput, Prisma.AssetErrorUncheckedUpdateManyInput>
  /**
   * Filter which AssetErrors to update
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * Limit how many AssetErrors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AssetError upsert
 */
export type AssetErrorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * The filter to search for the AssetError to update in case it exists.
   */
  where: Prisma.AssetErrorWhereUniqueInput
  /**
   * In case the AssetError found by the `where` argument doesn't exist, create a new AssetError with this data.
   */
  create: Prisma.XOR<Prisma.AssetErrorCreateInput, Prisma.AssetErrorUncheckedCreateInput>
  /**
   * In case the AssetError was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssetErrorUpdateInput, Prisma.AssetErrorUncheckedUpdateInput>
}

/**
 * AssetError delete
 */
export type AssetErrorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
  /**
   * Filter which AssetError to delete.
   */
  where: Prisma.AssetErrorWhereUniqueInput
}

/**
 * AssetError deleteMany
 */
export type AssetErrorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetErrors to delete
   */
  where?: Prisma.AssetErrorWhereInput
  /**
   * Limit how many AssetErrors to delete.
   */
  limit?: number
}

/**
 * AssetError.fixedBy
 */
export type AssetError$fixedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * AssetError without action
 */
export type AssetErrorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetError
   */
  select?: Prisma.AssetErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetError
   */
  omit?: Prisma.AssetErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetErrorInclude<ExtArgs> | null
}
