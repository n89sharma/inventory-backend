
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Brand` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Brand
 * 
 */
export type BrandModel = runtime.Types.Result.DefaultSelection<Prisma.$BrandPayload>

export type AggregateBrand = {
  _count: BrandCountAggregateOutputType | null
  _avg: BrandAvgAggregateOutputType | null
  _sum: BrandSumAggregateOutputType | null
  _min: BrandMinAggregateOutputType | null
  _max: BrandMaxAggregateOutputType | null
}

export type BrandAvgAggregateOutputType = {
  id: number | null
}

export type BrandSumAggregateOutputType = {
  id: number | null
}

export type BrandMinAggregateOutputType = {
  id: number | null
  name: string | null
}

export type BrandMaxAggregateOutputType = {
  id: number | null
  name: string | null
}

export type BrandCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type BrandAvgAggregateInputType = {
  id?: true
}

export type BrandSumAggregateInputType = {
  id?: true
}

export type BrandMinAggregateInputType = {
  id?: true
  name?: true
}

export type BrandMaxAggregateInputType = {
  id?: true
  name?: true
}

export type BrandCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type BrandAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Brand to aggregate.
   */
  where?: Prisma.BrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Brands to fetch.
   */
  orderBy?: Prisma.BrandOrderByWithRelationInput | Prisma.BrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Brands
  **/
  _count?: true | BrandCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BrandAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BrandSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BrandMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BrandMaxAggregateInputType
}

export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
      [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBrand[P]>
    : Prisma.GetScalarType<T[P], AggregateBrand[P]>
}




export type BrandGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BrandWhereInput
  orderBy?: Prisma.BrandOrderByWithAggregationInput | Prisma.BrandOrderByWithAggregationInput[]
  by: Prisma.BrandScalarFieldEnum[] | Prisma.BrandScalarFieldEnum
  having?: Prisma.BrandScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BrandCountAggregateInputType | true
  _avg?: BrandAvgAggregateInputType
  _sum?: BrandSumAggregateInputType
  _min?: BrandMinAggregateInputType
  _max?: BrandMaxAggregateInputType
}

export type BrandGroupByOutputType = {
  id: number
  name: string
  _count: BrandCountAggregateOutputType | null
  _avg: BrandAvgAggregateOutputType | null
  _sum: BrandSumAggregateOutputType | null
  _min: BrandMinAggregateOutputType | null
  _max: BrandMaxAggregateOutputType | null
}

type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BrandGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BrandGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BrandGroupByOutputType[P]>
      }
    >
  > 



export type BrandWhereInput = {
  AND?: Prisma.BrandWhereInput | Prisma.BrandWhereInput[]
  OR?: Prisma.BrandWhereInput[]
  NOT?: Prisma.BrandWhereInput | Prisma.BrandWhereInput[]
  id?: Prisma.IntFilter<"Brand"> | number
  name?: Prisma.StringFilter<"Brand"> | string
  models?: Prisma.ModelListRelationFilter
  errorCategories?: Prisma.ErrorCategoryListRelationFilter
  assets?: Prisma.AssetListRelationFilter
}

export type BrandOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  models?: Prisma.ModelOrderByRelationAggregateInput
  errorCategories?: Prisma.ErrorCategoryOrderByRelationAggregateInput
  assets?: Prisma.AssetOrderByRelationAggregateInput
}

export type BrandWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.BrandWhereInput | Prisma.BrandWhereInput[]
  OR?: Prisma.BrandWhereInput[]
  NOT?: Prisma.BrandWhereInput | Prisma.BrandWhereInput[]
  models?: Prisma.ModelListRelationFilter
  errorCategories?: Prisma.ErrorCategoryListRelationFilter
  assets?: Prisma.AssetListRelationFilter
}, "id" | "name">

export type BrandOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.BrandCountOrderByAggregateInput
  _avg?: Prisma.BrandAvgOrderByAggregateInput
  _max?: Prisma.BrandMaxOrderByAggregateInput
  _min?: Prisma.BrandMinOrderByAggregateInput
  _sum?: Prisma.BrandSumOrderByAggregateInput
}

export type BrandScalarWhereWithAggregatesInput = {
  AND?: Prisma.BrandScalarWhereWithAggregatesInput | Prisma.BrandScalarWhereWithAggregatesInput[]
  OR?: Prisma.BrandScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BrandScalarWhereWithAggregatesInput | Prisma.BrandScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Brand"> | number
  name?: Prisma.StringWithAggregatesFilter<"Brand"> | string
}

export type BrandCreateInput = {
  name: string
  models?: Prisma.ModelCreateNestedManyWithoutBrandInput
  errorCategories?: Prisma.ErrorCategoryCreateNestedManyWithoutBrandInput
  assets?: Prisma.AssetCreateNestedManyWithoutBrandInput
}

export type BrandUncheckedCreateInput = {
  id?: number
  name: string
  models?: Prisma.ModelUncheckedCreateNestedManyWithoutBrandInput
  errorCategories?: Prisma.ErrorCategoryUncheckedCreateNestedManyWithoutBrandInput
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutBrandInput
}

export type BrandUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUpdateManyWithoutBrandNestedInput
  errorCategories?: Prisma.ErrorCategoryUpdateManyWithoutBrandNestedInput
  assets?: Prisma.AssetUpdateManyWithoutBrandNestedInput
}

export type BrandUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUncheckedUpdateManyWithoutBrandNestedInput
  errorCategories?: Prisma.ErrorCategoryUncheckedUpdateManyWithoutBrandNestedInput
  assets?: Prisma.AssetUncheckedUpdateManyWithoutBrandNestedInput
}

export type BrandCreateManyInput = {
  id?: number
  name: string
}

export type BrandUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BrandUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type BrandScalarRelationFilter = {
  is?: Prisma.BrandWhereInput
  isNot?: Prisma.BrandWhereInput
}

export type BrandCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type BrandAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type BrandMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type BrandMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type BrandSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type BrandCreateNestedOneWithoutAssetsInput = {
  create?: Prisma.XOR<Prisma.BrandCreateWithoutAssetsInput, Prisma.BrandUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.BrandCreateOrConnectWithoutAssetsInput
  connect?: Prisma.BrandWhereUniqueInput
}

export type BrandUpdateOneRequiredWithoutAssetsNestedInput = {
  create?: Prisma.XOR<Prisma.BrandCreateWithoutAssetsInput, Prisma.BrandUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.BrandCreateOrConnectWithoutAssetsInput
  upsert?: Prisma.BrandUpsertWithoutAssetsInput
  connect?: Prisma.BrandWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BrandUpdateToOneWithWhereWithoutAssetsInput, Prisma.BrandUpdateWithoutAssetsInput>, Prisma.BrandUncheckedUpdateWithoutAssetsInput>
}

export type BrandCreateNestedOneWithoutErrorCategoriesInput = {
  create?: Prisma.XOR<Prisma.BrandCreateWithoutErrorCategoriesInput, Prisma.BrandUncheckedCreateWithoutErrorCategoriesInput>
  connectOrCreate?: Prisma.BrandCreateOrConnectWithoutErrorCategoriesInput
  connect?: Prisma.BrandWhereUniqueInput
}

export type BrandUpdateOneRequiredWithoutErrorCategoriesNestedInput = {
  create?: Prisma.XOR<Prisma.BrandCreateWithoutErrorCategoriesInput, Prisma.BrandUncheckedCreateWithoutErrorCategoriesInput>
  connectOrCreate?: Prisma.BrandCreateOrConnectWithoutErrorCategoriesInput
  upsert?: Prisma.BrandUpsertWithoutErrorCategoriesInput
  connect?: Prisma.BrandWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BrandUpdateToOneWithWhereWithoutErrorCategoriesInput, Prisma.BrandUpdateWithoutErrorCategoriesInput>, Prisma.BrandUncheckedUpdateWithoutErrorCategoriesInput>
}

export type BrandCreateNestedOneWithoutModelsInput = {
  create?: Prisma.XOR<Prisma.BrandCreateWithoutModelsInput, Prisma.BrandUncheckedCreateWithoutModelsInput>
  connectOrCreate?: Prisma.BrandCreateOrConnectWithoutModelsInput
  connect?: Prisma.BrandWhereUniqueInput
}

export type BrandUpdateOneRequiredWithoutModelsNestedInput = {
  create?: Prisma.XOR<Prisma.BrandCreateWithoutModelsInput, Prisma.BrandUncheckedCreateWithoutModelsInput>
  connectOrCreate?: Prisma.BrandCreateOrConnectWithoutModelsInput
  upsert?: Prisma.BrandUpsertWithoutModelsInput
  connect?: Prisma.BrandWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BrandUpdateToOneWithWhereWithoutModelsInput, Prisma.BrandUpdateWithoutModelsInput>, Prisma.BrandUncheckedUpdateWithoutModelsInput>
}

export type BrandCreateWithoutAssetsInput = {
  name: string
  models?: Prisma.ModelCreateNestedManyWithoutBrandInput
  errorCategories?: Prisma.ErrorCategoryCreateNestedManyWithoutBrandInput
}

export type BrandUncheckedCreateWithoutAssetsInput = {
  id?: number
  name: string
  models?: Prisma.ModelUncheckedCreateNestedManyWithoutBrandInput
  errorCategories?: Prisma.ErrorCategoryUncheckedCreateNestedManyWithoutBrandInput
}

export type BrandCreateOrConnectWithoutAssetsInput = {
  where: Prisma.BrandWhereUniqueInput
  create: Prisma.XOR<Prisma.BrandCreateWithoutAssetsInput, Prisma.BrandUncheckedCreateWithoutAssetsInput>
}

export type BrandUpsertWithoutAssetsInput = {
  update: Prisma.XOR<Prisma.BrandUpdateWithoutAssetsInput, Prisma.BrandUncheckedUpdateWithoutAssetsInput>
  create: Prisma.XOR<Prisma.BrandCreateWithoutAssetsInput, Prisma.BrandUncheckedCreateWithoutAssetsInput>
  where?: Prisma.BrandWhereInput
}

export type BrandUpdateToOneWithWhereWithoutAssetsInput = {
  where?: Prisma.BrandWhereInput
  data: Prisma.XOR<Prisma.BrandUpdateWithoutAssetsInput, Prisma.BrandUncheckedUpdateWithoutAssetsInput>
}

export type BrandUpdateWithoutAssetsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUpdateManyWithoutBrandNestedInput
  errorCategories?: Prisma.ErrorCategoryUpdateManyWithoutBrandNestedInput
}

export type BrandUncheckedUpdateWithoutAssetsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUncheckedUpdateManyWithoutBrandNestedInput
  errorCategories?: Prisma.ErrorCategoryUncheckedUpdateManyWithoutBrandNestedInput
}

export type BrandCreateWithoutErrorCategoriesInput = {
  name: string
  models?: Prisma.ModelCreateNestedManyWithoutBrandInput
  assets?: Prisma.AssetCreateNestedManyWithoutBrandInput
}

export type BrandUncheckedCreateWithoutErrorCategoriesInput = {
  id?: number
  name: string
  models?: Prisma.ModelUncheckedCreateNestedManyWithoutBrandInput
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutBrandInput
}

export type BrandCreateOrConnectWithoutErrorCategoriesInput = {
  where: Prisma.BrandWhereUniqueInput
  create: Prisma.XOR<Prisma.BrandCreateWithoutErrorCategoriesInput, Prisma.BrandUncheckedCreateWithoutErrorCategoriesInput>
}

export type BrandUpsertWithoutErrorCategoriesInput = {
  update: Prisma.XOR<Prisma.BrandUpdateWithoutErrorCategoriesInput, Prisma.BrandUncheckedUpdateWithoutErrorCategoriesInput>
  create: Prisma.XOR<Prisma.BrandCreateWithoutErrorCategoriesInput, Prisma.BrandUncheckedCreateWithoutErrorCategoriesInput>
  where?: Prisma.BrandWhereInput
}

export type BrandUpdateToOneWithWhereWithoutErrorCategoriesInput = {
  where?: Prisma.BrandWhereInput
  data: Prisma.XOR<Prisma.BrandUpdateWithoutErrorCategoriesInput, Prisma.BrandUncheckedUpdateWithoutErrorCategoriesInput>
}

export type BrandUpdateWithoutErrorCategoriesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUpdateManyWithoutBrandNestedInput
  assets?: Prisma.AssetUpdateManyWithoutBrandNestedInput
}

export type BrandUncheckedUpdateWithoutErrorCategoriesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  models?: Prisma.ModelUncheckedUpdateManyWithoutBrandNestedInput
  assets?: Prisma.AssetUncheckedUpdateManyWithoutBrandNestedInput
}

export type BrandCreateWithoutModelsInput = {
  name: string
  errorCategories?: Prisma.ErrorCategoryCreateNestedManyWithoutBrandInput
  assets?: Prisma.AssetCreateNestedManyWithoutBrandInput
}

export type BrandUncheckedCreateWithoutModelsInput = {
  id?: number
  name: string
  errorCategories?: Prisma.ErrorCategoryUncheckedCreateNestedManyWithoutBrandInput
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutBrandInput
}

export type BrandCreateOrConnectWithoutModelsInput = {
  where: Prisma.BrandWhereUniqueInput
  create: Prisma.XOR<Prisma.BrandCreateWithoutModelsInput, Prisma.BrandUncheckedCreateWithoutModelsInput>
}

export type BrandUpsertWithoutModelsInput = {
  update: Prisma.XOR<Prisma.BrandUpdateWithoutModelsInput, Prisma.BrandUncheckedUpdateWithoutModelsInput>
  create: Prisma.XOR<Prisma.BrandCreateWithoutModelsInput, Prisma.BrandUncheckedCreateWithoutModelsInput>
  where?: Prisma.BrandWhereInput
}

export type BrandUpdateToOneWithWhereWithoutModelsInput = {
  where?: Prisma.BrandWhereInput
  data: Prisma.XOR<Prisma.BrandUpdateWithoutModelsInput, Prisma.BrandUncheckedUpdateWithoutModelsInput>
}

export type BrandUpdateWithoutModelsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  errorCategories?: Prisma.ErrorCategoryUpdateManyWithoutBrandNestedInput
  assets?: Prisma.AssetUpdateManyWithoutBrandNestedInput
}

export type BrandUncheckedUpdateWithoutModelsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  errorCategories?: Prisma.ErrorCategoryUncheckedUpdateManyWithoutBrandNestedInput
  assets?: Prisma.AssetUncheckedUpdateManyWithoutBrandNestedInput
}


/**
 * Count Type BrandCountOutputType
 */

export type BrandCountOutputType = {
  models: number
  errorCategories: number
  assets: number
}

export type BrandCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  models?: boolean | BrandCountOutputTypeCountModelsArgs
  errorCategories?: boolean | BrandCountOutputTypeCountErrorCategoriesArgs
  assets?: boolean | BrandCountOutputTypeCountAssetsArgs
}

/**
 * BrandCountOutputType without action
 */
export type BrandCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BrandCountOutputType
   */
  select?: Prisma.BrandCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BrandCountOutputType without action
 */
export type BrandCountOutputTypeCountModelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModelWhereInput
}

/**
 * BrandCountOutputType without action
 */
export type BrandCountOutputTypeCountErrorCategoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ErrorCategoryWhereInput
}

/**
 * BrandCountOutputType without action
 */
export type BrandCountOutputTypeCountAssetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetWhereInput
}


export type BrandSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  models?: boolean | Prisma.Brand$modelsArgs<ExtArgs>
  errorCategories?: boolean | Prisma.Brand$errorCategoriesArgs<ExtArgs>
  assets?: boolean | Prisma.Brand$assetsArgs<ExtArgs>
  _count?: boolean | Prisma.BrandCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["brand"]>

export type BrandSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["brand"]>

export type BrandSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["brand"]>

export type BrandSelectScalar = {
  id?: boolean
  name?: boolean
}

export type BrandOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["brand"]>
export type BrandInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  models?: boolean | Prisma.Brand$modelsArgs<ExtArgs>
  errorCategories?: boolean | Prisma.Brand$errorCategoriesArgs<ExtArgs>
  assets?: boolean | Prisma.Brand$assetsArgs<ExtArgs>
  _count?: boolean | Prisma.BrandCountOutputTypeDefaultArgs<ExtArgs>
}
export type BrandIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type BrandIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $BrandPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Brand"
  objects: {
    models: Prisma.$ModelPayload<ExtArgs>[]
    errorCategories: Prisma.$ErrorCategoryPayload<ExtArgs>[]
    assets: Prisma.$AssetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
  }, ExtArgs["result"]["brand"]>
  composites: {}
}

export type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BrandPayload, S>

export type BrandCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BrandCountAggregateInputType | true
  }

export interface BrandDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
  /**
   * Find zero or one Brand that matches the filter.
   * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
   * @example
   * // Get one Brand
   * const brand = await prisma.brand.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BrandFindUniqueArgs>(args: Prisma.SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
   * @example
   * // Get one Brand
   * const brand = await prisma.brand.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Brand that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandFindFirstArgs} args - Arguments to find a Brand
   * @example
   * // Get one Brand
   * const brand = await prisma.brand.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BrandFindFirstArgs>(args?: Prisma.SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Brand that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
   * @example
   * // Get one Brand
   * const brand = await prisma.brand.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Brands that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Brands
   * const brands = await prisma.brand.findMany()
   * 
   * // Get first 10 Brands
   * const brands = await prisma.brand.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BrandFindManyArgs>(args?: Prisma.SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Brand.
   * @param {BrandCreateArgs} args - Arguments to create a Brand.
   * @example
   * // Create one Brand
   * const Brand = await prisma.brand.create({
   *   data: {
   *     // ... data to create a Brand
   *   }
   * })
   * 
   */
  create<T extends BrandCreateArgs>(args: Prisma.SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Brands.
   * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
   * @example
   * // Create many Brands
   * const brand = await prisma.brand.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BrandCreateManyArgs>(args?: Prisma.SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Brands and returns the data saved in the database.
   * @param {BrandCreateManyAndReturnArgs} args - Arguments to create many Brands.
   * @example
   * // Create many Brands
   * const brand = await prisma.brand.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Brands and only return the `id`
   * const brandWithIdOnly = await prisma.brand.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BrandCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BrandCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Brand.
   * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
   * @example
   * // Delete one Brand
   * const Brand = await prisma.brand.delete({
   *   where: {
   *     // ... filter to delete one Brand
   *   }
   * })
   * 
   */
  delete<T extends BrandDeleteArgs>(args: Prisma.SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Brand.
   * @param {BrandUpdateArgs} args - Arguments to update one Brand.
   * @example
   * // Update one Brand
   * const brand = await prisma.brand.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BrandUpdateArgs>(args: Prisma.SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Brands.
   * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
   * @example
   * // Delete a few Brands
   * const { count } = await prisma.brand.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BrandDeleteManyArgs>(args?: Prisma.SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Brands
   * const brand = await prisma.brand.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BrandUpdateManyArgs>(args: Prisma.SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Brands and returns the data updated in the database.
   * @param {BrandUpdateManyAndReturnArgs} args - Arguments to update many Brands.
   * @example
   * // Update many Brands
   * const brand = await prisma.brand.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Brands and only return the `id`
   * const brandWithIdOnly = await prisma.brand.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BrandUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BrandUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Brand.
   * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
   * @example
   * // Update or create a Brand
   * const brand = await prisma.brand.upsert({
   *   create: {
   *     // ... data to create a Brand
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Brand we want to update
   *   }
   * })
   */
  upsert<T extends BrandUpsertArgs>(args: Prisma.SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Brands.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandCountArgs} args - Arguments to filter Brands to count.
   * @example
   * // Count the number of Brands
   * const count = await prisma.brand.count({
   *   where: {
   *     // ... the filter for the Brands we want to count
   *   }
   * })
  **/
  count<T extends BrandCountArgs>(
    args?: Prisma.Subset<T, BrandCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BrandCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Brand.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BrandAggregateArgs>(args: Prisma.Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

  /**
   * Group by Brand.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BrandGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BrandGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BrandGroupByArgs['orderBy'] }
      : { orderBy?: BrandGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Brand model
 */
readonly fields: BrandFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Brand.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BrandClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  models<T extends Prisma.Brand$modelsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Brand$modelsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  errorCategories<T extends Prisma.Brand$errorCategoriesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Brand$errorCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  assets<T extends Prisma.Brand$assetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Brand$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Brand model
 */
export interface BrandFieldRefs {
  readonly id: Prisma.FieldRef<"Brand", 'Int'>
  readonly name: Prisma.FieldRef<"Brand", 'String'>
}
    

// Custom InputTypes
/**
 * Brand findUnique
 */
export type BrandFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * Filter, which Brand to fetch.
   */
  where: Prisma.BrandWhereUniqueInput
}

/**
 * Brand findUniqueOrThrow
 */
export type BrandFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * Filter, which Brand to fetch.
   */
  where: Prisma.BrandWhereUniqueInput
}

/**
 * Brand findFirst
 */
export type BrandFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * Filter, which Brand to fetch.
   */
  where?: Prisma.BrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Brands to fetch.
   */
  orderBy?: Prisma.BrandOrderByWithRelationInput | Prisma.BrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Brands.
   */
  cursor?: Prisma.BrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Brands.
   */
  distinct?: Prisma.BrandScalarFieldEnum | Prisma.BrandScalarFieldEnum[]
}

/**
 * Brand findFirstOrThrow
 */
export type BrandFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * Filter, which Brand to fetch.
   */
  where?: Prisma.BrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Brands to fetch.
   */
  orderBy?: Prisma.BrandOrderByWithRelationInput | Prisma.BrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Brands.
   */
  cursor?: Prisma.BrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Brands.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Brands.
   */
  distinct?: Prisma.BrandScalarFieldEnum | Prisma.BrandScalarFieldEnum[]
}

/**
 * Brand findMany
 */
export type BrandFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * Filter, which Brands to fetch.
   */
  where?: Prisma.BrandWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Brands to fetch.
   */
  orderBy?: Prisma.BrandOrderByWithRelationInput | Prisma.BrandOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Brands.
   */
  cursor?: Prisma.BrandWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Brands from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Brands.
   */
  skip?: number
  distinct?: Prisma.BrandScalarFieldEnum | Prisma.BrandScalarFieldEnum[]
}

/**
 * Brand create
 */
export type BrandCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * The data needed to create a Brand.
   */
  data: Prisma.XOR<Prisma.BrandCreateInput, Prisma.BrandUncheckedCreateInput>
}

/**
 * Brand createMany
 */
export type BrandCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Brands.
   */
  data: Prisma.BrandCreateManyInput | Prisma.BrandCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Brand createManyAndReturn
 */
export type BrandCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * The data used to create many Brands.
   */
  data: Prisma.BrandCreateManyInput | Prisma.BrandCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Brand update
 */
export type BrandUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * The data needed to update a Brand.
   */
  data: Prisma.XOR<Prisma.BrandUpdateInput, Prisma.BrandUncheckedUpdateInput>
  /**
   * Choose, which Brand to update.
   */
  where: Prisma.BrandWhereUniqueInput
}

/**
 * Brand updateMany
 */
export type BrandUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Brands.
   */
  data: Prisma.XOR<Prisma.BrandUpdateManyMutationInput, Prisma.BrandUncheckedUpdateManyInput>
  /**
   * Filter which Brands to update
   */
  where?: Prisma.BrandWhereInput
  /**
   * Limit how many Brands to update.
   */
  limit?: number
}

/**
 * Brand updateManyAndReturn
 */
export type BrandUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * The data used to update Brands.
   */
  data: Prisma.XOR<Prisma.BrandUpdateManyMutationInput, Prisma.BrandUncheckedUpdateManyInput>
  /**
   * Filter which Brands to update
   */
  where?: Prisma.BrandWhereInput
  /**
   * Limit how many Brands to update.
   */
  limit?: number
}

/**
 * Brand upsert
 */
export type BrandUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * The filter to search for the Brand to update in case it exists.
   */
  where: Prisma.BrandWhereUniqueInput
  /**
   * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
   */
  create: Prisma.XOR<Prisma.BrandCreateInput, Prisma.BrandUncheckedCreateInput>
  /**
   * In case the Brand was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BrandUpdateInput, Prisma.BrandUncheckedUpdateInput>
}

/**
 * Brand delete
 */
export type BrandDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
  /**
   * Filter which Brand to delete.
   */
  where: Prisma.BrandWhereUniqueInput
}

/**
 * Brand deleteMany
 */
export type BrandDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Brands to delete
   */
  where?: Prisma.BrandWhereInput
  /**
   * Limit how many Brands to delete.
   */
  limit?: number
}

/**
 * Brand.models
 */
export type Brand$modelsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Model
   */
  select?: Prisma.ModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Model
   */
  omit?: Prisma.ModelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ModelInclude<ExtArgs> | null
  where?: Prisma.ModelWhereInput
  orderBy?: Prisma.ModelOrderByWithRelationInput | Prisma.ModelOrderByWithRelationInput[]
  cursor?: Prisma.ModelWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ModelScalarFieldEnum | Prisma.ModelScalarFieldEnum[]
}

/**
 * Brand.errorCategories
 */
export type Brand$errorCategoriesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  where?: Prisma.ErrorCategoryWhereInput
  orderBy?: Prisma.ErrorCategoryOrderByWithRelationInput | Prisma.ErrorCategoryOrderByWithRelationInput[]
  cursor?: Prisma.ErrorCategoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ErrorCategoryScalarFieldEnum | Prisma.ErrorCategoryScalarFieldEnum[]
}

/**
 * Brand.assets
 */
export type Brand$assetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Asset
   */
  select?: Prisma.AssetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Asset
   */
  omit?: Prisma.AssetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetInclude<ExtArgs> | null
  where?: Prisma.AssetWhereInput
  orderBy?: Prisma.AssetOrderByWithRelationInput | Prisma.AssetOrderByWithRelationInput[]
  cursor?: Prisma.AssetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetScalarFieldEnum | Prisma.AssetScalarFieldEnum[]
}

/**
 * Brand without action
 */
export type BrandDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Brand
   */
  select?: Prisma.BrandSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Brand
   */
  omit?: Prisma.BrandOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BrandInclude<ExtArgs> | null
}
