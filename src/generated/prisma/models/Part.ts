
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Part` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Part
 * 
 */
export type PartModel = runtime.Types.Result.DefaultSelection<Prisma.$PartPayload>

export type AggregatePart = {
  _count: PartCountAggregateOutputType | null
  _avg: PartAvgAggregateOutputType | null
  _sum: PartSumAggregateOutputType | null
  _min: PartMinAggregateOutputType | null
  _max: PartMaxAggregateOutputType | null
}

export type PartAvgAggregateOutputType = {
  id: number | null
  dealer_price: runtime.Decimal | null
  sale_price: runtime.Decimal | null
  cost: runtime.Decimal | null
}

export type PartSumAggregateOutputType = {
  id: number | null
  dealer_price: runtime.Decimal | null
  sale_price: runtime.Decimal | null
  cost: runtime.Decimal | null
}

export type PartMinAggregateOutputType = {
  id: number | null
  description: string | null
  part_number: string | null
  dealer_price: runtime.Decimal | null
  sale_price: runtime.Decimal | null
  cost: runtime.Decimal | null
}

export type PartMaxAggregateOutputType = {
  id: number | null
  description: string | null
  part_number: string | null
  dealer_price: runtime.Decimal | null
  sale_price: runtime.Decimal | null
  cost: runtime.Decimal | null
}

export type PartCountAggregateOutputType = {
  id: number
  description: number
  part_number: number
  dealer_price: number
  sale_price: number
  cost: number
  _all: number
}


export type PartAvgAggregateInputType = {
  id?: true
  dealer_price?: true
  sale_price?: true
  cost?: true
}

export type PartSumAggregateInputType = {
  id?: true
  dealer_price?: true
  sale_price?: true
  cost?: true
}

export type PartMinAggregateInputType = {
  id?: true
  description?: true
  part_number?: true
  dealer_price?: true
  sale_price?: true
  cost?: true
}

export type PartMaxAggregateInputType = {
  id?: true
  description?: true
  part_number?: true
  dealer_price?: true
  sale_price?: true
  cost?: true
}

export type PartCountAggregateInputType = {
  id?: true
  description?: true
  part_number?: true
  dealer_price?: true
  sale_price?: true
  cost?: true
  _all?: true
}

export type PartAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Part to aggregate.
   */
  where?: Prisma.PartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Parts to fetch.
   */
  orderBy?: Prisma.PartOrderByWithRelationInput | Prisma.PartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Parts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Parts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Parts
  **/
  _count?: true | PartCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PartAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PartSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PartMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PartMaxAggregateInputType
}

export type GetPartAggregateType<T extends PartAggregateArgs> = {
      [P in keyof T & keyof AggregatePart]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePart[P]>
    : Prisma.GetScalarType<T[P], AggregatePart[P]>
}




export type PartGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PartWhereInput
  orderBy?: Prisma.PartOrderByWithAggregationInput | Prisma.PartOrderByWithAggregationInput[]
  by: Prisma.PartScalarFieldEnum[] | Prisma.PartScalarFieldEnum
  having?: Prisma.PartScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PartCountAggregateInputType | true
  _avg?: PartAvgAggregateInputType
  _sum?: PartSumAggregateInputType
  _min?: PartMinAggregateInputType
  _max?: PartMaxAggregateInputType
}

export type PartGroupByOutputType = {
  id: number
  description: string
  part_number: string
  dealer_price: runtime.Decimal
  sale_price: runtime.Decimal
  cost: runtime.Decimal
  _count: PartCountAggregateOutputType | null
  _avg: PartAvgAggregateOutputType | null
  _sum: PartSumAggregateOutputType | null
  _min: PartMinAggregateOutputType | null
  _max: PartMaxAggregateOutputType | null
}

type GetPartGroupByPayload<T extends PartGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PartGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PartGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PartGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PartGroupByOutputType[P]>
      }
    >
  > 



export type PartWhereInput = {
  AND?: Prisma.PartWhereInput | Prisma.PartWhereInput[]
  OR?: Prisma.PartWhereInput[]
  NOT?: Prisma.PartWhereInput | Prisma.PartWhereInput[]
  id?: Prisma.IntFilter<"Part"> | number
  description?: Prisma.StringFilter<"Part"> | string
  part_number?: Prisma.StringFilter<"Part"> | string
  dealer_price?: Prisma.DecimalFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  asset_parts?: Prisma.AssetPartListRelationFilter
}

export type PartOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  part_number?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  asset_parts?: Prisma.AssetPartOrderByRelationAggregateInput
}

export type PartWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  part_number?: string
  AND?: Prisma.PartWhereInput | Prisma.PartWhereInput[]
  OR?: Prisma.PartWhereInput[]
  NOT?: Prisma.PartWhereInput | Prisma.PartWhereInput[]
  description?: Prisma.StringFilter<"Part"> | string
  dealer_price?: Prisma.DecimalFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  asset_parts?: Prisma.AssetPartListRelationFilter
}, "id" | "part_number">

export type PartOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  part_number?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
  _count?: Prisma.PartCountOrderByAggregateInput
  _avg?: Prisma.PartAvgOrderByAggregateInput
  _max?: Prisma.PartMaxOrderByAggregateInput
  _min?: Prisma.PartMinOrderByAggregateInput
  _sum?: Prisma.PartSumOrderByAggregateInput
}

export type PartScalarWhereWithAggregatesInput = {
  AND?: Prisma.PartScalarWhereWithAggregatesInput | Prisma.PartScalarWhereWithAggregatesInput[]
  OR?: Prisma.PartScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PartScalarWhereWithAggregatesInput | Prisma.PartScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Part"> | number
  description?: Prisma.StringWithAggregatesFilter<"Part"> | string
  part_number?: Prisma.StringWithAggregatesFilter<"Part"> | string
  dealer_price?: Prisma.DecimalWithAggregatesFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalWithAggregatesFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalWithAggregatesFilter<"Part"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartCreateInput = {
  description: string
  part_number: string
  dealer_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  cost: runtime.Decimal | runtime.DecimalJsLike | number | string
  asset_parts?: Prisma.AssetPartCreateNestedManyWithoutPartInput
}

export type PartUncheckedCreateInput = {
  id?: number
  description: string
  part_number: string
  dealer_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  cost: runtime.Decimal | runtime.DecimalJsLike | number | string
  asset_parts?: Prisma.AssetPartUncheckedCreateNestedManyWithoutPartInput
}

export type PartUpdateInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  part_number?: Prisma.StringFieldUpdateOperationsInput | string
  dealer_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  asset_parts?: Prisma.AssetPartUpdateManyWithoutPartNestedInput
}

export type PartUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  part_number?: Prisma.StringFieldUpdateOperationsInput | string
  dealer_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  asset_parts?: Prisma.AssetPartUncheckedUpdateManyWithoutPartNestedInput
}

export type PartCreateManyInput = {
  id?: number
  description: string
  part_number: string
  dealer_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  cost: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartUpdateManyMutationInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  part_number?: Prisma.StringFieldUpdateOperationsInput | string
  dealer_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  part_number?: Prisma.StringFieldUpdateOperationsInput | string
  dealer_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  part_number?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type PartAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type PartMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  part_number?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type PartMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  part_number?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type PartSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dealer_price?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
  cost?: Prisma.SortOrder
}

export type PartScalarRelationFilter = {
  is?: Prisma.PartWhereInput
  isNot?: Prisma.PartWhereInput
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartCreateNestedOneWithoutAsset_partsInput = {
  create?: Prisma.XOR<Prisma.PartCreateWithoutAsset_partsInput, Prisma.PartUncheckedCreateWithoutAsset_partsInput>
  connectOrCreate?: Prisma.PartCreateOrConnectWithoutAsset_partsInput
  connect?: Prisma.PartWhereUniqueInput
}

export type PartUpdateOneRequiredWithoutAsset_partsNestedInput = {
  create?: Prisma.XOR<Prisma.PartCreateWithoutAsset_partsInput, Prisma.PartUncheckedCreateWithoutAsset_partsInput>
  connectOrCreate?: Prisma.PartCreateOrConnectWithoutAsset_partsInput
  upsert?: Prisma.PartUpsertWithoutAsset_partsInput
  connect?: Prisma.PartWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PartUpdateToOneWithWhereWithoutAsset_partsInput, Prisma.PartUpdateWithoutAsset_partsInput>, Prisma.PartUncheckedUpdateWithoutAsset_partsInput>
}

export type PartCreateWithoutAsset_partsInput = {
  description: string
  part_number: string
  dealer_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  cost: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartUncheckedCreateWithoutAsset_partsInput = {
  id?: number
  description: string
  part_number: string
  dealer_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  cost: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartCreateOrConnectWithoutAsset_partsInput = {
  where: Prisma.PartWhereUniqueInput
  create: Prisma.XOR<Prisma.PartCreateWithoutAsset_partsInput, Prisma.PartUncheckedCreateWithoutAsset_partsInput>
}

export type PartUpsertWithoutAsset_partsInput = {
  update: Prisma.XOR<Prisma.PartUpdateWithoutAsset_partsInput, Prisma.PartUncheckedUpdateWithoutAsset_partsInput>
  create: Prisma.XOR<Prisma.PartCreateWithoutAsset_partsInput, Prisma.PartUncheckedCreateWithoutAsset_partsInput>
  where?: Prisma.PartWhereInput
}

export type PartUpdateToOneWithWhereWithoutAsset_partsInput = {
  where?: Prisma.PartWhereInput
  data: Prisma.XOR<Prisma.PartUpdateWithoutAsset_partsInput, Prisma.PartUncheckedUpdateWithoutAsset_partsInput>
}

export type PartUpdateWithoutAsset_partsInput = {
  description?: Prisma.StringFieldUpdateOperationsInput | string
  part_number?: Prisma.StringFieldUpdateOperationsInput | string
  dealer_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type PartUncheckedUpdateWithoutAsset_partsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  description?: Prisma.StringFieldUpdateOperationsInput | string
  part_number?: Prisma.StringFieldUpdateOperationsInput | string
  dealer_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  sale_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  cost?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}


/**
 * Count Type PartCountOutputType
 */

export type PartCountOutputType = {
  asset_parts: number
}

export type PartCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset_parts?: boolean | PartCountOutputTypeCountAsset_partsArgs
}

/**
 * PartCountOutputType without action
 */
export type PartCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PartCountOutputType
   */
  select?: Prisma.PartCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PartCountOutputType without action
 */
export type PartCountOutputTypeCountAsset_partsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetPartWhereInput
}


export type PartSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  description?: boolean
  part_number?: boolean
  dealer_price?: boolean
  sale_price?: boolean
  cost?: boolean
  asset_parts?: boolean | Prisma.Part$asset_partsArgs<ExtArgs>
  _count?: boolean | Prisma.PartCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["part"]>

export type PartSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  description?: boolean
  part_number?: boolean
  dealer_price?: boolean
  sale_price?: boolean
  cost?: boolean
}, ExtArgs["result"]["part"]>

export type PartSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  description?: boolean
  part_number?: boolean
  dealer_price?: boolean
  sale_price?: boolean
  cost?: boolean
}, ExtArgs["result"]["part"]>

export type PartSelectScalar = {
  id?: boolean
  description?: boolean
  part_number?: boolean
  dealer_price?: boolean
  sale_price?: boolean
  cost?: boolean
}

export type PartOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "description" | "part_number" | "dealer_price" | "sale_price" | "cost", ExtArgs["result"]["part"]>
export type PartInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset_parts?: boolean | Prisma.Part$asset_partsArgs<ExtArgs>
  _count?: boolean | Prisma.PartCountOutputTypeDefaultArgs<ExtArgs>
}
export type PartIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PartIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PartPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Part"
  objects: {
    asset_parts: Prisma.$AssetPartPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    description: string
    part_number: string
    dealer_price: runtime.Decimal
    sale_price: runtime.Decimal
    cost: runtime.Decimal
  }, ExtArgs["result"]["part"]>
  composites: {}
}

export type PartGetPayload<S extends boolean | null | undefined | PartDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PartPayload, S>

export type PartCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PartCountAggregateInputType | true
  }

export interface PartDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Part'], meta: { name: 'Part' } }
  /**
   * Find zero or one Part that matches the filter.
   * @param {PartFindUniqueArgs} args - Arguments to find a Part
   * @example
   * // Get one Part
   * const part = await prisma.part.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PartFindUniqueArgs>(args: Prisma.SelectSubset<T, PartFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Part that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PartFindUniqueOrThrowArgs} args - Arguments to find a Part
   * @example
   * // Get one Part
   * const part = await prisma.part.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PartFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PartFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Part that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartFindFirstArgs} args - Arguments to find a Part
   * @example
   * // Get one Part
   * const part = await prisma.part.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PartFindFirstArgs>(args?: Prisma.SelectSubset<T, PartFindFirstArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Part that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartFindFirstOrThrowArgs} args - Arguments to find a Part
   * @example
   * // Get one Part
   * const part = await prisma.part.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PartFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PartFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Parts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Parts
   * const parts = await prisma.part.findMany()
   * 
   * // Get first 10 Parts
   * const parts = await prisma.part.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const partWithIdOnly = await prisma.part.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PartFindManyArgs>(args?: Prisma.SelectSubset<T, PartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Part.
   * @param {PartCreateArgs} args - Arguments to create a Part.
   * @example
   * // Create one Part
   * const Part = await prisma.part.create({
   *   data: {
   *     // ... data to create a Part
   *   }
   * })
   * 
   */
  create<T extends PartCreateArgs>(args: Prisma.SelectSubset<T, PartCreateArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Parts.
   * @param {PartCreateManyArgs} args - Arguments to create many Parts.
   * @example
   * // Create many Parts
   * const part = await prisma.part.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PartCreateManyArgs>(args?: Prisma.SelectSubset<T, PartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Parts and returns the data saved in the database.
   * @param {PartCreateManyAndReturnArgs} args - Arguments to create many Parts.
   * @example
   * // Create many Parts
   * const part = await prisma.part.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Parts and only return the `id`
   * const partWithIdOnly = await prisma.part.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PartCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Part.
   * @param {PartDeleteArgs} args - Arguments to delete one Part.
   * @example
   * // Delete one Part
   * const Part = await prisma.part.delete({
   *   where: {
   *     // ... filter to delete one Part
   *   }
   * })
   * 
   */
  delete<T extends PartDeleteArgs>(args: Prisma.SelectSubset<T, PartDeleteArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Part.
   * @param {PartUpdateArgs} args - Arguments to update one Part.
   * @example
   * // Update one Part
   * const part = await prisma.part.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PartUpdateArgs>(args: Prisma.SelectSubset<T, PartUpdateArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Parts.
   * @param {PartDeleteManyArgs} args - Arguments to filter Parts to delete.
   * @example
   * // Delete a few Parts
   * const { count } = await prisma.part.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PartDeleteManyArgs>(args?: Prisma.SelectSubset<T, PartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Parts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Parts
   * const part = await prisma.part.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PartUpdateManyArgs>(args: Prisma.SelectSubset<T, PartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Parts and returns the data updated in the database.
   * @param {PartUpdateManyAndReturnArgs} args - Arguments to update many Parts.
   * @example
   * // Update many Parts
   * const part = await prisma.part.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Parts and only return the `id`
   * const partWithIdOnly = await prisma.part.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PartUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Part.
   * @param {PartUpsertArgs} args - Arguments to update or create a Part.
   * @example
   * // Update or create a Part
   * const part = await prisma.part.upsert({
   *   create: {
   *     // ... data to create a Part
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Part we want to update
   *   }
   * })
   */
  upsert<T extends PartUpsertArgs>(args: Prisma.SelectSubset<T, PartUpsertArgs<ExtArgs>>): Prisma.Prisma__PartClient<runtime.Types.Result.GetResult<Prisma.$PartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Parts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartCountArgs} args - Arguments to filter Parts to count.
   * @example
   * // Count the number of Parts
   * const count = await prisma.part.count({
   *   where: {
   *     // ... the filter for the Parts we want to count
   *   }
   * })
  **/
  count<T extends PartCountArgs>(
    args?: Prisma.Subset<T, PartCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PartCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Part.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PartAggregateArgs>(args: Prisma.Subset<T, PartAggregateArgs>): Prisma.PrismaPromise<GetPartAggregateType<T>>

  /**
   * Group by Part.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PartGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PartGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PartGroupByArgs['orderBy'] }
      : { orderBy?: PartGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Part model
 */
readonly fields: PartFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Part.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PartClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset_parts<T extends Prisma.Part$asset_partsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Part$asset_partsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Part model
 */
export interface PartFieldRefs {
  readonly id: Prisma.FieldRef<"Part", 'Int'>
  readonly description: Prisma.FieldRef<"Part", 'String'>
  readonly part_number: Prisma.FieldRef<"Part", 'String'>
  readonly dealer_price: Prisma.FieldRef<"Part", 'Decimal'>
  readonly sale_price: Prisma.FieldRef<"Part", 'Decimal'>
  readonly cost: Prisma.FieldRef<"Part", 'Decimal'>
}
    

// Custom InputTypes
/**
 * Part findUnique
 */
export type PartFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * Filter, which Part to fetch.
   */
  where: Prisma.PartWhereUniqueInput
}

/**
 * Part findUniqueOrThrow
 */
export type PartFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * Filter, which Part to fetch.
   */
  where: Prisma.PartWhereUniqueInput
}

/**
 * Part findFirst
 */
export type PartFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * Filter, which Part to fetch.
   */
  where?: Prisma.PartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Parts to fetch.
   */
  orderBy?: Prisma.PartOrderByWithRelationInput | Prisma.PartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Parts.
   */
  cursor?: Prisma.PartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Parts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Parts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Parts.
   */
  distinct?: Prisma.PartScalarFieldEnum | Prisma.PartScalarFieldEnum[]
}

/**
 * Part findFirstOrThrow
 */
export type PartFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * Filter, which Part to fetch.
   */
  where?: Prisma.PartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Parts to fetch.
   */
  orderBy?: Prisma.PartOrderByWithRelationInput | Prisma.PartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Parts.
   */
  cursor?: Prisma.PartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Parts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Parts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Parts.
   */
  distinct?: Prisma.PartScalarFieldEnum | Prisma.PartScalarFieldEnum[]
}

/**
 * Part findMany
 */
export type PartFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * Filter, which Parts to fetch.
   */
  where?: Prisma.PartWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Parts to fetch.
   */
  orderBy?: Prisma.PartOrderByWithRelationInput | Prisma.PartOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Parts.
   */
  cursor?: Prisma.PartWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Parts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Parts.
   */
  skip?: number
  distinct?: Prisma.PartScalarFieldEnum | Prisma.PartScalarFieldEnum[]
}

/**
 * Part create
 */
export type PartCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * The data needed to create a Part.
   */
  data: Prisma.XOR<Prisma.PartCreateInput, Prisma.PartUncheckedCreateInput>
}

/**
 * Part createMany
 */
export type PartCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Parts.
   */
  data: Prisma.PartCreateManyInput | Prisma.PartCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Part createManyAndReturn
 */
export type PartCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * The data used to create many Parts.
   */
  data: Prisma.PartCreateManyInput | Prisma.PartCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Part update
 */
export type PartUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * The data needed to update a Part.
   */
  data: Prisma.XOR<Prisma.PartUpdateInput, Prisma.PartUncheckedUpdateInput>
  /**
   * Choose, which Part to update.
   */
  where: Prisma.PartWhereUniqueInput
}

/**
 * Part updateMany
 */
export type PartUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Parts.
   */
  data: Prisma.XOR<Prisma.PartUpdateManyMutationInput, Prisma.PartUncheckedUpdateManyInput>
  /**
   * Filter which Parts to update
   */
  where?: Prisma.PartWhereInput
  /**
   * Limit how many Parts to update.
   */
  limit?: number
}

/**
 * Part updateManyAndReturn
 */
export type PartUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * The data used to update Parts.
   */
  data: Prisma.XOR<Prisma.PartUpdateManyMutationInput, Prisma.PartUncheckedUpdateManyInput>
  /**
   * Filter which Parts to update
   */
  where?: Prisma.PartWhereInput
  /**
   * Limit how many Parts to update.
   */
  limit?: number
}

/**
 * Part upsert
 */
export type PartUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * The filter to search for the Part to update in case it exists.
   */
  where: Prisma.PartWhereUniqueInput
  /**
   * In case the Part found by the `where` argument doesn't exist, create a new Part with this data.
   */
  create: Prisma.XOR<Prisma.PartCreateInput, Prisma.PartUncheckedCreateInput>
  /**
   * In case the Part was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PartUpdateInput, Prisma.PartUncheckedUpdateInput>
}

/**
 * Part delete
 */
export type PartDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
  /**
   * Filter which Part to delete.
   */
  where: Prisma.PartWhereUniqueInput
}

/**
 * Part deleteMany
 */
export type PartDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Parts to delete
   */
  where?: Prisma.PartWhereInput
  /**
   * Limit how many Parts to delete.
   */
  limit?: number
}

/**
 * Part.asset_parts
 */
export type Part$asset_partsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetPart
   */
  select?: Prisma.AssetPartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetPart
   */
  omit?: Prisma.AssetPartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetPartInclude<ExtArgs> | null
  where?: Prisma.AssetPartWhereInput
  orderBy?: Prisma.AssetPartOrderByWithRelationInput | Prisma.AssetPartOrderByWithRelationInput[]
  cursor?: Prisma.AssetPartWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetPartScalarFieldEnum | Prisma.AssetPartScalarFieldEnum[]
}

/**
 * Part without action
 */
export type PartDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Part
   */
  select?: Prisma.PartSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Part
   */
  omit?: Prisma.PartOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PartInclude<ExtArgs> | null
}
