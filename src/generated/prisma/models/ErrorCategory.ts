
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ErrorCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model ErrorCategory
 * 
 */
export type ErrorCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$ErrorCategoryPayload>

export type AggregateErrorCategory = {
  _count: ErrorCategoryCountAggregateOutputType | null
  _avg: ErrorCategoryAvgAggregateOutputType | null
  _sum: ErrorCategorySumAggregateOutputType | null
  _min: ErrorCategoryMinAggregateOutputType | null
  _max: ErrorCategoryMaxAggregateOutputType | null
}

export type ErrorCategoryAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type ErrorCategorySumAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type ErrorCategoryMinAggregateOutputType = {
  id: number | null
  brand_id: number | null
  category: string | null
}

export type ErrorCategoryMaxAggregateOutputType = {
  id: number | null
  brand_id: number | null
  category: string | null
}

export type ErrorCategoryCountAggregateOutputType = {
  id: number
  brand_id: number
  category: number
  _all: number
}


export type ErrorCategoryAvgAggregateInputType = {
  id?: true
  brand_id?: true
}

export type ErrorCategorySumAggregateInputType = {
  id?: true
  brand_id?: true
}

export type ErrorCategoryMinAggregateInputType = {
  id?: true
  brand_id?: true
  category?: true
}

export type ErrorCategoryMaxAggregateInputType = {
  id?: true
  brand_id?: true
  category?: true
}

export type ErrorCategoryCountAggregateInputType = {
  id?: true
  brand_id?: true
  category?: true
  _all?: true
}

export type ErrorCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ErrorCategory to aggregate.
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ErrorCategories to fetch.
   */
  orderBy?: Prisma.ErrorCategoryOrderByWithRelationInput | Prisma.ErrorCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ErrorCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ErrorCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ErrorCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ErrorCategories
  **/
  _count?: true | ErrorCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ErrorCategoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ErrorCategorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ErrorCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ErrorCategoryMaxAggregateInputType
}

export type GetErrorCategoryAggregateType<T extends ErrorCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregateErrorCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateErrorCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateErrorCategory[P]>
}




export type ErrorCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ErrorCategoryWhereInput
  orderBy?: Prisma.ErrorCategoryOrderByWithAggregationInput | Prisma.ErrorCategoryOrderByWithAggregationInput[]
  by: Prisma.ErrorCategoryScalarFieldEnum[] | Prisma.ErrorCategoryScalarFieldEnum
  having?: Prisma.ErrorCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ErrorCategoryCountAggregateInputType | true
  _avg?: ErrorCategoryAvgAggregateInputType
  _sum?: ErrorCategorySumAggregateInputType
  _min?: ErrorCategoryMinAggregateInputType
  _max?: ErrorCategoryMaxAggregateInputType
}

export type ErrorCategoryGroupByOutputType = {
  id: number
  brand_id: number
  category: string
  _count: ErrorCategoryCountAggregateOutputType | null
  _avg: ErrorCategoryAvgAggregateOutputType | null
  _sum: ErrorCategorySumAggregateOutputType | null
  _min: ErrorCategoryMinAggregateOutputType | null
  _max: ErrorCategoryMaxAggregateOutputType | null
}

type GetErrorCategoryGroupByPayload<T extends ErrorCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ErrorCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ErrorCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ErrorCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ErrorCategoryGroupByOutputType[P]>
      }
    >
  > 



export type ErrorCategoryWhereInput = {
  AND?: Prisma.ErrorCategoryWhereInput | Prisma.ErrorCategoryWhereInput[]
  OR?: Prisma.ErrorCategoryWhereInput[]
  NOT?: Prisma.ErrorCategoryWhereInput | Prisma.ErrorCategoryWhereInput[]
  id?: Prisma.IntFilter<"ErrorCategory"> | number
  brand_id?: Prisma.IntFilter<"ErrorCategory"> | number
  category?: Prisma.StringFilter<"ErrorCategory"> | string
  brand?: Prisma.XOR<Prisma.BrandScalarRelationFilter, Prisma.BrandWhereInput>
  errors?: Prisma.ErrorListRelationFilter
}

export type ErrorCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  category?: Prisma.SortOrder
  brand?: Prisma.BrandOrderByWithRelationInput
  errors?: Prisma.ErrorOrderByRelationAggregateInput
}

export type ErrorCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  category?: string
  AND?: Prisma.ErrorCategoryWhereInput | Prisma.ErrorCategoryWhereInput[]
  OR?: Prisma.ErrorCategoryWhereInput[]
  NOT?: Prisma.ErrorCategoryWhereInput | Prisma.ErrorCategoryWhereInput[]
  brand_id?: Prisma.IntFilter<"ErrorCategory"> | number
  brand?: Prisma.XOR<Prisma.BrandScalarRelationFilter, Prisma.BrandWhereInput>
  errors?: Prisma.ErrorListRelationFilter
}, "id" | "category">

export type ErrorCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  category?: Prisma.SortOrder
  _count?: Prisma.ErrorCategoryCountOrderByAggregateInput
  _avg?: Prisma.ErrorCategoryAvgOrderByAggregateInput
  _max?: Prisma.ErrorCategoryMaxOrderByAggregateInput
  _min?: Prisma.ErrorCategoryMinOrderByAggregateInput
  _sum?: Prisma.ErrorCategorySumOrderByAggregateInput
}

export type ErrorCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ErrorCategoryScalarWhereWithAggregatesInput | Prisma.ErrorCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ErrorCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ErrorCategoryScalarWhereWithAggregatesInput | Prisma.ErrorCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ErrorCategory"> | number
  brand_id?: Prisma.IntWithAggregatesFilter<"ErrorCategory"> | number
  category?: Prisma.StringWithAggregatesFilter<"ErrorCategory"> | string
}

export type ErrorCategoryCreateInput = {
  category: string
  brand: Prisma.BrandCreateNestedOneWithoutErrorCategoriesInput
  errors?: Prisma.ErrorCreateNestedManyWithoutCategoryInput
}

export type ErrorCategoryUncheckedCreateInput = {
  id?: number
  brand_id: number
  category: string
  errors?: Prisma.ErrorUncheckedCreateNestedManyWithoutCategoryInput
}

export type ErrorCategoryUpdateInput = {
  category?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.BrandUpdateOneRequiredWithoutErrorCategoriesNestedInput
  errors?: Prisma.ErrorUpdateManyWithoutCategoryNestedInput
}

export type ErrorCategoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.IntFieldUpdateOperationsInput | number
  category?: Prisma.StringFieldUpdateOperationsInput | string
  errors?: Prisma.ErrorUncheckedUpdateManyWithoutCategoryNestedInput
}

export type ErrorCategoryCreateManyInput = {
  id?: number
  brand_id: number
  category: string
}

export type ErrorCategoryUpdateManyMutationInput = {
  category?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ErrorCategoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.IntFieldUpdateOperationsInput | number
  category?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ErrorCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  category?: Prisma.SortOrder
}

export type ErrorCategoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type ErrorCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  category?: Prisma.SortOrder
}

export type ErrorCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  category?: Prisma.SortOrder
}

export type ErrorCategorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type ErrorCategoryScalarRelationFilter = {
  is?: Prisma.ErrorCategoryWhereInput
  isNot?: Prisma.ErrorCategoryWhereInput
}

export type ErrorCategoryListRelationFilter = {
  every?: Prisma.ErrorCategoryWhereInput
  some?: Prisma.ErrorCategoryWhereInput
  none?: Prisma.ErrorCategoryWhereInput
}

export type ErrorCategoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ErrorCategoryCreateNestedOneWithoutErrorsInput = {
  create?: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutErrorsInput, Prisma.ErrorCategoryUncheckedCreateWithoutErrorsInput>
  connectOrCreate?: Prisma.ErrorCategoryCreateOrConnectWithoutErrorsInput
  connect?: Prisma.ErrorCategoryWhereUniqueInput
}

export type ErrorCategoryUpdateOneRequiredWithoutErrorsNestedInput = {
  create?: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutErrorsInput, Prisma.ErrorCategoryUncheckedCreateWithoutErrorsInput>
  connectOrCreate?: Prisma.ErrorCategoryCreateOrConnectWithoutErrorsInput
  upsert?: Prisma.ErrorCategoryUpsertWithoutErrorsInput
  connect?: Prisma.ErrorCategoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ErrorCategoryUpdateToOneWithWhereWithoutErrorsInput, Prisma.ErrorCategoryUpdateWithoutErrorsInput>, Prisma.ErrorCategoryUncheckedUpdateWithoutErrorsInput>
}

export type ErrorCategoryCreateNestedManyWithoutBrandInput = {
  create?: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutBrandInput, Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput> | Prisma.ErrorCategoryCreateWithoutBrandInput[] | Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput | Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput[]
  createMany?: Prisma.ErrorCategoryCreateManyBrandInputEnvelope
  connect?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
}

export type ErrorCategoryUncheckedCreateNestedManyWithoutBrandInput = {
  create?: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutBrandInput, Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput> | Prisma.ErrorCategoryCreateWithoutBrandInput[] | Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput | Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput[]
  createMany?: Prisma.ErrorCategoryCreateManyBrandInputEnvelope
  connect?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
}

export type ErrorCategoryUpdateManyWithoutBrandNestedInput = {
  create?: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutBrandInput, Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput> | Prisma.ErrorCategoryCreateWithoutBrandInput[] | Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput | Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput[]
  upsert?: Prisma.ErrorCategoryUpsertWithWhereUniqueWithoutBrandInput | Prisma.ErrorCategoryUpsertWithWhereUniqueWithoutBrandInput[]
  createMany?: Prisma.ErrorCategoryCreateManyBrandInputEnvelope
  set?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  disconnect?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  delete?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  connect?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  update?: Prisma.ErrorCategoryUpdateWithWhereUniqueWithoutBrandInput | Prisma.ErrorCategoryUpdateWithWhereUniqueWithoutBrandInput[]
  updateMany?: Prisma.ErrorCategoryUpdateManyWithWhereWithoutBrandInput | Prisma.ErrorCategoryUpdateManyWithWhereWithoutBrandInput[]
  deleteMany?: Prisma.ErrorCategoryScalarWhereInput | Prisma.ErrorCategoryScalarWhereInput[]
}

export type ErrorCategoryUncheckedUpdateManyWithoutBrandNestedInput = {
  create?: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutBrandInput, Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput> | Prisma.ErrorCategoryCreateWithoutBrandInput[] | Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput | Prisma.ErrorCategoryCreateOrConnectWithoutBrandInput[]
  upsert?: Prisma.ErrorCategoryUpsertWithWhereUniqueWithoutBrandInput | Prisma.ErrorCategoryUpsertWithWhereUniqueWithoutBrandInput[]
  createMany?: Prisma.ErrorCategoryCreateManyBrandInputEnvelope
  set?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  disconnect?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  delete?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  connect?: Prisma.ErrorCategoryWhereUniqueInput | Prisma.ErrorCategoryWhereUniqueInput[]
  update?: Prisma.ErrorCategoryUpdateWithWhereUniqueWithoutBrandInput | Prisma.ErrorCategoryUpdateWithWhereUniqueWithoutBrandInput[]
  updateMany?: Prisma.ErrorCategoryUpdateManyWithWhereWithoutBrandInput | Prisma.ErrorCategoryUpdateManyWithWhereWithoutBrandInput[]
  deleteMany?: Prisma.ErrorCategoryScalarWhereInput | Prisma.ErrorCategoryScalarWhereInput[]
}

export type ErrorCategoryCreateWithoutErrorsInput = {
  category: string
  brand: Prisma.BrandCreateNestedOneWithoutErrorCategoriesInput
}

export type ErrorCategoryUncheckedCreateWithoutErrorsInput = {
  id?: number
  brand_id: number
  category: string
}

export type ErrorCategoryCreateOrConnectWithoutErrorsInput = {
  where: Prisma.ErrorCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutErrorsInput, Prisma.ErrorCategoryUncheckedCreateWithoutErrorsInput>
}

export type ErrorCategoryUpsertWithoutErrorsInput = {
  update: Prisma.XOR<Prisma.ErrorCategoryUpdateWithoutErrorsInput, Prisma.ErrorCategoryUncheckedUpdateWithoutErrorsInput>
  create: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutErrorsInput, Prisma.ErrorCategoryUncheckedCreateWithoutErrorsInput>
  where?: Prisma.ErrorCategoryWhereInput
}

export type ErrorCategoryUpdateToOneWithWhereWithoutErrorsInput = {
  where?: Prisma.ErrorCategoryWhereInput
  data: Prisma.XOR<Prisma.ErrorCategoryUpdateWithoutErrorsInput, Prisma.ErrorCategoryUncheckedUpdateWithoutErrorsInput>
}

export type ErrorCategoryUpdateWithoutErrorsInput = {
  category?: Prisma.StringFieldUpdateOperationsInput | string
  brand?: Prisma.BrandUpdateOneRequiredWithoutErrorCategoriesNestedInput
}

export type ErrorCategoryUncheckedUpdateWithoutErrorsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  brand_id?: Prisma.IntFieldUpdateOperationsInput | number
  category?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ErrorCategoryCreateWithoutBrandInput = {
  category: string
  errors?: Prisma.ErrorCreateNestedManyWithoutCategoryInput
}

export type ErrorCategoryUncheckedCreateWithoutBrandInput = {
  id?: number
  category: string
  errors?: Prisma.ErrorUncheckedCreateNestedManyWithoutCategoryInput
}

export type ErrorCategoryCreateOrConnectWithoutBrandInput = {
  where: Prisma.ErrorCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutBrandInput, Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput>
}

export type ErrorCategoryCreateManyBrandInputEnvelope = {
  data: Prisma.ErrorCategoryCreateManyBrandInput | Prisma.ErrorCategoryCreateManyBrandInput[]
  skipDuplicates?: boolean
}

export type ErrorCategoryUpsertWithWhereUniqueWithoutBrandInput = {
  where: Prisma.ErrorCategoryWhereUniqueInput
  update: Prisma.XOR<Prisma.ErrorCategoryUpdateWithoutBrandInput, Prisma.ErrorCategoryUncheckedUpdateWithoutBrandInput>
  create: Prisma.XOR<Prisma.ErrorCategoryCreateWithoutBrandInput, Prisma.ErrorCategoryUncheckedCreateWithoutBrandInput>
}

export type ErrorCategoryUpdateWithWhereUniqueWithoutBrandInput = {
  where: Prisma.ErrorCategoryWhereUniqueInput
  data: Prisma.XOR<Prisma.ErrorCategoryUpdateWithoutBrandInput, Prisma.ErrorCategoryUncheckedUpdateWithoutBrandInput>
}

export type ErrorCategoryUpdateManyWithWhereWithoutBrandInput = {
  where: Prisma.ErrorCategoryScalarWhereInput
  data: Prisma.XOR<Prisma.ErrorCategoryUpdateManyMutationInput, Prisma.ErrorCategoryUncheckedUpdateManyWithoutBrandInput>
}

export type ErrorCategoryScalarWhereInput = {
  AND?: Prisma.ErrorCategoryScalarWhereInput | Prisma.ErrorCategoryScalarWhereInput[]
  OR?: Prisma.ErrorCategoryScalarWhereInput[]
  NOT?: Prisma.ErrorCategoryScalarWhereInput | Prisma.ErrorCategoryScalarWhereInput[]
  id?: Prisma.IntFilter<"ErrorCategory"> | number
  brand_id?: Prisma.IntFilter<"ErrorCategory"> | number
  category?: Prisma.StringFilter<"ErrorCategory"> | string
}

export type ErrorCategoryCreateManyBrandInput = {
  id?: number
  category: string
}

export type ErrorCategoryUpdateWithoutBrandInput = {
  category?: Prisma.StringFieldUpdateOperationsInput | string
  errors?: Prisma.ErrorUpdateManyWithoutCategoryNestedInput
}

export type ErrorCategoryUncheckedUpdateWithoutBrandInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  category?: Prisma.StringFieldUpdateOperationsInput | string
  errors?: Prisma.ErrorUncheckedUpdateManyWithoutCategoryNestedInput
}

export type ErrorCategoryUncheckedUpdateManyWithoutBrandInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  category?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ErrorCategoryCountOutputType
 */

export type ErrorCategoryCountOutputType = {
  errors: number
}

export type ErrorCategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  errors?: boolean | ErrorCategoryCountOutputTypeCountErrorsArgs
}

/**
 * ErrorCategoryCountOutputType without action
 */
export type ErrorCategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategoryCountOutputType
   */
  select?: Prisma.ErrorCategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ErrorCategoryCountOutputType without action
 */
export type ErrorCategoryCountOutputTypeCountErrorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ErrorWhereInput
}


export type ErrorCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  category?: boolean
  brand?: boolean | Prisma.BrandDefaultArgs<ExtArgs>
  errors?: boolean | Prisma.ErrorCategory$errorsArgs<ExtArgs>
  _count?: boolean | Prisma.ErrorCategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["errorCategory"]>

export type ErrorCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  category?: boolean
  brand?: boolean | Prisma.BrandDefaultArgs<ExtArgs>
}, ExtArgs["result"]["errorCategory"]>

export type ErrorCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  category?: boolean
  brand?: boolean | Prisma.BrandDefaultArgs<ExtArgs>
}, ExtArgs["result"]["errorCategory"]>

export type ErrorCategorySelectScalar = {
  id?: boolean
  brand_id?: boolean
  category?: boolean
}

export type ErrorCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "category", ExtArgs["result"]["errorCategory"]>
export type ErrorCategoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.BrandDefaultArgs<ExtArgs>
  errors?: boolean | Prisma.ErrorCategory$errorsArgs<ExtArgs>
  _count?: boolean | Prisma.ErrorCategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type ErrorCategoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.BrandDefaultArgs<ExtArgs>
}
export type ErrorCategoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.BrandDefaultArgs<ExtArgs>
}

export type $ErrorCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ErrorCategory"
  objects: {
    brand: Prisma.$BrandPayload<ExtArgs>
    errors: Prisma.$ErrorPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    brand_id: number
    category: string
  }, ExtArgs["result"]["errorCategory"]>
  composites: {}
}

export type ErrorCategoryGetPayload<S extends boolean | null | undefined | ErrorCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload, S>

export type ErrorCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ErrorCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ErrorCategoryCountAggregateInputType | true
  }

export interface ErrorCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ErrorCategory'], meta: { name: 'ErrorCategory' } }
  /**
   * Find zero or one ErrorCategory that matches the filter.
   * @param {ErrorCategoryFindUniqueArgs} args - Arguments to find a ErrorCategory
   * @example
   * // Get one ErrorCategory
   * const errorCategory = await prisma.errorCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ErrorCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, ErrorCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ErrorCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ErrorCategoryFindUniqueOrThrowArgs} args - Arguments to find a ErrorCategory
   * @example
   * // Get one ErrorCategory
   * const errorCategory = await prisma.errorCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ErrorCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ErrorCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ErrorCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryFindFirstArgs} args - Arguments to find a ErrorCategory
   * @example
   * // Get one ErrorCategory
   * const errorCategory = await prisma.errorCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ErrorCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, ErrorCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ErrorCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryFindFirstOrThrowArgs} args - Arguments to find a ErrorCategory
   * @example
   * // Get one ErrorCategory
   * const errorCategory = await prisma.errorCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ErrorCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ErrorCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ErrorCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ErrorCategories
   * const errorCategories = await prisma.errorCategory.findMany()
   * 
   * // Get first 10 ErrorCategories
   * const errorCategories = await prisma.errorCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const errorCategoryWithIdOnly = await prisma.errorCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ErrorCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, ErrorCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ErrorCategory.
   * @param {ErrorCategoryCreateArgs} args - Arguments to create a ErrorCategory.
   * @example
   * // Create one ErrorCategory
   * const ErrorCategory = await prisma.errorCategory.create({
   *   data: {
   *     // ... data to create a ErrorCategory
   *   }
   * })
   * 
   */
  create<T extends ErrorCategoryCreateArgs>(args: Prisma.SelectSubset<T, ErrorCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ErrorCategories.
   * @param {ErrorCategoryCreateManyArgs} args - Arguments to create many ErrorCategories.
   * @example
   * // Create many ErrorCategories
   * const errorCategory = await prisma.errorCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ErrorCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, ErrorCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ErrorCategories and returns the data saved in the database.
   * @param {ErrorCategoryCreateManyAndReturnArgs} args - Arguments to create many ErrorCategories.
   * @example
   * // Create many ErrorCategories
   * const errorCategory = await prisma.errorCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ErrorCategories and only return the `id`
   * const errorCategoryWithIdOnly = await prisma.errorCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ErrorCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ErrorCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ErrorCategory.
   * @param {ErrorCategoryDeleteArgs} args - Arguments to delete one ErrorCategory.
   * @example
   * // Delete one ErrorCategory
   * const ErrorCategory = await prisma.errorCategory.delete({
   *   where: {
   *     // ... filter to delete one ErrorCategory
   *   }
   * })
   * 
   */
  delete<T extends ErrorCategoryDeleteArgs>(args: Prisma.SelectSubset<T, ErrorCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ErrorCategory.
   * @param {ErrorCategoryUpdateArgs} args - Arguments to update one ErrorCategory.
   * @example
   * // Update one ErrorCategory
   * const errorCategory = await prisma.errorCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ErrorCategoryUpdateArgs>(args: Prisma.SelectSubset<T, ErrorCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ErrorCategories.
   * @param {ErrorCategoryDeleteManyArgs} args - Arguments to filter ErrorCategories to delete.
   * @example
   * // Delete a few ErrorCategories
   * const { count } = await prisma.errorCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ErrorCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ErrorCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ErrorCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ErrorCategories
   * const errorCategory = await prisma.errorCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ErrorCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, ErrorCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ErrorCategories and returns the data updated in the database.
   * @param {ErrorCategoryUpdateManyAndReturnArgs} args - Arguments to update many ErrorCategories.
   * @example
   * // Update many ErrorCategories
   * const errorCategory = await prisma.errorCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ErrorCategories and only return the `id`
   * const errorCategoryWithIdOnly = await prisma.errorCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ErrorCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ErrorCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ErrorCategory.
   * @param {ErrorCategoryUpsertArgs} args - Arguments to update or create a ErrorCategory.
   * @example
   * // Update or create a ErrorCategory
   * const errorCategory = await prisma.errorCategory.upsert({
   *   create: {
   *     // ... data to create a ErrorCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ErrorCategory we want to update
   *   }
   * })
   */
  upsert<T extends ErrorCategoryUpsertArgs>(args: Prisma.SelectSubset<T, ErrorCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__ErrorCategoryClient<runtime.Types.Result.GetResult<Prisma.$ErrorCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ErrorCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryCountArgs} args - Arguments to filter ErrorCategories to count.
   * @example
   * // Count the number of ErrorCategories
   * const count = await prisma.errorCategory.count({
   *   where: {
   *     // ... the filter for the ErrorCategories we want to count
   *   }
   * })
  **/
  count<T extends ErrorCategoryCountArgs>(
    args?: Prisma.Subset<T, ErrorCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ErrorCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ErrorCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ErrorCategoryAggregateArgs>(args: Prisma.Subset<T, ErrorCategoryAggregateArgs>): Prisma.PrismaPromise<GetErrorCategoryAggregateType<T>>

  /**
   * Group by ErrorCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ErrorCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ErrorCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ErrorCategoryGroupByArgs['orderBy'] }
      : { orderBy?: ErrorCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ErrorCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetErrorCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ErrorCategory model
 */
readonly fields: ErrorCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ErrorCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ErrorCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  brand<T extends Prisma.BrandDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BrandDefaultArgs<ExtArgs>>): Prisma.Prisma__BrandClient<runtime.Types.Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  errors<T extends Prisma.ErrorCategory$errorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ErrorCategory$errorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ErrorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ErrorCategory model
 */
export interface ErrorCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"ErrorCategory", 'Int'>
  readonly brand_id: Prisma.FieldRef<"ErrorCategory", 'Int'>
  readonly category: Prisma.FieldRef<"ErrorCategory", 'String'>
}
    

// Custom InputTypes
/**
 * ErrorCategory findUnique
 */
export type ErrorCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * Filter, which ErrorCategory to fetch.
   */
  where: Prisma.ErrorCategoryWhereUniqueInput
}

/**
 * ErrorCategory findUniqueOrThrow
 */
export type ErrorCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * Filter, which ErrorCategory to fetch.
   */
  where: Prisma.ErrorCategoryWhereUniqueInput
}

/**
 * ErrorCategory findFirst
 */
export type ErrorCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * Filter, which ErrorCategory to fetch.
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ErrorCategories to fetch.
   */
  orderBy?: Prisma.ErrorCategoryOrderByWithRelationInput | Prisma.ErrorCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ErrorCategories.
   */
  cursor?: Prisma.ErrorCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ErrorCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ErrorCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ErrorCategories.
   */
  distinct?: Prisma.ErrorCategoryScalarFieldEnum | Prisma.ErrorCategoryScalarFieldEnum[]
}

/**
 * ErrorCategory findFirstOrThrow
 */
export type ErrorCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * Filter, which ErrorCategory to fetch.
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ErrorCategories to fetch.
   */
  orderBy?: Prisma.ErrorCategoryOrderByWithRelationInput | Prisma.ErrorCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ErrorCategories.
   */
  cursor?: Prisma.ErrorCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ErrorCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ErrorCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ErrorCategories.
   */
  distinct?: Prisma.ErrorCategoryScalarFieldEnum | Prisma.ErrorCategoryScalarFieldEnum[]
}

/**
 * ErrorCategory findMany
 */
export type ErrorCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * Filter, which ErrorCategories to fetch.
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ErrorCategories to fetch.
   */
  orderBy?: Prisma.ErrorCategoryOrderByWithRelationInput | Prisma.ErrorCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ErrorCategories.
   */
  cursor?: Prisma.ErrorCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ErrorCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ErrorCategories.
   */
  skip?: number
  distinct?: Prisma.ErrorCategoryScalarFieldEnum | Prisma.ErrorCategoryScalarFieldEnum[]
}

/**
 * ErrorCategory create
 */
export type ErrorCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * The data needed to create a ErrorCategory.
   */
  data: Prisma.XOR<Prisma.ErrorCategoryCreateInput, Prisma.ErrorCategoryUncheckedCreateInput>
}

/**
 * ErrorCategory createMany
 */
export type ErrorCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ErrorCategories.
   */
  data: Prisma.ErrorCategoryCreateManyInput | Prisma.ErrorCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ErrorCategory createManyAndReturn
 */
export type ErrorCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many ErrorCategories.
   */
  data: Prisma.ErrorCategoryCreateManyInput | Prisma.ErrorCategoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ErrorCategory update
 */
export type ErrorCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * The data needed to update a ErrorCategory.
   */
  data: Prisma.XOR<Prisma.ErrorCategoryUpdateInput, Prisma.ErrorCategoryUncheckedUpdateInput>
  /**
   * Choose, which ErrorCategory to update.
   */
  where: Prisma.ErrorCategoryWhereUniqueInput
}

/**
 * ErrorCategory updateMany
 */
export type ErrorCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ErrorCategories.
   */
  data: Prisma.XOR<Prisma.ErrorCategoryUpdateManyMutationInput, Prisma.ErrorCategoryUncheckedUpdateManyInput>
  /**
   * Filter which ErrorCategories to update
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * Limit how many ErrorCategories to update.
   */
  limit?: number
}

/**
 * ErrorCategory updateManyAndReturn
 */
export type ErrorCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * The data used to update ErrorCategories.
   */
  data: Prisma.XOR<Prisma.ErrorCategoryUpdateManyMutationInput, Prisma.ErrorCategoryUncheckedUpdateManyInput>
  /**
   * Filter which ErrorCategories to update
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * Limit how many ErrorCategories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ErrorCategory upsert
 */
export type ErrorCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * The filter to search for the ErrorCategory to update in case it exists.
   */
  where: Prisma.ErrorCategoryWhereUniqueInput
  /**
   * In case the ErrorCategory found by the `where` argument doesn't exist, create a new ErrorCategory with this data.
   */
  create: Prisma.XOR<Prisma.ErrorCategoryCreateInput, Prisma.ErrorCategoryUncheckedCreateInput>
  /**
   * In case the ErrorCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ErrorCategoryUpdateInput, Prisma.ErrorCategoryUncheckedUpdateInput>
}

/**
 * ErrorCategory delete
 */
export type ErrorCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
  /**
   * Filter which ErrorCategory to delete.
   */
  where: Prisma.ErrorCategoryWhereUniqueInput
}

/**
 * ErrorCategory deleteMany
 */
export type ErrorCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ErrorCategories to delete
   */
  where?: Prisma.ErrorCategoryWhereInput
  /**
   * Limit how many ErrorCategories to delete.
   */
  limit?: number
}

/**
 * ErrorCategory.errors
 */
export type ErrorCategory$errorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Error
   */
  select?: Prisma.ErrorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Error
   */
  omit?: Prisma.ErrorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorInclude<ExtArgs> | null
  where?: Prisma.ErrorWhereInput
  orderBy?: Prisma.ErrorOrderByWithRelationInput | Prisma.ErrorOrderByWithRelationInput[]
  cursor?: Prisma.ErrorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ErrorScalarFieldEnum | Prisma.ErrorScalarFieldEnum[]
}

/**
 * ErrorCategory without action
 */
export type ErrorCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ErrorCategory
   */
  select?: Prisma.ErrorCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ErrorCategory
   */
  omit?: Prisma.ErrorCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ErrorCategoryInclude<ExtArgs> | null
}
