
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Transfer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Transfer
 * 
 */
export type TransferModel = runtime.Types.Result.DefaultSelection<Prisma.$TransferPayload>

export type AggregateTransfer = {
  _count: TransferCountAggregateOutputType | null
  _avg: TransferAvgAggregateOutputType | null
  _sum: TransferSumAggregateOutputType | null
  _min: TransferMinAggregateOutputType | null
  _max: TransferMaxAggregateOutputType | null
}

export type TransferAvgAggregateOutputType = {
  id: number | null
  origin_id: number | null
  destination_id: number | null
  transporter_id: number | null
  created_by_id: number | null
}

export type TransferSumAggregateOutputType = {
  id: number | null
  origin_id: number | null
  destination_id: number | null
  transporter_id: number | null
  created_by_id: number | null
}

export type TransferMinAggregateOutputType = {
  id: number | null
  transfer_number: string | null
  origin_id: number | null
  destination_id: number | null
  transporter_id: number | null
  created_by_id: number | null
  notes: string | null
  created_at: Date | null
}

export type TransferMaxAggregateOutputType = {
  id: number | null
  transfer_number: string | null
  origin_id: number | null
  destination_id: number | null
  transporter_id: number | null
  created_by_id: number | null
  notes: string | null
  created_at: Date | null
}

export type TransferCountAggregateOutputType = {
  id: number
  transfer_number: number
  origin_id: number
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes: number
  created_at: number
  _all: number
}


export type TransferAvgAggregateInputType = {
  id?: true
  origin_id?: true
  destination_id?: true
  transporter_id?: true
  created_by_id?: true
}

export type TransferSumAggregateInputType = {
  id?: true
  origin_id?: true
  destination_id?: true
  transporter_id?: true
  created_by_id?: true
}

export type TransferMinAggregateInputType = {
  id?: true
  transfer_number?: true
  origin_id?: true
  destination_id?: true
  transporter_id?: true
  created_by_id?: true
  notes?: true
  created_at?: true
}

export type TransferMaxAggregateInputType = {
  id?: true
  transfer_number?: true
  origin_id?: true
  destination_id?: true
  transporter_id?: true
  created_by_id?: true
  notes?: true
  created_at?: true
}

export type TransferCountAggregateInputType = {
  id?: true
  transfer_number?: true
  origin_id?: true
  destination_id?: true
  transporter_id?: true
  created_by_id?: true
  notes?: true
  created_at?: true
  _all?: true
}

export type TransferAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Transfer to aggregate.
   */
  where?: Prisma.TransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transfers to fetch.
   */
  orderBy?: Prisma.TransferOrderByWithRelationInput | Prisma.TransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Transfers
  **/
  _count?: true | TransferCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TransferAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TransferSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransferMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransferMaxAggregateInputType
}

export type GetTransferAggregateType<T extends TransferAggregateArgs> = {
      [P in keyof T & keyof AggregateTransfer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransfer[P]>
    : Prisma.GetScalarType<T[P], AggregateTransfer[P]>
}




export type TransferGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferWhereInput
  orderBy?: Prisma.TransferOrderByWithAggregationInput | Prisma.TransferOrderByWithAggregationInput[]
  by: Prisma.TransferScalarFieldEnum[] | Prisma.TransferScalarFieldEnum
  having?: Prisma.TransferScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransferCountAggregateInputType | true
  _avg?: TransferAvgAggregateInputType
  _sum?: TransferSumAggregateInputType
  _min?: TransferMinAggregateInputType
  _max?: TransferMaxAggregateInputType
}

export type TransferGroupByOutputType = {
  id: number
  transfer_number: string
  origin_id: number
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes: string | null
  created_at: Date
  _count: TransferCountAggregateOutputType | null
  _avg: TransferAvgAggregateOutputType | null
  _sum: TransferSumAggregateOutputType | null
  _min: TransferMinAggregateOutputType | null
  _max: TransferMaxAggregateOutputType | null
}

type GetTransferGroupByPayload<T extends TransferGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransferGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransferGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransferGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransferGroupByOutputType[P]>
      }
    >
  > 



export type TransferWhereInput = {
  AND?: Prisma.TransferWhereInput | Prisma.TransferWhereInput[]
  OR?: Prisma.TransferWhereInput[]
  NOT?: Prisma.TransferWhereInput | Prisma.TransferWhereInput[]
  id?: Prisma.IntFilter<"Transfer"> | number
  transfer_number?: Prisma.StringFilter<"Transfer"> | string
  origin_id?: Prisma.IntFilter<"Transfer"> | number
  destination_id?: Prisma.IntFilter<"Transfer"> | number
  transporter_id?: Prisma.IntFilter<"Transfer"> | number
  created_by_id?: Prisma.IntFilter<"Transfer"> | number
  notes?: Prisma.StringNullableFilter<"Transfer"> | string | null
  created_at?: Prisma.DateTimeFilter<"Transfer"> | Date | string
  origin?: Prisma.XOR<Prisma.WarehouseScalarRelationFilter, Prisma.WarehouseWhereInput>
  destination?: Prisma.XOR<Prisma.WarehouseScalarRelationFilter, Prisma.WarehouseWhereInput>
  transporter?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  created_by?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  asset_transfers?: Prisma.AssetTransferListRelationFilter
}

export type TransferOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  transfer_number?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  origin?: Prisma.WarehouseOrderByWithRelationInput
  destination?: Prisma.WarehouseOrderByWithRelationInput
  transporter?: Prisma.OrganizationOrderByWithRelationInput
  created_by?: Prisma.UserOrderByWithRelationInput
  asset_transfers?: Prisma.AssetTransferOrderByRelationAggregateInput
}

export type TransferWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  transfer_number?: string
  AND?: Prisma.TransferWhereInput | Prisma.TransferWhereInput[]
  OR?: Prisma.TransferWhereInput[]
  NOT?: Prisma.TransferWhereInput | Prisma.TransferWhereInput[]
  origin_id?: Prisma.IntFilter<"Transfer"> | number
  destination_id?: Prisma.IntFilter<"Transfer"> | number
  transporter_id?: Prisma.IntFilter<"Transfer"> | number
  created_by_id?: Prisma.IntFilter<"Transfer"> | number
  notes?: Prisma.StringNullableFilter<"Transfer"> | string | null
  created_at?: Prisma.DateTimeFilter<"Transfer"> | Date | string
  origin?: Prisma.XOR<Prisma.WarehouseScalarRelationFilter, Prisma.WarehouseWhereInput>
  destination?: Prisma.XOR<Prisma.WarehouseScalarRelationFilter, Prisma.WarehouseWhereInput>
  transporter?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  created_by?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  asset_transfers?: Prisma.AssetTransferListRelationFilter
}, "id" | "transfer_number">

export type TransferOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  transfer_number?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.TransferCountOrderByAggregateInput
  _avg?: Prisma.TransferAvgOrderByAggregateInput
  _max?: Prisma.TransferMaxOrderByAggregateInput
  _min?: Prisma.TransferMinOrderByAggregateInput
  _sum?: Prisma.TransferSumOrderByAggregateInput
}

export type TransferScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransferScalarWhereWithAggregatesInput | Prisma.TransferScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransferScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransferScalarWhereWithAggregatesInput | Prisma.TransferScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Transfer"> | number
  transfer_number?: Prisma.StringWithAggregatesFilter<"Transfer"> | string
  origin_id?: Prisma.IntWithAggregatesFilter<"Transfer"> | number
  destination_id?: Prisma.IntWithAggregatesFilter<"Transfer"> | number
  transporter_id?: Prisma.IntWithAggregatesFilter<"Transfer"> | number
  created_by_id?: Prisma.IntWithAggregatesFilter<"Transfer"> | number
  notes?: Prisma.StringNullableWithAggregatesFilter<"Transfer"> | string | null
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Transfer"> | Date | string
}

export type TransferCreateInput = {
  transfer_number: string
  notes?: string | null
  created_at: Date | string
  origin: Prisma.WarehouseCreateNestedOneWithoutOrigin_transfersInput
  destination: Prisma.WarehouseCreateNestedOneWithoutDestination_transfersInput
  transporter: Prisma.OrganizationCreateNestedOneWithoutTransfersInput
  created_by: Prisma.UserCreateNestedOneWithoutTransfersInput
  asset_transfers?: Prisma.AssetTransferCreateNestedManyWithoutTransferInput
}

export type TransferUncheckedCreateInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedCreateNestedManyWithoutTransferInput
}

export type TransferUpdateInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.WarehouseUpdateOneRequiredWithoutOrigin_transfersNestedInput
  destination?: Prisma.WarehouseUpdateOneRequiredWithoutDestination_transfersNestedInput
  transporter?: Prisma.OrganizationUpdateOneRequiredWithoutTransfersNestedInput
  created_by?: Prisma.UserUpdateOneRequiredWithoutTransfersNestedInput
  asset_transfers?: Prisma.AssetTransferUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedUpdateManyWithoutTransferNestedInput
}

export type TransferCreateManyInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
}

export type TransferUpdateManyMutationInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transfer_number?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type TransferAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
}

export type TransferMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transfer_number?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type TransferMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transfer_number?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type TransferSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  origin_id?: Prisma.SortOrder
  destination_id?: Prisma.SortOrder
  transporter_id?: Prisma.SortOrder
  created_by_id?: Prisma.SortOrder
}

export type TransferScalarRelationFilter = {
  is?: Prisma.TransferWhereInput
  isNot?: Prisma.TransferWhereInput
}

export type TransferListRelationFilter = {
  every?: Prisma.TransferWhereInput
  some?: Prisma.TransferWhereInput
  none?: Prisma.TransferWhereInput
}

export type TransferOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransferCreateNestedOneWithoutAsset_transfersInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutAsset_transfersInput, Prisma.TransferUncheckedCreateWithoutAsset_transfersInput>
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutAsset_transfersInput
  connect?: Prisma.TransferWhereUniqueInput
}

export type TransferUpdateOneRequiredWithoutAsset_transfersNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutAsset_transfersInput, Prisma.TransferUncheckedCreateWithoutAsset_transfersInput>
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutAsset_transfersInput
  upsert?: Prisma.TransferUpsertWithoutAsset_transfersInput
  connect?: Prisma.TransferWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TransferUpdateToOneWithWhereWithoutAsset_transfersInput, Prisma.TransferUpdateWithoutAsset_transfersInput>, Prisma.TransferUncheckedUpdateWithoutAsset_transfersInput>
}

export type TransferCreateNestedManyWithoutOriginInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutOriginInput, Prisma.TransferUncheckedCreateWithoutOriginInput> | Prisma.TransferCreateWithoutOriginInput[] | Prisma.TransferUncheckedCreateWithoutOriginInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutOriginInput | Prisma.TransferCreateOrConnectWithoutOriginInput[]
  createMany?: Prisma.TransferCreateManyOriginInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferCreateNestedManyWithoutDestinationInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutDestinationInput, Prisma.TransferUncheckedCreateWithoutDestinationInput> | Prisma.TransferCreateWithoutDestinationInput[] | Prisma.TransferUncheckedCreateWithoutDestinationInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutDestinationInput | Prisma.TransferCreateOrConnectWithoutDestinationInput[]
  createMany?: Prisma.TransferCreateManyDestinationInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUncheckedCreateNestedManyWithoutOriginInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutOriginInput, Prisma.TransferUncheckedCreateWithoutOriginInput> | Prisma.TransferCreateWithoutOriginInput[] | Prisma.TransferUncheckedCreateWithoutOriginInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutOriginInput | Prisma.TransferCreateOrConnectWithoutOriginInput[]
  createMany?: Prisma.TransferCreateManyOriginInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUncheckedCreateNestedManyWithoutDestinationInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutDestinationInput, Prisma.TransferUncheckedCreateWithoutDestinationInput> | Prisma.TransferCreateWithoutDestinationInput[] | Prisma.TransferUncheckedCreateWithoutDestinationInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutDestinationInput | Prisma.TransferCreateOrConnectWithoutDestinationInput[]
  createMany?: Prisma.TransferCreateManyDestinationInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUpdateManyWithoutOriginNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutOriginInput, Prisma.TransferUncheckedCreateWithoutOriginInput> | Prisma.TransferCreateWithoutOriginInput[] | Prisma.TransferUncheckedCreateWithoutOriginInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutOriginInput | Prisma.TransferCreateOrConnectWithoutOriginInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutOriginInput | Prisma.TransferUpsertWithWhereUniqueWithoutOriginInput[]
  createMany?: Prisma.TransferCreateManyOriginInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutOriginInput | Prisma.TransferUpdateWithWhereUniqueWithoutOriginInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutOriginInput | Prisma.TransferUpdateManyWithWhereWithoutOriginInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferUpdateManyWithoutDestinationNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutDestinationInput, Prisma.TransferUncheckedCreateWithoutDestinationInput> | Prisma.TransferCreateWithoutDestinationInput[] | Prisma.TransferUncheckedCreateWithoutDestinationInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutDestinationInput | Prisma.TransferCreateOrConnectWithoutDestinationInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutDestinationInput | Prisma.TransferUpsertWithWhereUniqueWithoutDestinationInput[]
  createMany?: Prisma.TransferCreateManyDestinationInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutDestinationInput | Prisma.TransferUpdateWithWhereUniqueWithoutDestinationInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutDestinationInput | Prisma.TransferUpdateManyWithWhereWithoutDestinationInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferUncheckedUpdateManyWithoutOriginNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutOriginInput, Prisma.TransferUncheckedCreateWithoutOriginInput> | Prisma.TransferCreateWithoutOriginInput[] | Prisma.TransferUncheckedCreateWithoutOriginInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutOriginInput | Prisma.TransferCreateOrConnectWithoutOriginInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutOriginInput | Prisma.TransferUpsertWithWhereUniqueWithoutOriginInput[]
  createMany?: Prisma.TransferCreateManyOriginInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutOriginInput | Prisma.TransferUpdateWithWhereUniqueWithoutOriginInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutOriginInput | Prisma.TransferUpdateManyWithWhereWithoutOriginInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferUncheckedUpdateManyWithoutDestinationNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutDestinationInput, Prisma.TransferUncheckedCreateWithoutDestinationInput> | Prisma.TransferCreateWithoutDestinationInput[] | Prisma.TransferUncheckedCreateWithoutDestinationInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutDestinationInput | Prisma.TransferCreateOrConnectWithoutDestinationInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutDestinationInput | Prisma.TransferUpsertWithWhereUniqueWithoutDestinationInput[]
  createMany?: Prisma.TransferCreateManyDestinationInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutDestinationInput | Prisma.TransferUpdateWithWhereUniqueWithoutDestinationInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutDestinationInput | Prisma.TransferUpdateManyWithWhereWithoutDestinationInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferCreateNestedManyWithoutCreated_byInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutCreated_byInput, Prisma.TransferUncheckedCreateWithoutCreated_byInput> | Prisma.TransferCreateWithoutCreated_byInput[] | Prisma.TransferUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutCreated_byInput | Prisma.TransferCreateOrConnectWithoutCreated_byInput[]
  createMany?: Prisma.TransferCreateManyCreated_byInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUncheckedCreateNestedManyWithoutCreated_byInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutCreated_byInput, Prisma.TransferUncheckedCreateWithoutCreated_byInput> | Prisma.TransferCreateWithoutCreated_byInput[] | Prisma.TransferUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutCreated_byInput | Prisma.TransferCreateOrConnectWithoutCreated_byInput[]
  createMany?: Prisma.TransferCreateManyCreated_byInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUpdateManyWithoutCreated_byNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutCreated_byInput, Prisma.TransferUncheckedCreateWithoutCreated_byInput> | Prisma.TransferCreateWithoutCreated_byInput[] | Prisma.TransferUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutCreated_byInput | Prisma.TransferCreateOrConnectWithoutCreated_byInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutCreated_byInput | Prisma.TransferUpsertWithWhereUniqueWithoutCreated_byInput[]
  createMany?: Prisma.TransferCreateManyCreated_byInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutCreated_byInput | Prisma.TransferUpdateWithWhereUniqueWithoutCreated_byInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutCreated_byInput | Prisma.TransferUpdateManyWithWhereWithoutCreated_byInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferUncheckedUpdateManyWithoutCreated_byNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutCreated_byInput, Prisma.TransferUncheckedCreateWithoutCreated_byInput> | Prisma.TransferCreateWithoutCreated_byInput[] | Prisma.TransferUncheckedCreateWithoutCreated_byInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutCreated_byInput | Prisma.TransferCreateOrConnectWithoutCreated_byInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutCreated_byInput | Prisma.TransferUpsertWithWhereUniqueWithoutCreated_byInput[]
  createMany?: Prisma.TransferCreateManyCreated_byInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutCreated_byInput | Prisma.TransferUpdateWithWhereUniqueWithoutCreated_byInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutCreated_byInput | Prisma.TransferUpdateManyWithWhereWithoutCreated_byInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferCreateNestedManyWithoutTransporterInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutTransporterInput, Prisma.TransferUncheckedCreateWithoutTransporterInput> | Prisma.TransferCreateWithoutTransporterInput[] | Prisma.TransferUncheckedCreateWithoutTransporterInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutTransporterInput | Prisma.TransferCreateOrConnectWithoutTransporterInput[]
  createMany?: Prisma.TransferCreateManyTransporterInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUncheckedCreateNestedManyWithoutTransporterInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutTransporterInput, Prisma.TransferUncheckedCreateWithoutTransporterInput> | Prisma.TransferCreateWithoutTransporterInput[] | Prisma.TransferUncheckedCreateWithoutTransporterInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutTransporterInput | Prisma.TransferCreateOrConnectWithoutTransporterInput[]
  createMany?: Prisma.TransferCreateManyTransporterInputEnvelope
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
}

export type TransferUpdateManyWithoutTransporterNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutTransporterInput, Prisma.TransferUncheckedCreateWithoutTransporterInput> | Prisma.TransferCreateWithoutTransporterInput[] | Prisma.TransferUncheckedCreateWithoutTransporterInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutTransporterInput | Prisma.TransferCreateOrConnectWithoutTransporterInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutTransporterInput | Prisma.TransferUpsertWithWhereUniqueWithoutTransporterInput[]
  createMany?: Prisma.TransferCreateManyTransporterInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutTransporterInput | Prisma.TransferUpdateWithWhereUniqueWithoutTransporterInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutTransporterInput | Prisma.TransferUpdateManyWithWhereWithoutTransporterInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferUncheckedUpdateManyWithoutTransporterNestedInput = {
  create?: Prisma.XOR<Prisma.TransferCreateWithoutTransporterInput, Prisma.TransferUncheckedCreateWithoutTransporterInput> | Prisma.TransferCreateWithoutTransporterInput[] | Prisma.TransferUncheckedCreateWithoutTransporterInput[]
  connectOrCreate?: Prisma.TransferCreateOrConnectWithoutTransporterInput | Prisma.TransferCreateOrConnectWithoutTransporterInput[]
  upsert?: Prisma.TransferUpsertWithWhereUniqueWithoutTransporterInput | Prisma.TransferUpsertWithWhereUniqueWithoutTransporterInput[]
  createMany?: Prisma.TransferCreateManyTransporterInputEnvelope
  set?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  disconnect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  delete?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  connect?: Prisma.TransferWhereUniqueInput | Prisma.TransferWhereUniqueInput[]
  update?: Prisma.TransferUpdateWithWhereUniqueWithoutTransporterInput | Prisma.TransferUpdateWithWhereUniqueWithoutTransporterInput[]
  updateMany?: Prisma.TransferUpdateManyWithWhereWithoutTransporterInput | Prisma.TransferUpdateManyWithWhereWithoutTransporterInput[]
  deleteMany?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
}

export type TransferCreateWithoutAsset_transfersInput = {
  transfer_number: string
  notes?: string | null
  created_at: Date | string
  origin: Prisma.WarehouseCreateNestedOneWithoutOrigin_transfersInput
  destination: Prisma.WarehouseCreateNestedOneWithoutDestination_transfersInput
  transporter: Prisma.OrganizationCreateNestedOneWithoutTransfersInput
  created_by: Prisma.UserCreateNestedOneWithoutTransfersInput
}

export type TransferUncheckedCreateWithoutAsset_transfersInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
}

export type TransferCreateOrConnectWithoutAsset_transfersInput = {
  where: Prisma.TransferWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferCreateWithoutAsset_transfersInput, Prisma.TransferUncheckedCreateWithoutAsset_transfersInput>
}

export type TransferUpsertWithoutAsset_transfersInput = {
  update: Prisma.XOR<Prisma.TransferUpdateWithoutAsset_transfersInput, Prisma.TransferUncheckedUpdateWithoutAsset_transfersInput>
  create: Prisma.XOR<Prisma.TransferCreateWithoutAsset_transfersInput, Prisma.TransferUncheckedCreateWithoutAsset_transfersInput>
  where?: Prisma.TransferWhereInput
}

export type TransferUpdateToOneWithWhereWithoutAsset_transfersInput = {
  where?: Prisma.TransferWhereInput
  data: Prisma.XOR<Prisma.TransferUpdateWithoutAsset_transfersInput, Prisma.TransferUncheckedUpdateWithoutAsset_transfersInput>
}

export type TransferUpdateWithoutAsset_transfersInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.WarehouseUpdateOneRequiredWithoutOrigin_transfersNestedInput
  destination?: Prisma.WarehouseUpdateOneRequiredWithoutDestination_transfersNestedInput
  transporter?: Prisma.OrganizationUpdateOneRequiredWithoutTransfersNestedInput
  created_by?: Prisma.UserUpdateOneRequiredWithoutTransfersNestedInput
}

export type TransferUncheckedUpdateWithoutAsset_transfersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferCreateWithoutOriginInput = {
  transfer_number: string
  notes?: string | null
  created_at: Date | string
  destination: Prisma.WarehouseCreateNestedOneWithoutDestination_transfersInput
  transporter: Prisma.OrganizationCreateNestedOneWithoutTransfersInput
  created_by: Prisma.UserCreateNestedOneWithoutTransfersInput
  asset_transfers?: Prisma.AssetTransferCreateNestedManyWithoutTransferInput
}

export type TransferUncheckedCreateWithoutOriginInput = {
  id?: number
  transfer_number: string
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedCreateNestedManyWithoutTransferInput
}

export type TransferCreateOrConnectWithoutOriginInput = {
  where: Prisma.TransferWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferCreateWithoutOriginInput, Prisma.TransferUncheckedCreateWithoutOriginInput>
}

export type TransferCreateManyOriginInputEnvelope = {
  data: Prisma.TransferCreateManyOriginInput | Prisma.TransferCreateManyOriginInput[]
  skipDuplicates?: boolean
}

export type TransferCreateWithoutDestinationInput = {
  transfer_number: string
  notes?: string | null
  created_at: Date | string
  origin: Prisma.WarehouseCreateNestedOneWithoutOrigin_transfersInput
  transporter: Prisma.OrganizationCreateNestedOneWithoutTransfersInput
  created_by: Prisma.UserCreateNestedOneWithoutTransfersInput
  asset_transfers?: Prisma.AssetTransferCreateNestedManyWithoutTransferInput
}

export type TransferUncheckedCreateWithoutDestinationInput = {
  id?: number
  transfer_number: string
  origin_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedCreateNestedManyWithoutTransferInput
}

export type TransferCreateOrConnectWithoutDestinationInput = {
  where: Prisma.TransferWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferCreateWithoutDestinationInput, Prisma.TransferUncheckedCreateWithoutDestinationInput>
}

export type TransferCreateManyDestinationInputEnvelope = {
  data: Prisma.TransferCreateManyDestinationInput | Prisma.TransferCreateManyDestinationInput[]
  skipDuplicates?: boolean
}

export type TransferUpsertWithWhereUniqueWithoutOriginInput = {
  where: Prisma.TransferWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferUpdateWithoutOriginInput, Prisma.TransferUncheckedUpdateWithoutOriginInput>
  create: Prisma.XOR<Prisma.TransferCreateWithoutOriginInput, Prisma.TransferUncheckedCreateWithoutOriginInput>
}

export type TransferUpdateWithWhereUniqueWithoutOriginInput = {
  where: Prisma.TransferWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferUpdateWithoutOriginInput, Prisma.TransferUncheckedUpdateWithoutOriginInput>
}

export type TransferUpdateManyWithWhereWithoutOriginInput = {
  where: Prisma.TransferScalarWhereInput
  data: Prisma.XOR<Prisma.TransferUpdateManyMutationInput, Prisma.TransferUncheckedUpdateManyWithoutOriginInput>
}

export type TransferScalarWhereInput = {
  AND?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
  OR?: Prisma.TransferScalarWhereInput[]
  NOT?: Prisma.TransferScalarWhereInput | Prisma.TransferScalarWhereInput[]
  id?: Prisma.IntFilter<"Transfer"> | number
  transfer_number?: Prisma.StringFilter<"Transfer"> | string
  origin_id?: Prisma.IntFilter<"Transfer"> | number
  destination_id?: Prisma.IntFilter<"Transfer"> | number
  transporter_id?: Prisma.IntFilter<"Transfer"> | number
  created_by_id?: Prisma.IntFilter<"Transfer"> | number
  notes?: Prisma.StringNullableFilter<"Transfer"> | string | null
  created_at?: Prisma.DateTimeFilter<"Transfer"> | Date | string
}

export type TransferUpsertWithWhereUniqueWithoutDestinationInput = {
  where: Prisma.TransferWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferUpdateWithoutDestinationInput, Prisma.TransferUncheckedUpdateWithoutDestinationInput>
  create: Prisma.XOR<Prisma.TransferCreateWithoutDestinationInput, Prisma.TransferUncheckedCreateWithoutDestinationInput>
}

export type TransferUpdateWithWhereUniqueWithoutDestinationInput = {
  where: Prisma.TransferWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferUpdateWithoutDestinationInput, Prisma.TransferUncheckedUpdateWithoutDestinationInput>
}

export type TransferUpdateManyWithWhereWithoutDestinationInput = {
  where: Prisma.TransferScalarWhereInput
  data: Prisma.XOR<Prisma.TransferUpdateManyMutationInput, Prisma.TransferUncheckedUpdateManyWithoutDestinationInput>
}

export type TransferCreateWithoutCreated_byInput = {
  transfer_number: string
  notes?: string | null
  created_at: Date | string
  origin: Prisma.WarehouseCreateNestedOneWithoutOrigin_transfersInput
  destination: Prisma.WarehouseCreateNestedOneWithoutDestination_transfersInput
  transporter: Prisma.OrganizationCreateNestedOneWithoutTransfersInput
  asset_transfers?: Prisma.AssetTransferCreateNestedManyWithoutTransferInput
}

export type TransferUncheckedCreateWithoutCreated_byInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  transporter_id: number
  notes?: string | null
  created_at: Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedCreateNestedManyWithoutTransferInput
}

export type TransferCreateOrConnectWithoutCreated_byInput = {
  where: Prisma.TransferWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferCreateWithoutCreated_byInput, Prisma.TransferUncheckedCreateWithoutCreated_byInput>
}

export type TransferCreateManyCreated_byInputEnvelope = {
  data: Prisma.TransferCreateManyCreated_byInput | Prisma.TransferCreateManyCreated_byInput[]
  skipDuplicates?: boolean
}

export type TransferUpsertWithWhereUniqueWithoutCreated_byInput = {
  where: Prisma.TransferWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferUpdateWithoutCreated_byInput, Prisma.TransferUncheckedUpdateWithoutCreated_byInput>
  create: Prisma.XOR<Prisma.TransferCreateWithoutCreated_byInput, Prisma.TransferUncheckedCreateWithoutCreated_byInput>
}

export type TransferUpdateWithWhereUniqueWithoutCreated_byInput = {
  where: Prisma.TransferWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferUpdateWithoutCreated_byInput, Prisma.TransferUncheckedUpdateWithoutCreated_byInput>
}

export type TransferUpdateManyWithWhereWithoutCreated_byInput = {
  where: Prisma.TransferScalarWhereInput
  data: Prisma.XOR<Prisma.TransferUpdateManyMutationInput, Prisma.TransferUncheckedUpdateManyWithoutCreated_byInput>
}

export type TransferCreateWithoutTransporterInput = {
  transfer_number: string
  notes?: string | null
  created_at: Date | string
  origin: Prisma.WarehouseCreateNestedOneWithoutOrigin_transfersInput
  destination: Prisma.WarehouseCreateNestedOneWithoutDestination_transfersInput
  created_by: Prisma.UserCreateNestedOneWithoutTransfersInput
  asset_transfers?: Prisma.AssetTransferCreateNestedManyWithoutTransferInput
}

export type TransferUncheckedCreateWithoutTransporterInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedCreateNestedManyWithoutTransferInput
}

export type TransferCreateOrConnectWithoutTransporterInput = {
  where: Prisma.TransferWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferCreateWithoutTransporterInput, Prisma.TransferUncheckedCreateWithoutTransporterInput>
}

export type TransferCreateManyTransporterInputEnvelope = {
  data: Prisma.TransferCreateManyTransporterInput | Prisma.TransferCreateManyTransporterInput[]
  skipDuplicates?: boolean
}

export type TransferUpsertWithWhereUniqueWithoutTransporterInput = {
  where: Prisma.TransferWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferUpdateWithoutTransporterInput, Prisma.TransferUncheckedUpdateWithoutTransporterInput>
  create: Prisma.XOR<Prisma.TransferCreateWithoutTransporterInput, Prisma.TransferUncheckedCreateWithoutTransporterInput>
}

export type TransferUpdateWithWhereUniqueWithoutTransporterInput = {
  where: Prisma.TransferWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferUpdateWithoutTransporterInput, Prisma.TransferUncheckedUpdateWithoutTransporterInput>
}

export type TransferUpdateManyWithWhereWithoutTransporterInput = {
  where: Prisma.TransferScalarWhereInput
  data: Prisma.XOR<Prisma.TransferUpdateManyMutationInput, Prisma.TransferUncheckedUpdateManyWithoutTransporterInput>
}

export type TransferCreateManyOriginInput = {
  id?: number
  transfer_number: string
  destination_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
}

export type TransferCreateManyDestinationInput = {
  id?: number
  transfer_number: string
  origin_id: number
  transporter_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
}

export type TransferUpdateWithoutOriginInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  destination?: Prisma.WarehouseUpdateOneRequiredWithoutDestination_transfersNestedInput
  transporter?: Prisma.OrganizationUpdateOneRequiredWithoutTransfersNestedInput
  created_by?: Prisma.UserUpdateOneRequiredWithoutTransfersNestedInput
  asset_transfers?: Prisma.AssetTransferUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateWithoutOriginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateManyWithoutOriginInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferUpdateWithoutDestinationInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.WarehouseUpdateOneRequiredWithoutOrigin_transfersNestedInput
  transporter?: Prisma.OrganizationUpdateOneRequiredWithoutTransfersNestedInput
  created_by?: Prisma.UserUpdateOneRequiredWithoutTransfersNestedInput
  asset_transfers?: Prisma.AssetTransferUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateWithoutDestinationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateManyWithoutDestinationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferCreateManyCreated_byInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  transporter_id: number
  notes?: string | null
  created_at: Date | string
}

export type TransferUpdateWithoutCreated_byInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.WarehouseUpdateOneRequiredWithoutOrigin_transfersNestedInput
  destination?: Prisma.WarehouseUpdateOneRequiredWithoutDestination_transfersNestedInput
  transporter?: Prisma.OrganizationUpdateOneRequiredWithoutTransfersNestedInput
  asset_transfers?: Prisma.AssetTransferUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateWithoutCreated_byInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateManyWithoutCreated_byInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  transporter_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferCreateManyTransporterInput = {
  id?: number
  transfer_number: string
  origin_id: number
  destination_id: number
  created_by_id: number
  notes?: string | null
  created_at: Date | string
}

export type TransferUpdateWithoutTransporterInput = {
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.WarehouseUpdateOneRequiredWithoutOrigin_transfersNestedInput
  destination?: Prisma.WarehouseUpdateOneRequiredWithoutDestination_transfersNestedInput
  created_by?: Prisma.UserUpdateOneRequiredWithoutTransfersNestedInput
  asset_transfers?: Prisma.AssetTransferUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateWithoutTransporterInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  asset_transfers?: Prisma.AssetTransferUncheckedUpdateManyWithoutTransferNestedInput
}

export type TransferUncheckedUpdateManyWithoutTransporterInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_number?: Prisma.StringFieldUpdateOperationsInput | string
  origin_id?: Prisma.IntFieldUpdateOperationsInput | number
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  created_by_id?: Prisma.IntFieldUpdateOperationsInput | number
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TransferCountOutputType
 */

export type TransferCountOutputType = {
  asset_transfers: number
}

export type TransferCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset_transfers?: boolean | TransferCountOutputTypeCountAsset_transfersArgs
}

/**
 * TransferCountOutputType without action
 */
export type TransferCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferCountOutputType
   */
  select?: Prisma.TransferCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TransferCountOutputType without action
 */
export type TransferCountOutputTypeCountAsset_transfersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetTransferWhereInput
}


export type TransferSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transfer_number?: boolean
  origin_id?: boolean
  destination_id?: boolean
  transporter_id?: boolean
  created_by_id?: boolean
  notes?: boolean
  created_at?: boolean
  origin?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  destination?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  transporter?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  asset_transfers?: boolean | Prisma.Transfer$asset_transfersArgs<ExtArgs>
  _count?: boolean | Prisma.TransferCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transfer"]>

export type TransferSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transfer_number?: boolean
  origin_id?: boolean
  destination_id?: boolean
  transporter_id?: boolean
  created_by_id?: boolean
  notes?: boolean
  created_at?: boolean
  origin?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  destination?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  transporter?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transfer"]>

export type TransferSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transfer_number?: boolean
  origin_id?: boolean
  destination_id?: boolean
  transporter_id?: boolean
  created_by_id?: boolean
  notes?: boolean
  created_at?: boolean
  origin?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  destination?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  transporter?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transfer"]>

export type TransferSelectScalar = {
  id?: boolean
  transfer_number?: boolean
  origin_id?: boolean
  destination_id?: boolean
  transporter_id?: boolean
  created_by_id?: boolean
  notes?: boolean
  created_at?: boolean
}

export type TransferOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "transfer_number" | "origin_id" | "destination_id" | "transporter_id" | "created_by_id" | "notes" | "created_at", ExtArgs["result"]["transfer"]>
export type TransferInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  origin?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  destination?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  transporter?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  asset_transfers?: boolean | Prisma.Transfer$asset_transfersArgs<ExtArgs>
  _count?: boolean | Prisma.TransferCountOutputTypeDefaultArgs<ExtArgs>
}
export type TransferIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  origin?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  destination?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  transporter?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TransferIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  origin?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  destination?: boolean | Prisma.WarehouseDefaultArgs<ExtArgs>
  transporter?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  created_by?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TransferPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Transfer"
  objects: {
    origin: Prisma.$WarehousePayload<ExtArgs>
    destination: Prisma.$WarehousePayload<ExtArgs>
    transporter: Prisma.$OrganizationPayload<ExtArgs>
    created_by: Prisma.$UserPayload<ExtArgs>
    asset_transfers: Prisma.$AssetTransferPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    transfer_number: string
    origin_id: number
    destination_id: number
    transporter_id: number
    created_by_id: number
    notes: string | null
    created_at: Date
  }, ExtArgs["result"]["transfer"]>
  composites: {}
}

export type TransferGetPayload<S extends boolean | null | undefined | TransferDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransferPayload, S>

export type TransferCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransferFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransferCountAggregateInputType | true
  }

export interface TransferDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transfer'], meta: { name: 'Transfer' } }
  /**
   * Find zero or one Transfer that matches the filter.
   * @param {TransferFindUniqueArgs} args - Arguments to find a Transfer
   * @example
   * // Get one Transfer
   * const transfer = await prisma.transfer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransferFindUniqueArgs>(args: Prisma.SelectSubset<T, TransferFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Transfer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransferFindUniqueOrThrowArgs} args - Arguments to find a Transfer
   * @example
   * // Get one Transfer
   * const transfer = await prisma.transfer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransferFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransferFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Transfer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferFindFirstArgs} args - Arguments to find a Transfer
   * @example
   * // Get one Transfer
   * const transfer = await prisma.transfer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransferFindFirstArgs>(args?: Prisma.SelectSubset<T, TransferFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Transfer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferFindFirstOrThrowArgs} args - Arguments to find a Transfer
   * @example
   * // Get one Transfer
   * const transfer = await prisma.transfer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransferFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransferFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Transfers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Transfers
   * const transfers = await prisma.transfer.findMany()
   * 
   * // Get first 10 Transfers
   * const transfers = await prisma.transfer.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transferWithIdOnly = await prisma.transfer.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransferFindManyArgs>(args?: Prisma.SelectSubset<T, TransferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Transfer.
   * @param {TransferCreateArgs} args - Arguments to create a Transfer.
   * @example
   * // Create one Transfer
   * const Transfer = await prisma.transfer.create({
   *   data: {
   *     // ... data to create a Transfer
   *   }
   * })
   * 
   */
  create<T extends TransferCreateArgs>(args: Prisma.SelectSubset<T, TransferCreateArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Transfers.
   * @param {TransferCreateManyArgs} args - Arguments to create many Transfers.
   * @example
   * // Create many Transfers
   * const transfer = await prisma.transfer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransferCreateManyArgs>(args?: Prisma.SelectSubset<T, TransferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Transfers and returns the data saved in the database.
   * @param {TransferCreateManyAndReturnArgs} args - Arguments to create many Transfers.
   * @example
   * // Create many Transfers
   * const transfer = await prisma.transfer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Transfers and only return the `id`
   * const transferWithIdOnly = await prisma.transfer.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransferCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransferCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Transfer.
   * @param {TransferDeleteArgs} args - Arguments to delete one Transfer.
   * @example
   * // Delete one Transfer
   * const Transfer = await prisma.transfer.delete({
   *   where: {
   *     // ... filter to delete one Transfer
   *   }
   * })
   * 
   */
  delete<T extends TransferDeleteArgs>(args: Prisma.SelectSubset<T, TransferDeleteArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Transfer.
   * @param {TransferUpdateArgs} args - Arguments to update one Transfer.
   * @example
   * // Update one Transfer
   * const transfer = await prisma.transfer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransferUpdateArgs>(args: Prisma.SelectSubset<T, TransferUpdateArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Transfers.
   * @param {TransferDeleteManyArgs} args - Arguments to filter Transfers to delete.
   * @example
   * // Delete a few Transfers
   * const { count } = await prisma.transfer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransferDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Transfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Transfers
   * const transfer = await prisma.transfer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransferUpdateManyArgs>(args: Prisma.SelectSubset<T, TransferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Transfers and returns the data updated in the database.
   * @param {TransferUpdateManyAndReturnArgs} args - Arguments to update many Transfers.
   * @example
   * // Update many Transfers
   * const transfer = await prisma.transfer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Transfers and only return the `id`
   * const transferWithIdOnly = await prisma.transfer.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransferUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransferUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Transfer.
   * @param {TransferUpsertArgs} args - Arguments to update or create a Transfer.
   * @example
   * // Update or create a Transfer
   * const transfer = await prisma.transfer.upsert({
   *   create: {
   *     // ... data to create a Transfer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Transfer we want to update
   *   }
   * })
   */
  upsert<T extends TransferUpsertArgs>(args: Prisma.SelectSubset<T, TransferUpsertArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Transfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferCountArgs} args - Arguments to filter Transfers to count.
   * @example
   * // Count the number of Transfers
   * const count = await prisma.transfer.count({
   *   where: {
   *     // ... the filter for the Transfers we want to count
   *   }
   * })
  **/
  count<T extends TransferCountArgs>(
    args?: Prisma.Subset<T, TransferCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransferCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Transfer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransferAggregateArgs>(args: Prisma.Subset<T, TransferAggregateArgs>): Prisma.PrismaPromise<GetTransferAggregateType<T>>

  /**
   * Group by Transfer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransferGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransferGroupByArgs['orderBy'] }
      : { orderBy?: TransferGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Transfer model
 */
readonly fields: TransferFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Transfer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransferClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  origin<T extends Prisma.WarehouseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WarehouseDefaultArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  destination<T extends Prisma.WarehouseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WarehouseDefaultArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  transporter<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  created_by<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  asset_transfers<T extends Prisma.Transfer$asset_transfersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Transfer$asset_transfersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Transfer model
 */
export interface TransferFieldRefs {
  readonly id: Prisma.FieldRef<"Transfer", 'Int'>
  readonly transfer_number: Prisma.FieldRef<"Transfer", 'String'>
  readonly origin_id: Prisma.FieldRef<"Transfer", 'Int'>
  readonly destination_id: Prisma.FieldRef<"Transfer", 'Int'>
  readonly transporter_id: Prisma.FieldRef<"Transfer", 'Int'>
  readonly created_by_id: Prisma.FieldRef<"Transfer", 'Int'>
  readonly notes: Prisma.FieldRef<"Transfer", 'String'>
  readonly created_at: Prisma.FieldRef<"Transfer", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Transfer findUnique
 */
export type TransferFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * Filter, which Transfer to fetch.
   */
  where: Prisma.TransferWhereUniqueInput
}

/**
 * Transfer findUniqueOrThrow
 */
export type TransferFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * Filter, which Transfer to fetch.
   */
  where: Prisma.TransferWhereUniqueInput
}

/**
 * Transfer findFirst
 */
export type TransferFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * Filter, which Transfer to fetch.
   */
  where?: Prisma.TransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transfers to fetch.
   */
  orderBy?: Prisma.TransferOrderByWithRelationInput | Prisma.TransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Transfers.
   */
  cursor?: Prisma.TransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Transfers.
   */
  distinct?: Prisma.TransferScalarFieldEnum | Prisma.TransferScalarFieldEnum[]
}

/**
 * Transfer findFirstOrThrow
 */
export type TransferFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * Filter, which Transfer to fetch.
   */
  where?: Prisma.TransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transfers to fetch.
   */
  orderBy?: Prisma.TransferOrderByWithRelationInput | Prisma.TransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Transfers.
   */
  cursor?: Prisma.TransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Transfers.
   */
  distinct?: Prisma.TransferScalarFieldEnum | Prisma.TransferScalarFieldEnum[]
}

/**
 * Transfer findMany
 */
export type TransferFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * Filter, which Transfers to fetch.
   */
  where?: Prisma.TransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Transfers to fetch.
   */
  orderBy?: Prisma.TransferOrderByWithRelationInput | Prisma.TransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Transfers.
   */
  cursor?: Prisma.TransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Transfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Transfers.
   */
  skip?: number
  distinct?: Prisma.TransferScalarFieldEnum | Prisma.TransferScalarFieldEnum[]
}

/**
 * Transfer create
 */
export type TransferCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * The data needed to create a Transfer.
   */
  data: Prisma.XOR<Prisma.TransferCreateInput, Prisma.TransferUncheckedCreateInput>
}

/**
 * Transfer createMany
 */
export type TransferCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Transfers.
   */
  data: Prisma.TransferCreateManyInput | Prisma.TransferCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Transfer createManyAndReturn
 */
export type TransferCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * The data used to create many Transfers.
   */
  data: Prisma.TransferCreateManyInput | Prisma.TransferCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Transfer update
 */
export type TransferUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * The data needed to update a Transfer.
   */
  data: Prisma.XOR<Prisma.TransferUpdateInput, Prisma.TransferUncheckedUpdateInput>
  /**
   * Choose, which Transfer to update.
   */
  where: Prisma.TransferWhereUniqueInput
}

/**
 * Transfer updateMany
 */
export type TransferUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Transfers.
   */
  data: Prisma.XOR<Prisma.TransferUpdateManyMutationInput, Prisma.TransferUncheckedUpdateManyInput>
  /**
   * Filter which Transfers to update
   */
  where?: Prisma.TransferWhereInput
  /**
   * Limit how many Transfers to update.
   */
  limit?: number
}

/**
 * Transfer updateManyAndReturn
 */
export type TransferUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * The data used to update Transfers.
   */
  data: Prisma.XOR<Prisma.TransferUpdateManyMutationInput, Prisma.TransferUncheckedUpdateManyInput>
  /**
   * Filter which Transfers to update
   */
  where?: Prisma.TransferWhereInput
  /**
   * Limit how many Transfers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Transfer upsert
 */
export type TransferUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * The filter to search for the Transfer to update in case it exists.
   */
  where: Prisma.TransferWhereUniqueInput
  /**
   * In case the Transfer found by the `where` argument doesn't exist, create a new Transfer with this data.
   */
  create: Prisma.XOR<Prisma.TransferCreateInput, Prisma.TransferUncheckedCreateInput>
  /**
   * In case the Transfer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransferUpdateInput, Prisma.TransferUncheckedUpdateInput>
}

/**
 * Transfer delete
 */
export type TransferDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  /**
   * Filter which Transfer to delete.
   */
  where: Prisma.TransferWhereUniqueInput
}

/**
 * Transfer deleteMany
 */
export type TransferDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Transfers to delete
   */
  where?: Prisma.TransferWhereInput
  /**
   * Limit how many Transfers to delete.
   */
  limit?: number
}

/**
 * Transfer.asset_transfers
 */
export type Transfer$asset_transfersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  where?: Prisma.AssetTransferWhereInput
  orderBy?: Prisma.AssetTransferOrderByWithRelationInput | Prisma.AssetTransferOrderByWithRelationInput[]
  cursor?: Prisma.AssetTransferWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetTransferScalarFieldEnum | Prisma.AssetTransferScalarFieldEnum[]
}

/**
 * Transfer without action
 */
export type TransferDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
}
