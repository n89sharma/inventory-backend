
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Warehouse` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Warehouse
 * 
 */
export type WarehouseModel = runtime.Types.Result.DefaultSelection<Prisma.$WarehousePayload>

export type AggregateWarehouse = {
  _count: WarehouseCountAggregateOutputType | null
  _avg: WarehouseAvgAggregateOutputType | null
  _sum: WarehouseSumAggregateOutputType | null
  _min: WarehouseMinAggregateOutputType | null
  _max: WarehouseMaxAggregateOutputType | null
}

export type WarehouseAvgAggregateOutputType = {
  id: number | null
}

export type WarehouseSumAggregateOutputType = {
  id: number | null
}

export type WarehouseMinAggregateOutputType = {
  id: number | null
  city_code: string | null
  street: string | null
}

export type WarehouseMaxAggregateOutputType = {
  id: number | null
  city_code: string | null
  street: string | null
}

export type WarehouseCountAggregateOutputType = {
  id: number
  city_code: number
  street: number
  _all: number
}


export type WarehouseAvgAggregateInputType = {
  id?: true
}

export type WarehouseSumAggregateInputType = {
  id?: true
}

export type WarehouseMinAggregateInputType = {
  id?: true
  city_code?: true
  street?: true
}

export type WarehouseMaxAggregateInputType = {
  id?: true
  city_code?: true
  street?: true
}

export type WarehouseCountAggregateInputType = {
  id?: true
  city_code?: true
  street?: true
  _all?: true
}

export type WarehouseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Warehouse to aggregate.
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Warehouses to fetch.
   */
  orderBy?: Prisma.WarehouseOrderByWithRelationInput | Prisma.WarehouseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WarehouseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Warehouses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Warehouses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Warehouses
  **/
  _count?: true | WarehouseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WarehouseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WarehouseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WarehouseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WarehouseMaxAggregateInputType
}

export type GetWarehouseAggregateType<T extends WarehouseAggregateArgs> = {
      [P in keyof T & keyof AggregateWarehouse]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWarehouse[P]>
    : Prisma.GetScalarType<T[P], AggregateWarehouse[P]>
}




export type WarehouseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WarehouseWhereInput
  orderBy?: Prisma.WarehouseOrderByWithAggregationInput | Prisma.WarehouseOrderByWithAggregationInput[]
  by: Prisma.WarehouseScalarFieldEnum[] | Prisma.WarehouseScalarFieldEnum
  having?: Prisma.WarehouseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WarehouseCountAggregateInputType | true
  _avg?: WarehouseAvgAggregateInputType
  _sum?: WarehouseSumAggregateInputType
  _min?: WarehouseMinAggregateInputType
  _max?: WarehouseMaxAggregateInputType
}

export type WarehouseGroupByOutputType = {
  id: number
  city_code: string
  street: string
  _count: WarehouseCountAggregateOutputType | null
  _avg: WarehouseAvgAggregateOutputType | null
  _sum: WarehouseSumAggregateOutputType | null
  _min: WarehouseMinAggregateOutputType | null
  _max: WarehouseMaxAggregateOutputType | null
}

type GetWarehouseGroupByPayload<T extends WarehouseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WarehouseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WarehouseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WarehouseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WarehouseGroupByOutputType[P]>
      }
    >
  > 



export type WarehouseWhereInput = {
  AND?: Prisma.WarehouseWhereInput | Prisma.WarehouseWhereInput[]
  OR?: Prisma.WarehouseWhereInput[]
  NOT?: Prisma.WarehouseWhereInput | Prisma.WarehouseWhereInput[]
  id?: Prisma.IntFilter<"Warehouse"> | number
  city_code?: Prisma.StringFilter<"Warehouse"> | string
  street?: Prisma.StringFilter<"Warehouse"> | string
  assets?: Prisma.AssetListRelationFilter
  origin_transfers?: Prisma.TransferListRelationFilter
  destination_transfers?: Prisma.TransferListRelationFilter
  departures?: Prisma.DepartureListRelationFilter
  arrivals?: Prisma.ArrivalListRelationFilter
  locations?: Prisma.LocationListRelationFilter
}

export type WarehouseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  city_code?: Prisma.SortOrder
  street?: Prisma.SortOrder
  assets?: Prisma.AssetOrderByRelationAggregateInput
  origin_transfers?: Prisma.TransferOrderByRelationAggregateInput
  destination_transfers?: Prisma.TransferOrderByRelationAggregateInput
  departures?: Prisma.DepartureOrderByRelationAggregateInput
  arrivals?: Prisma.ArrivalOrderByRelationAggregateInput
  locations?: Prisma.LocationOrderByRelationAggregateInput
}

export type WarehouseWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  city_code?: string
  AND?: Prisma.WarehouseWhereInput | Prisma.WarehouseWhereInput[]
  OR?: Prisma.WarehouseWhereInput[]
  NOT?: Prisma.WarehouseWhereInput | Prisma.WarehouseWhereInput[]
  street?: Prisma.StringFilter<"Warehouse"> | string
  assets?: Prisma.AssetListRelationFilter
  origin_transfers?: Prisma.TransferListRelationFilter
  destination_transfers?: Prisma.TransferListRelationFilter
  departures?: Prisma.DepartureListRelationFilter
  arrivals?: Prisma.ArrivalListRelationFilter
  locations?: Prisma.LocationListRelationFilter
}, "id" | "city_code">

export type WarehouseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  city_code?: Prisma.SortOrder
  street?: Prisma.SortOrder
  _count?: Prisma.WarehouseCountOrderByAggregateInput
  _avg?: Prisma.WarehouseAvgOrderByAggregateInput
  _max?: Prisma.WarehouseMaxOrderByAggregateInput
  _min?: Prisma.WarehouseMinOrderByAggregateInput
  _sum?: Prisma.WarehouseSumOrderByAggregateInput
}

export type WarehouseScalarWhereWithAggregatesInput = {
  AND?: Prisma.WarehouseScalarWhereWithAggregatesInput | Prisma.WarehouseScalarWhereWithAggregatesInput[]
  OR?: Prisma.WarehouseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WarehouseScalarWhereWithAggregatesInput | Prisma.WarehouseScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Warehouse"> | number
  city_code?: Prisma.StringWithAggregatesFilter<"Warehouse"> | string
  street?: Prisma.StringWithAggregatesFilter<"Warehouse"> | string
}

export type WarehouseCreateInput = {
  city_code: string
  street: string
  assets?: Prisma.AssetCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUncheckedCreateInput = {
  id?: number
  city_code: string
  street: string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureUncheckedCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalUncheckedCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUpdateInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUncheckedUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUncheckedUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUncheckedUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUncheckedUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseCreateManyInput = {
  id?: number
  city_code: string
  street: string
}

export type WarehouseUpdateManyMutationInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WarehouseUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WarehouseScalarRelationFilter = {
  is?: Prisma.WarehouseWhereInput
  isNot?: Prisma.WarehouseWhereInput
}

export type WarehouseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  city_code?: Prisma.SortOrder
  street?: Prisma.SortOrder
}

export type WarehouseAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type WarehouseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  city_code?: Prisma.SortOrder
  street?: Prisma.SortOrder
}

export type WarehouseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  city_code?: Prisma.SortOrder
  street?: Prisma.SortOrder
}

export type WarehouseSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type WarehouseCreateNestedOneWithoutAssetsInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutAssetsInput, Prisma.WarehouseUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutAssetsInput
  connect?: Prisma.WarehouseWhereUniqueInput
}

export type WarehouseUpdateOneRequiredWithoutAssetsNestedInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutAssetsInput, Prisma.WarehouseUncheckedCreateWithoutAssetsInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutAssetsInput
  upsert?: Prisma.WarehouseUpsertWithoutAssetsInput
  connect?: Prisma.WarehouseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WarehouseUpdateToOneWithWhereWithoutAssetsInput, Prisma.WarehouseUpdateWithoutAssetsInput>, Prisma.WarehouseUncheckedUpdateWithoutAssetsInput>
}

export type WarehouseCreateNestedOneWithoutOrigin_transfersInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutOrigin_transfersInput, Prisma.WarehouseUncheckedCreateWithoutOrigin_transfersInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutOrigin_transfersInput
  connect?: Prisma.WarehouseWhereUniqueInput
}

export type WarehouseCreateNestedOneWithoutDestination_transfersInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutDestination_transfersInput, Prisma.WarehouseUncheckedCreateWithoutDestination_transfersInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutDestination_transfersInput
  connect?: Prisma.WarehouseWhereUniqueInput
}

export type WarehouseUpdateOneRequiredWithoutOrigin_transfersNestedInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutOrigin_transfersInput, Prisma.WarehouseUncheckedCreateWithoutOrigin_transfersInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutOrigin_transfersInput
  upsert?: Prisma.WarehouseUpsertWithoutOrigin_transfersInput
  connect?: Prisma.WarehouseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WarehouseUpdateToOneWithWhereWithoutOrigin_transfersInput, Prisma.WarehouseUpdateWithoutOrigin_transfersInput>, Prisma.WarehouseUncheckedUpdateWithoutOrigin_transfersInput>
}

export type WarehouseUpdateOneRequiredWithoutDestination_transfersNestedInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutDestination_transfersInput, Prisma.WarehouseUncheckedCreateWithoutDestination_transfersInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutDestination_transfersInput
  upsert?: Prisma.WarehouseUpsertWithoutDestination_transfersInput
  connect?: Prisma.WarehouseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WarehouseUpdateToOneWithWhereWithoutDestination_transfersInput, Prisma.WarehouseUpdateWithoutDestination_transfersInput>, Prisma.WarehouseUncheckedUpdateWithoutDestination_transfersInput>
}

export type WarehouseCreateNestedOneWithoutArrivalsInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutArrivalsInput, Prisma.WarehouseUncheckedCreateWithoutArrivalsInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutArrivalsInput
  connect?: Prisma.WarehouseWhereUniqueInput
}

export type WarehouseUpdateOneRequiredWithoutArrivalsNestedInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutArrivalsInput, Prisma.WarehouseUncheckedCreateWithoutArrivalsInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutArrivalsInput
  upsert?: Prisma.WarehouseUpsertWithoutArrivalsInput
  connect?: Prisma.WarehouseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WarehouseUpdateToOneWithWhereWithoutArrivalsInput, Prisma.WarehouseUpdateWithoutArrivalsInput>, Prisma.WarehouseUncheckedUpdateWithoutArrivalsInput>
}

export type WarehouseCreateNestedOneWithoutDeparturesInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutDeparturesInput, Prisma.WarehouseUncheckedCreateWithoutDeparturesInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutDeparturesInput
  connect?: Prisma.WarehouseWhereUniqueInput
}

export type WarehouseUpdateOneRequiredWithoutDeparturesNestedInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutDeparturesInput, Prisma.WarehouseUncheckedCreateWithoutDeparturesInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutDeparturesInput
  upsert?: Prisma.WarehouseUpsertWithoutDeparturesInput
  connect?: Prisma.WarehouseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WarehouseUpdateToOneWithWhereWithoutDeparturesInput, Prisma.WarehouseUpdateWithoutDeparturesInput>, Prisma.WarehouseUncheckedUpdateWithoutDeparturesInput>
}

export type WarehouseCreateNestedOneWithoutLocationsInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutLocationsInput, Prisma.WarehouseUncheckedCreateWithoutLocationsInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutLocationsInput
  connect?: Prisma.WarehouseWhereUniqueInput
}

export type WarehouseUpdateOneRequiredWithoutLocationsNestedInput = {
  create?: Prisma.XOR<Prisma.WarehouseCreateWithoutLocationsInput, Prisma.WarehouseUncheckedCreateWithoutLocationsInput>
  connectOrCreate?: Prisma.WarehouseCreateOrConnectWithoutLocationsInput
  upsert?: Prisma.WarehouseUpsertWithoutLocationsInput
  connect?: Prisma.WarehouseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WarehouseUpdateToOneWithWhereWithoutLocationsInput, Prisma.WarehouseUpdateWithoutLocationsInput>, Prisma.WarehouseUncheckedUpdateWithoutLocationsInput>
}

export type WarehouseCreateWithoutAssetsInput = {
  city_code: string
  street: string
  origin_transfers?: Prisma.TransferCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUncheckedCreateWithoutAssetsInput = {
  id?: number
  city_code: string
  street: string
  origin_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureUncheckedCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalUncheckedCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutWarehouseInput
}

export type WarehouseCreateOrConnectWithoutAssetsInput = {
  where: Prisma.WarehouseWhereUniqueInput
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutAssetsInput, Prisma.WarehouseUncheckedCreateWithoutAssetsInput>
}

export type WarehouseUpsertWithoutAssetsInput = {
  update: Prisma.XOR<Prisma.WarehouseUpdateWithoutAssetsInput, Prisma.WarehouseUncheckedUpdateWithoutAssetsInput>
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutAssetsInput, Prisma.WarehouseUncheckedCreateWithoutAssetsInput>
  where?: Prisma.WarehouseWhereInput
}

export type WarehouseUpdateToOneWithWhereWithoutAssetsInput = {
  where?: Prisma.WarehouseWhereInput
  data: Prisma.XOR<Prisma.WarehouseUpdateWithoutAssetsInput, Prisma.WarehouseUncheckedUpdateWithoutAssetsInput>
}

export type WarehouseUpdateWithoutAssetsInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  origin_transfers?: Prisma.TransferUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUncheckedUpdateWithoutAssetsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  origin_transfers?: Prisma.TransferUncheckedUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUncheckedUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUncheckedUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUncheckedUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseCreateWithoutOrigin_transfersInput = {
  city_code: string
  street: string
  assets?: Prisma.AssetCreateNestedManyWithoutWarehouseInput
  destination_transfers?: Prisma.TransferCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUncheckedCreateWithoutOrigin_transfersInput = {
  id?: number
  city_code: string
  street: string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutWarehouseInput
  destination_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureUncheckedCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalUncheckedCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutWarehouseInput
}

export type WarehouseCreateOrConnectWithoutOrigin_transfersInput = {
  where: Prisma.WarehouseWhereUniqueInput
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutOrigin_transfersInput, Prisma.WarehouseUncheckedCreateWithoutOrigin_transfersInput>
}

export type WarehouseCreateWithoutDestination_transfersInput = {
  city_code: string
  street: string
  assets?: Prisma.AssetCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferCreateNestedManyWithoutOriginInput
  departures?: Prisma.DepartureCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUncheckedCreateWithoutDestination_transfersInput = {
  id?: number
  city_code: string
  street: string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutOriginInput
  departures?: Prisma.DepartureUncheckedCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalUncheckedCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutWarehouseInput
}

export type WarehouseCreateOrConnectWithoutDestination_transfersInput = {
  where: Prisma.WarehouseWhereUniqueInput
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutDestination_transfersInput, Prisma.WarehouseUncheckedCreateWithoutDestination_transfersInput>
}

export type WarehouseUpsertWithoutOrigin_transfersInput = {
  update: Prisma.XOR<Prisma.WarehouseUpdateWithoutOrigin_transfersInput, Prisma.WarehouseUncheckedUpdateWithoutOrigin_transfersInput>
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutOrigin_transfersInput, Prisma.WarehouseUncheckedCreateWithoutOrigin_transfersInput>
  where?: Prisma.WarehouseWhereInput
}

export type WarehouseUpdateToOneWithWhereWithoutOrigin_transfersInput = {
  where?: Prisma.WarehouseWhereInput
  data: Prisma.XOR<Prisma.WarehouseUpdateWithoutOrigin_transfersInput, Prisma.WarehouseUncheckedUpdateWithoutOrigin_transfersInput>
}

export type WarehouseUpdateWithoutOrigin_transfersInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUpdateManyWithoutWarehouseNestedInput
  destination_transfers?: Prisma.TransferUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUncheckedUpdateWithoutOrigin_transfersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutWarehouseNestedInput
  destination_transfers?: Prisma.TransferUncheckedUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUncheckedUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUncheckedUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUpsertWithoutDestination_transfersInput = {
  update: Prisma.XOR<Prisma.WarehouseUpdateWithoutDestination_transfersInput, Prisma.WarehouseUncheckedUpdateWithoutDestination_transfersInput>
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutDestination_transfersInput, Prisma.WarehouseUncheckedCreateWithoutDestination_transfersInput>
  where?: Prisma.WarehouseWhereInput
}

export type WarehouseUpdateToOneWithWhereWithoutDestination_transfersInput = {
  where?: Prisma.WarehouseWhereInput
  data: Prisma.XOR<Prisma.WarehouseUpdateWithoutDestination_transfersInput, Prisma.WarehouseUncheckedUpdateWithoutDestination_transfersInput>
}

export type WarehouseUpdateWithoutDestination_transfersInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUpdateManyWithoutOriginNestedInput
  departures?: Prisma.DepartureUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUncheckedUpdateWithoutDestination_transfersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUncheckedUpdateManyWithoutOriginNestedInput
  departures?: Prisma.DepartureUncheckedUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUncheckedUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseCreateWithoutArrivalsInput = {
  city_code: string
  street: string
  assets?: Prisma.AssetCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureCreateNestedManyWithoutOriginInput
  locations?: Prisma.LocationCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUncheckedCreateWithoutArrivalsInput = {
  id?: number
  city_code: string
  street: string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureUncheckedCreateNestedManyWithoutOriginInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutWarehouseInput
}

export type WarehouseCreateOrConnectWithoutArrivalsInput = {
  where: Prisma.WarehouseWhereUniqueInput
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutArrivalsInput, Prisma.WarehouseUncheckedCreateWithoutArrivalsInput>
}

export type WarehouseUpsertWithoutArrivalsInput = {
  update: Prisma.XOR<Prisma.WarehouseUpdateWithoutArrivalsInput, Prisma.WarehouseUncheckedUpdateWithoutArrivalsInput>
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutArrivalsInput, Prisma.WarehouseUncheckedCreateWithoutArrivalsInput>
  where?: Prisma.WarehouseWhereInput
}

export type WarehouseUpdateToOneWithWhereWithoutArrivalsInput = {
  where?: Prisma.WarehouseWhereInput
  data: Prisma.XOR<Prisma.WarehouseUpdateWithoutArrivalsInput, Prisma.WarehouseUncheckedUpdateWithoutArrivalsInput>
}

export type WarehouseUpdateWithoutArrivalsInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUpdateManyWithoutOriginNestedInput
  locations?: Prisma.LocationUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUncheckedUpdateWithoutArrivalsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUncheckedUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUncheckedUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUncheckedUpdateManyWithoutOriginNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseCreateWithoutDeparturesInput = {
  city_code: string
  street: string
  assets?: Prisma.AssetCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferCreateNestedManyWithoutDestinationInput
  arrivals?: Prisma.ArrivalCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationCreateNestedManyWithoutWarehouseInput
}

export type WarehouseUncheckedCreateWithoutDeparturesInput = {
  id?: number
  city_code: string
  street: string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutDestinationInput
  arrivals?: Prisma.ArrivalUncheckedCreateNestedManyWithoutDestinationInput
  locations?: Prisma.LocationUncheckedCreateNestedManyWithoutWarehouseInput
}

export type WarehouseCreateOrConnectWithoutDeparturesInput = {
  where: Prisma.WarehouseWhereUniqueInput
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutDeparturesInput, Prisma.WarehouseUncheckedCreateWithoutDeparturesInput>
}

export type WarehouseUpsertWithoutDeparturesInput = {
  update: Prisma.XOR<Prisma.WarehouseUpdateWithoutDeparturesInput, Prisma.WarehouseUncheckedUpdateWithoutDeparturesInput>
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutDeparturesInput, Prisma.WarehouseUncheckedCreateWithoutDeparturesInput>
  where?: Prisma.WarehouseWhereInput
}

export type WarehouseUpdateToOneWithWhereWithoutDeparturesInput = {
  where?: Prisma.WarehouseWhereInput
  data: Prisma.XOR<Prisma.WarehouseUpdateWithoutDeparturesInput, Prisma.WarehouseUncheckedUpdateWithoutDeparturesInput>
}

export type WarehouseUpdateWithoutDeparturesInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUpdateManyWithoutDestinationNestedInput
  arrivals?: Prisma.ArrivalUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseUncheckedUpdateWithoutDeparturesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUncheckedUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUncheckedUpdateManyWithoutDestinationNestedInput
  arrivals?: Prisma.ArrivalUncheckedUpdateManyWithoutDestinationNestedInput
  locations?: Prisma.LocationUncheckedUpdateManyWithoutWarehouseNestedInput
}

export type WarehouseCreateWithoutLocationsInput = {
  city_code: string
  street: string
  assets?: Prisma.AssetCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalCreateNestedManyWithoutDestinationInput
}

export type WarehouseUncheckedCreateWithoutLocationsInput = {
  id?: number
  city_code: string
  street: string
  assets?: Prisma.AssetUncheckedCreateNestedManyWithoutWarehouseInput
  origin_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutOriginInput
  destination_transfers?: Prisma.TransferUncheckedCreateNestedManyWithoutDestinationInput
  departures?: Prisma.DepartureUncheckedCreateNestedManyWithoutOriginInput
  arrivals?: Prisma.ArrivalUncheckedCreateNestedManyWithoutDestinationInput
}

export type WarehouseCreateOrConnectWithoutLocationsInput = {
  where: Prisma.WarehouseWhereUniqueInput
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutLocationsInput, Prisma.WarehouseUncheckedCreateWithoutLocationsInput>
}

export type WarehouseUpsertWithoutLocationsInput = {
  update: Prisma.XOR<Prisma.WarehouseUpdateWithoutLocationsInput, Prisma.WarehouseUncheckedUpdateWithoutLocationsInput>
  create: Prisma.XOR<Prisma.WarehouseCreateWithoutLocationsInput, Prisma.WarehouseUncheckedCreateWithoutLocationsInput>
  where?: Prisma.WarehouseWhereInput
}

export type WarehouseUpdateToOneWithWhereWithoutLocationsInput = {
  where?: Prisma.WarehouseWhereInput
  data: Prisma.XOR<Prisma.WarehouseUpdateWithoutLocationsInput, Prisma.WarehouseUncheckedUpdateWithoutLocationsInput>
}

export type WarehouseUpdateWithoutLocationsInput = {
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUpdateManyWithoutDestinationNestedInput
}

export type WarehouseUncheckedUpdateWithoutLocationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  city_code?: Prisma.StringFieldUpdateOperationsInput | string
  street?: Prisma.StringFieldUpdateOperationsInput | string
  assets?: Prisma.AssetUncheckedUpdateManyWithoutWarehouseNestedInput
  origin_transfers?: Prisma.TransferUncheckedUpdateManyWithoutOriginNestedInput
  destination_transfers?: Prisma.TransferUncheckedUpdateManyWithoutDestinationNestedInput
  departures?: Prisma.DepartureUncheckedUpdateManyWithoutOriginNestedInput
  arrivals?: Prisma.ArrivalUncheckedUpdateManyWithoutDestinationNestedInput
}


/**
 * Count Type WarehouseCountOutputType
 */

export type WarehouseCountOutputType = {
  assets: number
  origin_transfers: number
  destination_transfers: number
  departures: number
  arrivals: number
  locations: number
}

export type WarehouseCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  assets?: boolean | WarehouseCountOutputTypeCountAssetsArgs
  origin_transfers?: boolean | WarehouseCountOutputTypeCountOrigin_transfersArgs
  destination_transfers?: boolean | WarehouseCountOutputTypeCountDestination_transfersArgs
  departures?: boolean | WarehouseCountOutputTypeCountDeparturesArgs
  arrivals?: boolean | WarehouseCountOutputTypeCountArrivalsArgs
  locations?: boolean | WarehouseCountOutputTypeCountLocationsArgs
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WarehouseCountOutputType
   */
  select?: Prisma.WarehouseCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeCountAssetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetWhereInput
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeCountOrigin_transfersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferWhereInput
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeCountDestination_transfersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferWhereInput
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeCountDeparturesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DepartureWhereInput
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeCountArrivalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ArrivalWhereInput
}

/**
 * WarehouseCountOutputType without action
 */
export type WarehouseCountOutputTypeCountLocationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LocationWhereInput
}


export type WarehouseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  city_code?: boolean
  street?: boolean
  assets?: boolean | Prisma.Warehouse$assetsArgs<ExtArgs>
  origin_transfers?: boolean | Prisma.Warehouse$origin_transfersArgs<ExtArgs>
  destination_transfers?: boolean | Prisma.Warehouse$destination_transfersArgs<ExtArgs>
  departures?: boolean | Prisma.Warehouse$departuresArgs<ExtArgs>
  arrivals?: boolean | Prisma.Warehouse$arrivalsArgs<ExtArgs>
  locations?: boolean | Prisma.Warehouse$locationsArgs<ExtArgs>
  _count?: boolean | Prisma.WarehouseCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["warehouse"]>

export type WarehouseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  city_code?: boolean
  street?: boolean
}, ExtArgs["result"]["warehouse"]>

export type WarehouseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  city_code?: boolean
  street?: boolean
}, ExtArgs["result"]["warehouse"]>

export type WarehouseSelectScalar = {
  id?: boolean
  city_code?: boolean
  street?: boolean
}

export type WarehouseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "city_code" | "street", ExtArgs["result"]["warehouse"]>
export type WarehouseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  assets?: boolean | Prisma.Warehouse$assetsArgs<ExtArgs>
  origin_transfers?: boolean | Prisma.Warehouse$origin_transfersArgs<ExtArgs>
  destination_transfers?: boolean | Prisma.Warehouse$destination_transfersArgs<ExtArgs>
  departures?: boolean | Prisma.Warehouse$departuresArgs<ExtArgs>
  arrivals?: boolean | Prisma.Warehouse$arrivalsArgs<ExtArgs>
  locations?: boolean | Prisma.Warehouse$locationsArgs<ExtArgs>
  _count?: boolean | Prisma.WarehouseCountOutputTypeDefaultArgs<ExtArgs>
}
export type WarehouseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type WarehouseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $WarehousePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Warehouse"
  objects: {
    assets: Prisma.$AssetPayload<ExtArgs>[]
    origin_transfers: Prisma.$TransferPayload<ExtArgs>[]
    destination_transfers: Prisma.$TransferPayload<ExtArgs>[]
    departures: Prisma.$DeparturePayload<ExtArgs>[]
    arrivals: Prisma.$ArrivalPayload<ExtArgs>[]
    locations: Prisma.$LocationPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    city_code: string
    street: string
  }, ExtArgs["result"]["warehouse"]>
  composites: {}
}

export type WarehouseGetPayload<S extends boolean | null | undefined | WarehouseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WarehousePayload, S>

export type WarehouseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WarehouseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WarehouseCountAggregateInputType | true
  }

export interface WarehouseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Warehouse'], meta: { name: 'Warehouse' } }
  /**
   * Find zero or one Warehouse that matches the filter.
   * @param {WarehouseFindUniqueArgs} args - Arguments to find a Warehouse
   * @example
   * // Get one Warehouse
   * const warehouse = await prisma.warehouse.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WarehouseFindUniqueArgs>(args: Prisma.SelectSubset<T, WarehouseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Warehouse that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WarehouseFindUniqueOrThrowArgs} args - Arguments to find a Warehouse
   * @example
   * // Get one Warehouse
   * const warehouse = await prisma.warehouse.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WarehouseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WarehouseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Warehouse that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseFindFirstArgs} args - Arguments to find a Warehouse
   * @example
   * // Get one Warehouse
   * const warehouse = await prisma.warehouse.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WarehouseFindFirstArgs>(args?: Prisma.SelectSubset<T, WarehouseFindFirstArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Warehouse that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseFindFirstOrThrowArgs} args - Arguments to find a Warehouse
   * @example
   * // Get one Warehouse
   * const warehouse = await prisma.warehouse.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WarehouseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WarehouseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Warehouses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Warehouses
   * const warehouses = await prisma.warehouse.findMany()
   * 
   * // Get first 10 Warehouses
   * const warehouses = await prisma.warehouse.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const warehouseWithIdOnly = await prisma.warehouse.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WarehouseFindManyArgs>(args?: Prisma.SelectSubset<T, WarehouseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Warehouse.
   * @param {WarehouseCreateArgs} args - Arguments to create a Warehouse.
   * @example
   * // Create one Warehouse
   * const Warehouse = await prisma.warehouse.create({
   *   data: {
   *     // ... data to create a Warehouse
   *   }
   * })
   * 
   */
  create<T extends WarehouseCreateArgs>(args: Prisma.SelectSubset<T, WarehouseCreateArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Warehouses.
   * @param {WarehouseCreateManyArgs} args - Arguments to create many Warehouses.
   * @example
   * // Create many Warehouses
   * const warehouse = await prisma.warehouse.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WarehouseCreateManyArgs>(args?: Prisma.SelectSubset<T, WarehouseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Warehouses and returns the data saved in the database.
   * @param {WarehouseCreateManyAndReturnArgs} args - Arguments to create many Warehouses.
   * @example
   * // Create many Warehouses
   * const warehouse = await prisma.warehouse.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Warehouses and only return the `id`
   * const warehouseWithIdOnly = await prisma.warehouse.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WarehouseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WarehouseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Warehouse.
   * @param {WarehouseDeleteArgs} args - Arguments to delete one Warehouse.
   * @example
   * // Delete one Warehouse
   * const Warehouse = await prisma.warehouse.delete({
   *   where: {
   *     // ... filter to delete one Warehouse
   *   }
   * })
   * 
   */
  delete<T extends WarehouseDeleteArgs>(args: Prisma.SelectSubset<T, WarehouseDeleteArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Warehouse.
   * @param {WarehouseUpdateArgs} args - Arguments to update one Warehouse.
   * @example
   * // Update one Warehouse
   * const warehouse = await prisma.warehouse.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WarehouseUpdateArgs>(args: Prisma.SelectSubset<T, WarehouseUpdateArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Warehouses.
   * @param {WarehouseDeleteManyArgs} args - Arguments to filter Warehouses to delete.
   * @example
   * // Delete a few Warehouses
   * const { count } = await prisma.warehouse.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WarehouseDeleteManyArgs>(args?: Prisma.SelectSubset<T, WarehouseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Warehouses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Warehouses
   * const warehouse = await prisma.warehouse.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WarehouseUpdateManyArgs>(args: Prisma.SelectSubset<T, WarehouseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Warehouses and returns the data updated in the database.
   * @param {WarehouseUpdateManyAndReturnArgs} args - Arguments to update many Warehouses.
   * @example
   * // Update many Warehouses
   * const warehouse = await prisma.warehouse.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Warehouses and only return the `id`
   * const warehouseWithIdOnly = await prisma.warehouse.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WarehouseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WarehouseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Warehouse.
   * @param {WarehouseUpsertArgs} args - Arguments to update or create a Warehouse.
   * @example
   * // Update or create a Warehouse
   * const warehouse = await prisma.warehouse.upsert({
   *   create: {
   *     // ... data to create a Warehouse
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Warehouse we want to update
   *   }
   * })
   */
  upsert<T extends WarehouseUpsertArgs>(args: Prisma.SelectSubset<T, WarehouseUpsertArgs<ExtArgs>>): Prisma.Prisma__WarehouseClient<runtime.Types.Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Warehouses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseCountArgs} args - Arguments to filter Warehouses to count.
   * @example
   * // Count the number of Warehouses
   * const count = await prisma.warehouse.count({
   *   where: {
   *     // ... the filter for the Warehouses we want to count
   *   }
   * })
  **/
  count<T extends WarehouseCountArgs>(
    args?: Prisma.Subset<T, WarehouseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WarehouseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Warehouse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WarehouseAggregateArgs>(args: Prisma.Subset<T, WarehouseAggregateArgs>): Prisma.PrismaPromise<GetWarehouseAggregateType<T>>

  /**
   * Group by Warehouse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WarehouseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WarehouseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WarehouseGroupByArgs['orderBy'] }
      : { orderBy?: WarehouseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WarehouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Warehouse model
 */
readonly fields: WarehouseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Warehouse.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WarehouseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  assets<T extends Prisma.Warehouse$assetsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Warehouse$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  origin_transfers<T extends Prisma.Warehouse$origin_transfersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Warehouse$origin_transfersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  destination_transfers<T extends Prisma.Warehouse$destination_transfersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Warehouse$destination_transfersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  departures<T extends Prisma.Warehouse$departuresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Warehouse$departuresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DeparturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  arrivals<T extends Prisma.Warehouse$arrivalsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Warehouse$arrivalsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArrivalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  locations<T extends Prisma.Warehouse$locationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Warehouse$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Warehouse model
 */
export interface WarehouseFieldRefs {
  readonly id: Prisma.FieldRef<"Warehouse", 'Int'>
  readonly city_code: Prisma.FieldRef<"Warehouse", 'String'>
  readonly street: Prisma.FieldRef<"Warehouse", 'String'>
}
    

// Custom InputTypes
/**
 * Warehouse findUnique
 */
export type WarehouseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * Filter, which Warehouse to fetch.
   */
  where: Prisma.WarehouseWhereUniqueInput
}

/**
 * Warehouse findUniqueOrThrow
 */
export type WarehouseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * Filter, which Warehouse to fetch.
   */
  where: Prisma.WarehouseWhereUniqueInput
}

/**
 * Warehouse findFirst
 */
export type WarehouseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * Filter, which Warehouse to fetch.
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Warehouses to fetch.
   */
  orderBy?: Prisma.WarehouseOrderByWithRelationInput | Prisma.WarehouseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Warehouses.
   */
  cursor?: Prisma.WarehouseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Warehouses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Warehouses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Warehouses.
   */
  distinct?: Prisma.WarehouseScalarFieldEnum | Prisma.WarehouseScalarFieldEnum[]
}

/**
 * Warehouse findFirstOrThrow
 */
export type WarehouseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * Filter, which Warehouse to fetch.
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Warehouses to fetch.
   */
  orderBy?: Prisma.WarehouseOrderByWithRelationInput | Prisma.WarehouseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Warehouses.
   */
  cursor?: Prisma.WarehouseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Warehouses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Warehouses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Warehouses.
   */
  distinct?: Prisma.WarehouseScalarFieldEnum | Prisma.WarehouseScalarFieldEnum[]
}

/**
 * Warehouse findMany
 */
export type WarehouseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * Filter, which Warehouses to fetch.
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Warehouses to fetch.
   */
  orderBy?: Prisma.WarehouseOrderByWithRelationInput | Prisma.WarehouseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Warehouses.
   */
  cursor?: Prisma.WarehouseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Warehouses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Warehouses.
   */
  skip?: number
  distinct?: Prisma.WarehouseScalarFieldEnum | Prisma.WarehouseScalarFieldEnum[]
}

/**
 * Warehouse create
 */
export type WarehouseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * The data needed to create a Warehouse.
   */
  data: Prisma.XOR<Prisma.WarehouseCreateInput, Prisma.WarehouseUncheckedCreateInput>
}

/**
 * Warehouse createMany
 */
export type WarehouseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Warehouses.
   */
  data: Prisma.WarehouseCreateManyInput | Prisma.WarehouseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Warehouse createManyAndReturn
 */
export type WarehouseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * The data used to create many Warehouses.
   */
  data: Prisma.WarehouseCreateManyInput | Prisma.WarehouseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Warehouse update
 */
export type WarehouseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * The data needed to update a Warehouse.
   */
  data: Prisma.XOR<Prisma.WarehouseUpdateInput, Prisma.WarehouseUncheckedUpdateInput>
  /**
   * Choose, which Warehouse to update.
   */
  where: Prisma.WarehouseWhereUniqueInput
}

/**
 * Warehouse updateMany
 */
export type WarehouseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Warehouses.
   */
  data: Prisma.XOR<Prisma.WarehouseUpdateManyMutationInput, Prisma.WarehouseUncheckedUpdateManyInput>
  /**
   * Filter which Warehouses to update
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * Limit how many Warehouses to update.
   */
  limit?: number
}

/**
 * Warehouse updateManyAndReturn
 */
export type WarehouseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * The data used to update Warehouses.
   */
  data: Prisma.XOR<Prisma.WarehouseUpdateManyMutationInput, Prisma.WarehouseUncheckedUpdateManyInput>
  /**
   * Filter which Warehouses to update
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * Limit how many Warehouses to update.
   */
  limit?: number
}

/**
 * Warehouse upsert
 */
export type WarehouseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * The filter to search for the Warehouse to update in case it exists.
   */
  where: Prisma.WarehouseWhereUniqueInput
  /**
   * In case the Warehouse found by the `where` argument doesn't exist, create a new Warehouse with this data.
   */
  create: Prisma.XOR<Prisma.WarehouseCreateInput, Prisma.WarehouseUncheckedCreateInput>
  /**
   * In case the Warehouse was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WarehouseUpdateInput, Prisma.WarehouseUncheckedUpdateInput>
}

/**
 * Warehouse delete
 */
export type WarehouseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
  /**
   * Filter which Warehouse to delete.
   */
  where: Prisma.WarehouseWhereUniqueInput
}

/**
 * Warehouse deleteMany
 */
export type WarehouseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Warehouses to delete
   */
  where?: Prisma.WarehouseWhereInput
  /**
   * Limit how many Warehouses to delete.
   */
  limit?: number
}

/**
 * Warehouse.assets
 */
export type Warehouse$assetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Asset
   */
  select?: Prisma.AssetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Asset
   */
  omit?: Prisma.AssetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetInclude<ExtArgs> | null
  where?: Prisma.AssetWhereInput
  orderBy?: Prisma.AssetOrderByWithRelationInput | Prisma.AssetOrderByWithRelationInput[]
  cursor?: Prisma.AssetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AssetScalarFieldEnum | Prisma.AssetScalarFieldEnum[]
}

/**
 * Warehouse.origin_transfers
 */
export type Warehouse$origin_transfersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  where?: Prisma.TransferWhereInput
  orderBy?: Prisma.TransferOrderByWithRelationInput | Prisma.TransferOrderByWithRelationInput[]
  cursor?: Prisma.TransferWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransferScalarFieldEnum | Prisma.TransferScalarFieldEnum[]
}

/**
 * Warehouse.destination_transfers
 */
export type Warehouse$destination_transfersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transfer
   */
  select?: Prisma.TransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transfer
   */
  omit?: Prisma.TransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferInclude<ExtArgs> | null
  where?: Prisma.TransferWhereInput
  orderBy?: Prisma.TransferOrderByWithRelationInput | Prisma.TransferOrderByWithRelationInput[]
  cursor?: Prisma.TransferWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransferScalarFieldEnum | Prisma.TransferScalarFieldEnum[]
}

/**
 * Warehouse.departures
 */
export type Warehouse$departuresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Departure
   */
  select?: Prisma.DepartureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Departure
   */
  omit?: Prisma.DepartureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepartureInclude<ExtArgs> | null
  where?: Prisma.DepartureWhereInput
  orderBy?: Prisma.DepartureOrderByWithRelationInput | Prisma.DepartureOrderByWithRelationInput[]
  cursor?: Prisma.DepartureWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DepartureScalarFieldEnum | Prisma.DepartureScalarFieldEnum[]
}

/**
 * Warehouse.arrivals
 */
export type Warehouse$arrivalsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Arrival
   */
  select?: Prisma.ArrivalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Arrival
   */
  omit?: Prisma.ArrivalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArrivalInclude<ExtArgs> | null
  where?: Prisma.ArrivalWhereInput
  orderBy?: Prisma.ArrivalOrderByWithRelationInput | Prisma.ArrivalOrderByWithRelationInput[]
  cursor?: Prisma.ArrivalWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ArrivalScalarFieldEnum | Prisma.ArrivalScalarFieldEnum[]
}

/**
 * Warehouse.locations
 */
export type Warehouse$locationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Location
   */
  select?: Prisma.LocationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Location
   */
  omit?: Prisma.LocationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationInclude<ExtArgs> | null
  where?: Prisma.LocationWhereInput
  orderBy?: Prisma.LocationOrderByWithRelationInput | Prisma.LocationOrderByWithRelationInput[]
  cursor?: Prisma.LocationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LocationScalarFieldEnum | Prisma.LocationScalarFieldEnum[]
}

/**
 * Warehouse without action
 */
export type WarehouseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Warehouse
   */
  select?: Prisma.WarehouseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Warehouse
   */
  omit?: Prisma.WarehouseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WarehouseInclude<ExtArgs> | null
}
