
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TechnicalSpecification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model TechnicalSpecification
 * 
 */
export type TechnicalSpecificationModel = runtime.Types.Result.DefaultSelection<Prisma.$TechnicalSpecificationPayload>

export type AggregateTechnicalSpecification = {
  _count: TechnicalSpecificationCountAggregateOutputType | null
  _avg: TechnicalSpecificationAvgAggregateOutputType | null
  _sum: TechnicalSpecificationSumAggregateOutputType | null
  _min: TechnicalSpecificationMinAggregateOutputType | null
  _max: TechnicalSpecificationMaxAggregateOutputType | null
}

export type TechnicalSpecificationAvgAggregateOutputType = {
  id: number | null
  asset_id: number | null
  cassettes: number | null
  meter_black: number | null
  meter_colour: number | null
  meter_total: number | null
  drum_life_c: number | null
  drum_life_m: number | null
  drum_life_y: number | null
  drum_life_k: number | null
}

export type TechnicalSpecificationSumAggregateOutputType = {
  id: number | null
  asset_id: number | null
  cassettes: number | null
  meter_black: number | null
  meter_colour: number | null
  meter_total: number | null
  drum_life_c: number | null
  drum_life_m: number | null
  drum_life_y: number | null
  drum_life_k: number | null
}

export type TechnicalSpecificationMinAggregateOutputType = {
  id: number | null
  asset_id: number | null
  cassettes: number | null
  internal_finisher: string | null
  meter_black: number | null
  meter_colour: number | null
  meter_total: number | null
  drum_life_c: number | null
  drum_life_m: number | null
  drum_life_y: number | null
  drum_life_k: number | null
}

export type TechnicalSpecificationMaxAggregateOutputType = {
  id: number | null
  asset_id: number | null
  cassettes: number | null
  internal_finisher: string | null
  meter_black: number | null
  meter_colour: number | null
  meter_total: number | null
  drum_life_c: number | null
  drum_life_m: number | null
  drum_life_y: number | null
  drum_life_k: number | null
}

export type TechnicalSpecificationCountAggregateOutputType = {
  id: number
  asset_id: number
  cassettes: number
  internal_finisher: number
  meter_black: number
  meter_colour: number
  meter_total: number
  drum_life_c: number
  drum_life_m: number
  drum_life_y: number
  drum_life_k: number
  _all: number
}


export type TechnicalSpecificationAvgAggregateInputType = {
  id?: true
  asset_id?: true
  cassettes?: true
  meter_black?: true
  meter_colour?: true
  meter_total?: true
  drum_life_c?: true
  drum_life_m?: true
  drum_life_y?: true
  drum_life_k?: true
}

export type TechnicalSpecificationSumAggregateInputType = {
  id?: true
  asset_id?: true
  cassettes?: true
  meter_black?: true
  meter_colour?: true
  meter_total?: true
  drum_life_c?: true
  drum_life_m?: true
  drum_life_y?: true
  drum_life_k?: true
}

export type TechnicalSpecificationMinAggregateInputType = {
  id?: true
  asset_id?: true
  cassettes?: true
  internal_finisher?: true
  meter_black?: true
  meter_colour?: true
  meter_total?: true
  drum_life_c?: true
  drum_life_m?: true
  drum_life_y?: true
  drum_life_k?: true
}

export type TechnicalSpecificationMaxAggregateInputType = {
  id?: true
  asset_id?: true
  cassettes?: true
  internal_finisher?: true
  meter_black?: true
  meter_colour?: true
  meter_total?: true
  drum_life_c?: true
  drum_life_m?: true
  drum_life_y?: true
  drum_life_k?: true
}

export type TechnicalSpecificationCountAggregateInputType = {
  id?: true
  asset_id?: true
  cassettes?: true
  internal_finisher?: true
  meter_black?: true
  meter_colour?: true
  meter_total?: true
  drum_life_c?: true
  drum_life_m?: true
  drum_life_y?: true
  drum_life_k?: true
  _all?: true
}

export type TechnicalSpecificationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechnicalSpecification to aggregate.
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechnicalSpecifications to fetch.
   */
  orderBy?: Prisma.TechnicalSpecificationOrderByWithRelationInput | Prisma.TechnicalSpecificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TechnicalSpecificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechnicalSpecifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechnicalSpecifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TechnicalSpecifications
  **/
  _count?: true | TechnicalSpecificationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TechnicalSpecificationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TechnicalSpecificationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechnicalSpecificationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechnicalSpecificationMaxAggregateInputType
}

export type GetTechnicalSpecificationAggregateType<T extends TechnicalSpecificationAggregateArgs> = {
      [P in keyof T & keyof AggregateTechnicalSpecification]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTechnicalSpecification[P]>
    : Prisma.GetScalarType<T[P], AggregateTechnicalSpecification[P]>
}




export type TechnicalSpecificationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TechnicalSpecificationWhereInput
  orderBy?: Prisma.TechnicalSpecificationOrderByWithAggregationInput | Prisma.TechnicalSpecificationOrderByWithAggregationInput[]
  by: Prisma.TechnicalSpecificationScalarFieldEnum[] | Prisma.TechnicalSpecificationScalarFieldEnum
  having?: Prisma.TechnicalSpecificationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechnicalSpecificationCountAggregateInputType | true
  _avg?: TechnicalSpecificationAvgAggregateInputType
  _sum?: TechnicalSpecificationSumAggregateInputType
  _min?: TechnicalSpecificationMinAggregateInputType
  _max?: TechnicalSpecificationMaxAggregateInputType
}

export type TechnicalSpecificationGroupByOutputType = {
  id: number
  asset_id: number
  cassettes: number | null
  internal_finisher: string | null
  meter_black: number | null
  meter_colour: number | null
  meter_total: number | null
  drum_life_c: number | null
  drum_life_m: number | null
  drum_life_y: number | null
  drum_life_k: number | null
  _count: TechnicalSpecificationCountAggregateOutputType | null
  _avg: TechnicalSpecificationAvgAggregateOutputType | null
  _sum: TechnicalSpecificationSumAggregateOutputType | null
  _min: TechnicalSpecificationMinAggregateOutputType | null
  _max: TechnicalSpecificationMaxAggregateOutputType | null
}

type GetTechnicalSpecificationGroupByPayload<T extends TechnicalSpecificationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechnicalSpecificationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechnicalSpecificationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechnicalSpecificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechnicalSpecificationGroupByOutputType[P]>
      }
    >
  > 



export type TechnicalSpecificationWhereInput = {
  AND?: Prisma.TechnicalSpecificationWhereInput | Prisma.TechnicalSpecificationWhereInput[]
  OR?: Prisma.TechnicalSpecificationWhereInput[]
  NOT?: Prisma.TechnicalSpecificationWhereInput | Prisma.TechnicalSpecificationWhereInput[]
  id?: Prisma.IntFilter<"TechnicalSpecification"> | number
  asset_id?: Prisma.IntFilter<"TechnicalSpecification"> | number
  cassettes?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  internal_finisher?: Prisma.StringNullableFilter<"TechnicalSpecification"> | string | null
  meter_black?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  meter_colour?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  meter_total?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_c?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_m?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_y?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_k?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
}

export type TechnicalSpecificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrderInput | Prisma.SortOrder
  internal_finisher?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_black?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_colour?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_total?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_c?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_m?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_y?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_k?: Prisma.SortOrderInput | Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
}

export type TechnicalSpecificationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  asset_id?: number
  AND?: Prisma.TechnicalSpecificationWhereInput | Prisma.TechnicalSpecificationWhereInput[]
  OR?: Prisma.TechnicalSpecificationWhereInput[]
  NOT?: Prisma.TechnicalSpecificationWhereInput | Prisma.TechnicalSpecificationWhereInput[]
  cassettes?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  internal_finisher?: Prisma.StringNullableFilter<"TechnicalSpecification"> | string | null
  meter_black?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  meter_colour?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  meter_total?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_c?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_m?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_y?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  drum_life_k?: Prisma.IntNullableFilter<"TechnicalSpecification"> | number | null
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
}, "id" | "asset_id">

export type TechnicalSpecificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrderInput | Prisma.SortOrder
  internal_finisher?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_black?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_colour?: Prisma.SortOrderInput | Prisma.SortOrder
  meter_total?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_c?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_m?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_y?: Prisma.SortOrderInput | Prisma.SortOrder
  drum_life_k?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TechnicalSpecificationCountOrderByAggregateInput
  _avg?: Prisma.TechnicalSpecificationAvgOrderByAggregateInput
  _max?: Prisma.TechnicalSpecificationMaxOrderByAggregateInput
  _min?: Prisma.TechnicalSpecificationMinOrderByAggregateInput
  _sum?: Prisma.TechnicalSpecificationSumOrderByAggregateInput
}

export type TechnicalSpecificationScalarWhereWithAggregatesInput = {
  AND?: Prisma.TechnicalSpecificationScalarWhereWithAggregatesInput | Prisma.TechnicalSpecificationScalarWhereWithAggregatesInput[]
  OR?: Prisma.TechnicalSpecificationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TechnicalSpecificationScalarWhereWithAggregatesInput | Prisma.TechnicalSpecificationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TechnicalSpecification"> | number
  asset_id?: Prisma.IntWithAggregatesFilter<"TechnicalSpecification"> | number
  cassettes?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  internal_finisher?: Prisma.StringNullableWithAggregatesFilter<"TechnicalSpecification"> | string | null
  meter_black?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  meter_colour?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  meter_total?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  drum_life_c?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  drum_life_m?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  drum_life_y?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
  drum_life_k?: Prisma.IntNullableWithAggregatesFilter<"TechnicalSpecification"> | number | null
}

export type TechnicalSpecificationCreateInput = {
  cassettes?: number | null
  internal_finisher?: string | null
  meter_black?: number | null
  meter_colour?: number | null
  meter_total?: number | null
  drum_life_c?: number | null
  drum_life_m?: number | null
  drum_life_y?: number | null
  drum_life_k?: number | null
  asset: Prisma.AssetCreateNestedOneWithoutTechnical_specificationInput
}

export type TechnicalSpecificationUncheckedCreateInput = {
  id?: number
  asset_id: number
  cassettes?: number | null
  internal_finisher?: string | null
  meter_black?: number | null
  meter_colour?: number | null
  meter_total?: number | null
  drum_life_c?: number | null
  drum_life_m?: number | null
  drum_life_y?: number | null
  drum_life_k?: number | null
}

export type TechnicalSpecificationUpdateInput = {
  cassettes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  internal_finisher?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meter_black?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_colour?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_total?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_c?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_y?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_k?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  asset?: Prisma.AssetUpdateOneRequiredWithoutTechnical_specificationNestedInput
}

export type TechnicalSpecificationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  cassettes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  internal_finisher?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meter_black?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_colour?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_total?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_c?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_y?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_k?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type TechnicalSpecificationCreateManyInput = {
  id?: number
  asset_id: number
  cassettes?: number | null
  internal_finisher?: string | null
  meter_black?: number | null
  meter_colour?: number | null
  meter_total?: number | null
  drum_life_c?: number | null
  drum_life_m?: number | null
  drum_life_y?: number | null
  drum_life_k?: number | null
}

export type TechnicalSpecificationUpdateManyMutationInput = {
  cassettes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  internal_finisher?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meter_black?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_colour?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_total?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_c?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_y?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_k?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type TechnicalSpecificationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  cassettes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  internal_finisher?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meter_black?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_colour?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_total?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_c?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_y?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_k?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type TechnicalSpecificationNullableScalarRelationFilter = {
  is?: Prisma.TechnicalSpecificationWhereInput | null
  isNot?: Prisma.TechnicalSpecificationWhereInput | null
}

export type TechnicalSpecificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrder
  internal_finisher?: Prisma.SortOrder
  meter_black?: Prisma.SortOrder
  meter_colour?: Prisma.SortOrder
  meter_total?: Prisma.SortOrder
  drum_life_c?: Prisma.SortOrder
  drum_life_m?: Prisma.SortOrder
  drum_life_y?: Prisma.SortOrder
  drum_life_k?: Prisma.SortOrder
}

export type TechnicalSpecificationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrder
  meter_black?: Prisma.SortOrder
  meter_colour?: Prisma.SortOrder
  meter_total?: Prisma.SortOrder
  drum_life_c?: Prisma.SortOrder
  drum_life_m?: Prisma.SortOrder
  drum_life_y?: Prisma.SortOrder
  drum_life_k?: Prisma.SortOrder
}

export type TechnicalSpecificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrder
  internal_finisher?: Prisma.SortOrder
  meter_black?: Prisma.SortOrder
  meter_colour?: Prisma.SortOrder
  meter_total?: Prisma.SortOrder
  drum_life_c?: Prisma.SortOrder
  drum_life_m?: Prisma.SortOrder
  drum_life_y?: Prisma.SortOrder
  drum_life_k?: Prisma.SortOrder
}

export type TechnicalSpecificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrder
  internal_finisher?: Prisma.SortOrder
  meter_black?: Prisma.SortOrder
  meter_colour?: Prisma.SortOrder
  meter_total?: Prisma.SortOrder
  drum_life_c?: Prisma.SortOrder
  drum_life_m?: Prisma.SortOrder
  drum_life_y?: Prisma.SortOrder
  drum_life_k?: Prisma.SortOrder
}

export type TechnicalSpecificationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  cassettes?: Prisma.SortOrder
  meter_black?: Prisma.SortOrder
  meter_colour?: Prisma.SortOrder
  meter_total?: Prisma.SortOrder
  drum_life_c?: Prisma.SortOrder
  drum_life_m?: Prisma.SortOrder
  drum_life_y?: Prisma.SortOrder
  drum_life_k?: Prisma.SortOrder
}

export type TechnicalSpecificationCreateNestedOneWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.TechnicalSpecificationCreateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.TechnicalSpecificationCreateOrConnectWithoutAssetInput
  connect?: Prisma.TechnicalSpecificationWhereUniqueInput
}

export type TechnicalSpecificationUncheckedCreateNestedOneWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.TechnicalSpecificationCreateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.TechnicalSpecificationCreateOrConnectWithoutAssetInput
  connect?: Prisma.TechnicalSpecificationWhereUniqueInput
}

export type TechnicalSpecificationUpdateOneWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.TechnicalSpecificationCreateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.TechnicalSpecificationCreateOrConnectWithoutAssetInput
  upsert?: Prisma.TechnicalSpecificationUpsertWithoutAssetInput
  disconnect?: Prisma.TechnicalSpecificationWhereInput | boolean
  delete?: Prisma.TechnicalSpecificationWhereInput | boolean
  connect?: Prisma.TechnicalSpecificationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TechnicalSpecificationUpdateToOneWithWhereWithoutAssetInput, Prisma.TechnicalSpecificationUpdateWithoutAssetInput>, Prisma.TechnicalSpecificationUncheckedUpdateWithoutAssetInput>
}

export type TechnicalSpecificationUncheckedUpdateOneWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.TechnicalSpecificationCreateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.TechnicalSpecificationCreateOrConnectWithoutAssetInput
  upsert?: Prisma.TechnicalSpecificationUpsertWithoutAssetInput
  disconnect?: Prisma.TechnicalSpecificationWhereInput | boolean
  delete?: Prisma.TechnicalSpecificationWhereInput | boolean
  connect?: Prisma.TechnicalSpecificationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TechnicalSpecificationUpdateToOneWithWhereWithoutAssetInput, Prisma.TechnicalSpecificationUpdateWithoutAssetInput>, Prisma.TechnicalSpecificationUncheckedUpdateWithoutAssetInput>
}

export type TechnicalSpecificationCreateWithoutAssetInput = {
  cassettes?: number | null
  internal_finisher?: string | null
  meter_black?: number | null
  meter_colour?: number | null
  meter_total?: number | null
  drum_life_c?: number | null
  drum_life_m?: number | null
  drum_life_y?: number | null
  drum_life_k?: number | null
}

export type TechnicalSpecificationUncheckedCreateWithoutAssetInput = {
  id?: number
  cassettes?: number | null
  internal_finisher?: string | null
  meter_black?: number | null
  meter_colour?: number | null
  meter_total?: number | null
  drum_life_c?: number | null
  drum_life_m?: number | null
  drum_life_y?: number | null
  drum_life_k?: number | null
}

export type TechnicalSpecificationCreateOrConnectWithoutAssetInput = {
  where: Prisma.TechnicalSpecificationWhereUniqueInput
  create: Prisma.XOR<Prisma.TechnicalSpecificationCreateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedCreateWithoutAssetInput>
}

export type TechnicalSpecificationUpsertWithoutAssetInput = {
  update: Prisma.XOR<Prisma.TechnicalSpecificationUpdateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.TechnicalSpecificationCreateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedCreateWithoutAssetInput>
  where?: Prisma.TechnicalSpecificationWhereInput
}

export type TechnicalSpecificationUpdateToOneWithWhereWithoutAssetInput = {
  where?: Prisma.TechnicalSpecificationWhereInput
  data: Prisma.XOR<Prisma.TechnicalSpecificationUpdateWithoutAssetInput, Prisma.TechnicalSpecificationUncheckedUpdateWithoutAssetInput>
}

export type TechnicalSpecificationUpdateWithoutAssetInput = {
  cassettes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  internal_finisher?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meter_black?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_colour?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_total?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_c?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_y?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_k?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type TechnicalSpecificationUncheckedUpdateWithoutAssetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  cassettes?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  internal_finisher?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meter_black?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_colour?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  meter_total?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_c?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_m?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_y?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  drum_life_k?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type TechnicalSpecificationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  cassettes?: boolean
  internal_finisher?: boolean
  meter_black?: boolean
  meter_colour?: boolean
  meter_total?: boolean
  drum_life_c?: boolean
  drum_life_m?: boolean
  drum_life_y?: boolean
  drum_life_k?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["technicalSpecification"]>

export type TechnicalSpecificationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  cassettes?: boolean
  internal_finisher?: boolean
  meter_black?: boolean
  meter_colour?: boolean
  meter_total?: boolean
  drum_life_c?: boolean
  drum_life_m?: boolean
  drum_life_y?: boolean
  drum_life_k?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["technicalSpecification"]>

export type TechnicalSpecificationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  cassettes?: boolean
  internal_finisher?: boolean
  meter_black?: boolean
  meter_colour?: boolean
  meter_total?: boolean
  drum_life_c?: boolean
  drum_life_m?: boolean
  drum_life_y?: boolean
  drum_life_k?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["technicalSpecification"]>

export type TechnicalSpecificationSelectScalar = {
  id?: boolean
  asset_id?: boolean
  cassettes?: boolean
  internal_finisher?: boolean
  meter_black?: boolean
  meter_colour?: boolean
  meter_total?: boolean
  drum_life_c?: boolean
  drum_life_m?: boolean
  drum_life_y?: boolean
  drum_life_k?: boolean
}

export type TechnicalSpecificationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "asset_id" | "cassettes" | "internal_finisher" | "meter_black" | "meter_colour" | "meter_total" | "drum_life_c" | "drum_life_m" | "drum_life_y" | "drum_life_k", ExtArgs["result"]["technicalSpecification"]>
export type TechnicalSpecificationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}
export type TechnicalSpecificationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}
export type TechnicalSpecificationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}

export type $TechnicalSpecificationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TechnicalSpecification"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    asset_id: number
    cassettes: number | null
    internal_finisher: string | null
    meter_black: number | null
    meter_colour: number | null
    meter_total: number | null
    drum_life_c: number | null
    drum_life_m: number | null
    drum_life_y: number | null
    drum_life_k: number | null
  }, ExtArgs["result"]["technicalSpecification"]>
  composites: {}
}

export type TechnicalSpecificationGetPayload<S extends boolean | null | undefined | TechnicalSpecificationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload, S>

export type TechnicalSpecificationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TechnicalSpecificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechnicalSpecificationCountAggregateInputType | true
  }

export interface TechnicalSpecificationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechnicalSpecification'], meta: { name: 'TechnicalSpecification' } }
  /**
   * Find zero or one TechnicalSpecification that matches the filter.
   * @param {TechnicalSpecificationFindUniqueArgs} args - Arguments to find a TechnicalSpecification
   * @example
   * // Get one TechnicalSpecification
   * const technicalSpecification = await prisma.technicalSpecification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TechnicalSpecificationFindUniqueArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TechnicalSpecification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TechnicalSpecificationFindUniqueOrThrowArgs} args - Arguments to find a TechnicalSpecification
   * @example
   * // Get one TechnicalSpecification
   * const technicalSpecification = await prisma.technicalSpecification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TechnicalSpecificationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechnicalSpecification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationFindFirstArgs} args - Arguments to find a TechnicalSpecification
   * @example
   * // Get one TechnicalSpecification
   * const technicalSpecification = await prisma.technicalSpecification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TechnicalSpecificationFindFirstArgs>(args?: Prisma.SelectSubset<T, TechnicalSpecificationFindFirstArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechnicalSpecification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationFindFirstOrThrowArgs} args - Arguments to find a TechnicalSpecification
   * @example
   * // Get one TechnicalSpecification
   * const technicalSpecification = await prisma.technicalSpecification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TechnicalSpecificationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TechnicalSpecificationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TechnicalSpecifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TechnicalSpecifications
   * const technicalSpecifications = await prisma.technicalSpecification.findMany()
   * 
   * // Get first 10 TechnicalSpecifications
   * const technicalSpecifications = await prisma.technicalSpecification.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const technicalSpecificationWithIdOnly = await prisma.technicalSpecification.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TechnicalSpecificationFindManyArgs>(args?: Prisma.SelectSubset<T, TechnicalSpecificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TechnicalSpecification.
   * @param {TechnicalSpecificationCreateArgs} args - Arguments to create a TechnicalSpecification.
   * @example
   * // Create one TechnicalSpecification
   * const TechnicalSpecification = await prisma.technicalSpecification.create({
   *   data: {
   *     // ... data to create a TechnicalSpecification
   *   }
   * })
   * 
   */
  create<T extends TechnicalSpecificationCreateArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationCreateArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TechnicalSpecifications.
   * @param {TechnicalSpecificationCreateManyArgs} args - Arguments to create many TechnicalSpecifications.
   * @example
   * // Create many TechnicalSpecifications
   * const technicalSpecification = await prisma.technicalSpecification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TechnicalSpecificationCreateManyArgs>(args?: Prisma.SelectSubset<T, TechnicalSpecificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TechnicalSpecifications and returns the data saved in the database.
   * @param {TechnicalSpecificationCreateManyAndReturnArgs} args - Arguments to create many TechnicalSpecifications.
   * @example
   * // Create many TechnicalSpecifications
   * const technicalSpecification = await prisma.technicalSpecification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TechnicalSpecifications and only return the `id`
   * const technicalSpecificationWithIdOnly = await prisma.technicalSpecification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TechnicalSpecificationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TechnicalSpecificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TechnicalSpecification.
   * @param {TechnicalSpecificationDeleteArgs} args - Arguments to delete one TechnicalSpecification.
   * @example
   * // Delete one TechnicalSpecification
   * const TechnicalSpecification = await prisma.technicalSpecification.delete({
   *   where: {
   *     // ... filter to delete one TechnicalSpecification
   *   }
   * })
   * 
   */
  delete<T extends TechnicalSpecificationDeleteArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationDeleteArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TechnicalSpecification.
   * @param {TechnicalSpecificationUpdateArgs} args - Arguments to update one TechnicalSpecification.
   * @example
   * // Update one TechnicalSpecification
   * const technicalSpecification = await prisma.technicalSpecification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TechnicalSpecificationUpdateArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationUpdateArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TechnicalSpecifications.
   * @param {TechnicalSpecificationDeleteManyArgs} args - Arguments to filter TechnicalSpecifications to delete.
   * @example
   * // Delete a few TechnicalSpecifications
   * const { count } = await prisma.technicalSpecification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TechnicalSpecificationDeleteManyArgs>(args?: Prisma.SelectSubset<T, TechnicalSpecificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechnicalSpecifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TechnicalSpecifications
   * const technicalSpecification = await prisma.technicalSpecification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TechnicalSpecificationUpdateManyArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechnicalSpecifications and returns the data updated in the database.
   * @param {TechnicalSpecificationUpdateManyAndReturnArgs} args - Arguments to update many TechnicalSpecifications.
   * @example
   * // Update many TechnicalSpecifications
   * const technicalSpecification = await prisma.technicalSpecification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TechnicalSpecifications and only return the `id`
   * const technicalSpecificationWithIdOnly = await prisma.technicalSpecification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TechnicalSpecificationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TechnicalSpecification.
   * @param {TechnicalSpecificationUpsertArgs} args - Arguments to update or create a TechnicalSpecification.
   * @example
   * // Update or create a TechnicalSpecification
   * const technicalSpecification = await prisma.technicalSpecification.upsert({
   *   create: {
   *     // ... data to create a TechnicalSpecification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TechnicalSpecification we want to update
   *   }
   * })
   */
  upsert<T extends TechnicalSpecificationUpsertArgs>(args: Prisma.SelectSubset<T, TechnicalSpecificationUpsertArgs<ExtArgs>>): Prisma.Prisma__TechnicalSpecificationClient<runtime.Types.Result.GetResult<Prisma.$TechnicalSpecificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TechnicalSpecifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationCountArgs} args - Arguments to filter TechnicalSpecifications to count.
   * @example
   * // Count the number of TechnicalSpecifications
   * const count = await prisma.technicalSpecification.count({
   *   where: {
   *     // ... the filter for the TechnicalSpecifications we want to count
   *   }
   * })
  **/
  count<T extends TechnicalSpecificationCountArgs>(
    args?: Prisma.Subset<T, TechnicalSpecificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechnicalSpecificationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TechnicalSpecification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechnicalSpecificationAggregateArgs>(args: Prisma.Subset<T, TechnicalSpecificationAggregateArgs>): Prisma.PrismaPromise<GetTechnicalSpecificationAggregateType<T>>

  /**
   * Group by TechnicalSpecification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechnicalSpecificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TechnicalSpecificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TechnicalSpecificationGroupByArgs['orderBy'] }
      : { orderBy?: TechnicalSpecificationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TechnicalSpecificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechnicalSpecificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TechnicalSpecification model
 */
readonly fields: TechnicalSpecificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TechnicalSpecification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TechnicalSpecificationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TechnicalSpecification model
 */
export interface TechnicalSpecificationFieldRefs {
  readonly id: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly asset_id: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly cassettes: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly internal_finisher: Prisma.FieldRef<"TechnicalSpecification", 'String'>
  readonly meter_black: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly meter_colour: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly meter_total: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly drum_life_c: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly drum_life_m: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly drum_life_y: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
  readonly drum_life_k: Prisma.FieldRef<"TechnicalSpecification", 'Int'>
}
    

// Custom InputTypes
/**
 * TechnicalSpecification findUnique
 */
export type TechnicalSpecificationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * Filter, which TechnicalSpecification to fetch.
   */
  where: Prisma.TechnicalSpecificationWhereUniqueInput
}

/**
 * TechnicalSpecification findUniqueOrThrow
 */
export type TechnicalSpecificationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * Filter, which TechnicalSpecification to fetch.
   */
  where: Prisma.TechnicalSpecificationWhereUniqueInput
}

/**
 * TechnicalSpecification findFirst
 */
export type TechnicalSpecificationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * Filter, which TechnicalSpecification to fetch.
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechnicalSpecifications to fetch.
   */
  orderBy?: Prisma.TechnicalSpecificationOrderByWithRelationInput | Prisma.TechnicalSpecificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechnicalSpecifications.
   */
  cursor?: Prisma.TechnicalSpecificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechnicalSpecifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechnicalSpecifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechnicalSpecifications.
   */
  distinct?: Prisma.TechnicalSpecificationScalarFieldEnum | Prisma.TechnicalSpecificationScalarFieldEnum[]
}

/**
 * TechnicalSpecification findFirstOrThrow
 */
export type TechnicalSpecificationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * Filter, which TechnicalSpecification to fetch.
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechnicalSpecifications to fetch.
   */
  orderBy?: Prisma.TechnicalSpecificationOrderByWithRelationInput | Prisma.TechnicalSpecificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechnicalSpecifications.
   */
  cursor?: Prisma.TechnicalSpecificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechnicalSpecifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechnicalSpecifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechnicalSpecifications.
   */
  distinct?: Prisma.TechnicalSpecificationScalarFieldEnum | Prisma.TechnicalSpecificationScalarFieldEnum[]
}

/**
 * TechnicalSpecification findMany
 */
export type TechnicalSpecificationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * Filter, which TechnicalSpecifications to fetch.
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechnicalSpecifications to fetch.
   */
  orderBy?: Prisma.TechnicalSpecificationOrderByWithRelationInput | Prisma.TechnicalSpecificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TechnicalSpecifications.
   */
  cursor?: Prisma.TechnicalSpecificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechnicalSpecifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechnicalSpecifications.
   */
  skip?: number
  distinct?: Prisma.TechnicalSpecificationScalarFieldEnum | Prisma.TechnicalSpecificationScalarFieldEnum[]
}

/**
 * TechnicalSpecification create
 */
export type TechnicalSpecificationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * The data needed to create a TechnicalSpecification.
   */
  data: Prisma.XOR<Prisma.TechnicalSpecificationCreateInput, Prisma.TechnicalSpecificationUncheckedCreateInput>
}

/**
 * TechnicalSpecification createMany
 */
export type TechnicalSpecificationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TechnicalSpecifications.
   */
  data: Prisma.TechnicalSpecificationCreateManyInput | Prisma.TechnicalSpecificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TechnicalSpecification createManyAndReturn
 */
export type TechnicalSpecificationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * The data used to create many TechnicalSpecifications.
   */
  data: Prisma.TechnicalSpecificationCreateManyInput | Prisma.TechnicalSpecificationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TechnicalSpecification update
 */
export type TechnicalSpecificationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * The data needed to update a TechnicalSpecification.
   */
  data: Prisma.XOR<Prisma.TechnicalSpecificationUpdateInput, Prisma.TechnicalSpecificationUncheckedUpdateInput>
  /**
   * Choose, which TechnicalSpecification to update.
   */
  where: Prisma.TechnicalSpecificationWhereUniqueInput
}

/**
 * TechnicalSpecification updateMany
 */
export type TechnicalSpecificationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TechnicalSpecifications.
   */
  data: Prisma.XOR<Prisma.TechnicalSpecificationUpdateManyMutationInput, Prisma.TechnicalSpecificationUncheckedUpdateManyInput>
  /**
   * Filter which TechnicalSpecifications to update
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * Limit how many TechnicalSpecifications to update.
   */
  limit?: number
}

/**
 * TechnicalSpecification updateManyAndReturn
 */
export type TechnicalSpecificationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * The data used to update TechnicalSpecifications.
   */
  data: Prisma.XOR<Prisma.TechnicalSpecificationUpdateManyMutationInput, Prisma.TechnicalSpecificationUncheckedUpdateManyInput>
  /**
   * Filter which TechnicalSpecifications to update
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * Limit how many TechnicalSpecifications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TechnicalSpecification upsert
 */
export type TechnicalSpecificationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * The filter to search for the TechnicalSpecification to update in case it exists.
   */
  where: Prisma.TechnicalSpecificationWhereUniqueInput
  /**
   * In case the TechnicalSpecification found by the `where` argument doesn't exist, create a new TechnicalSpecification with this data.
   */
  create: Prisma.XOR<Prisma.TechnicalSpecificationCreateInput, Prisma.TechnicalSpecificationUncheckedCreateInput>
  /**
   * In case the TechnicalSpecification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TechnicalSpecificationUpdateInput, Prisma.TechnicalSpecificationUncheckedUpdateInput>
}

/**
 * TechnicalSpecification delete
 */
export type TechnicalSpecificationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
  /**
   * Filter which TechnicalSpecification to delete.
   */
  where: Prisma.TechnicalSpecificationWhereUniqueInput
}

/**
 * TechnicalSpecification deleteMany
 */
export type TechnicalSpecificationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechnicalSpecifications to delete
   */
  where?: Prisma.TechnicalSpecificationWhereInput
  /**
   * Limit how many TechnicalSpecifications to delete.
   */
  limit?: number
}

/**
 * TechnicalSpecification without action
 */
export type TechnicalSpecificationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechnicalSpecification
   */
  select?: Prisma.TechnicalSpecificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechnicalSpecification
   */
  omit?: Prisma.TechnicalSpecificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TechnicalSpecificationInclude<ExtArgs> | null
}
