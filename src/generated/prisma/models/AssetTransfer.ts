
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AssetTransfer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AssetTransfer
 * 
 */
export type AssetTransferModel = runtime.Types.Result.DefaultSelection<Prisma.$AssetTransferPayload>

export type AggregateAssetTransfer = {
  _count: AssetTransferCountAggregateOutputType | null
  _avg: AssetTransferAvgAggregateOutputType | null
  _sum: AssetTransferSumAggregateOutputType | null
  _min: AssetTransferMinAggregateOutputType | null
  _max: AssetTransferMaxAggregateOutputType | null
}

export type AssetTransferAvgAggregateOutputType = {
  asset_id: number | null
  transfer_id: number | null
}

export type AssetTransferSumAggregateOutputType = {
  asset_id: number | null
  transfer_id: number | null
}

export type AssetTransferMinAggregateOutputType = {
  asset_id: number | null
  transfer_id: number | null
}

export type AssetTransferMaxAggregateOutputType = {
  asset_id: number | null
  transfer_id: number | null
}

export type AssetTransferCountAggregateOutputType = {
  asset_id: number
  transfer_id: number
  _all: number
}


export type AssetTransferAvgAggregateInputType = {
  asset_id?: true
  transfer_id?: true
}

export type AssetTransferSumAggregateInputType = {
  asset_id?: true
  transfer_id?: true
}

export type AssetTransferMinAggregateInputType = {
  asset_id?: true
  transfer_id?: true
}

export type AssetTransferMaxAggregateInputType = {
  asset_id?: true
  transfer_id?: true
}

export type AssetTransferCountAggregateInputType = {
  asset_id?: true
  transfer_id?: true
  _all?: true
}

export type AssetTransferAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetTransfer to aggregate.
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTransfers to fetch.
   */
  orderBy?: Prisma.AssetTransferOrderByWithRelationInput | Prisma.AssetTransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssetTransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTransfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AssetTransfers
  **/
  _count?: true | AssetTransferCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssetTransferAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssetTransferSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssetTransferMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssetTransferMaxAggregateInputType
}

export type GetAssetTransferAggregateType<T extends AssetTransferAggregateArgs> = {
      [P in keyof T & keyof AggregateAssetTransfer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssetTransfer[P]>
    : Prisma.GetScalarType<T[P], AggregateAssetTransfer[P]>
}




export type AssetTransferGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssetTransferWhereInput
  orderBy?: Prisma.AssetTransferOrderByWithAggregationInput | Prisma.AssetTransferOrderByWithAggregationInput[]
  by: Prisma.AssetTransferScalarFieldEnum[] | Prisma.AssetTransferScalarFieldEnum
  having?: Prisma.AssetTransferScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssetTransferCountAggregateInputType | true
  _avg?: AssetTransferAvgAggregateInputType
  _sum?: AssetTransferSumAggregateInputType
  _min?: AssetTransferMinAggregateInputType
  _max?: AssetTransferMaxAggregateInputType
}

export type AssetTransferGroupByOutputType = {
  asset_id: number
  transfer_id: number
  _count: AssetTransferCountAggregateOutputType | null
  _avg: AssetTransferAvgAggregateOutputType | null
  _sum: AssetTransferSumAggregateOutputType | null
  _min: AssetTransferMinAggregateOutputType | null
  _max: AssetTransferMaxAggregateOutputType | null
}

type GetAssetTransferGroupByPayload<T extends AssetTransferGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssetTransferGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssetTransferGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssetTransferGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssetTransferGroupByOutputType[P]>
      }
    >
  > 



export type AssetTransferWhereInput = {
  AND?: Prisma.AssetTransferWhereInput | Prisma.AssetTransferWhereInput[]
  OR?: Prisma.AssetTransferWhereInput[]
  NOT?: Prisma.AssetTransferWhereInput | Prisma.AssetTransferWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetTransfer"> | number
  transfer_id?: Prisma.IntFilter<"AssetTransfer"> | number
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  transfer?: Prisma.XOR<Prisma.TransferScalarRelationFilter, Prisma.TransferWhereInput>
}

export type AssetTransferOrderByWithRelationInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
  transfer?: Prisma.TransferOrderByWithRelationInput
}

export type AssetTransferWhereUniqueInput = Prisma.AtLeast<{
  asset_id_transfer_id?: Prisma.AssetTransferAsset_idTransfer_idCompoundUniqueInput
  AND?: Prisma.AssetTransferWhereInput | Prisma.AssetTransferWhereInput[]
  OR?: Prisma.AssetTransferWhereInput[]
  NOT?: Prisma.AssetTransferWhereInput | Prisma.AssetTransferWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetTransfer"> | number
  transfer_id?: Prisma.IntFilter<"AssetTransfer"> | number
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
  transfer?: Prisma.XOR<Prisma.TransferScalarRelationFilter, Prisma.TransferWhereInput>
}, "asset_id_transfer_id">

export type AssetTransferOrderByWithAggregationInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
  _count?: Prisma.AssetTransferCountOrderByAggregateInput
  _avg?: Prisma.AssetTransferAvgOrderByAggregateInput
  _max?: Prisma.AssetTransferMaxOrderByAggregateInput
  _min?: Prisma.AssetTransferMinOrderByAggregateInput
  _sum?: Prisma.AssetTransferSumOrderByAggregateInput
}

export type AssetTransferScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssetTransferScalarWhereWithAggregatesInput | Prisma.AssetTransferScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssetTransferScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssetTransferScalarWhereWithAggregatesInput | Prisma.AssetTransferScalarWhereWithAggregatesInput[]
  asset_id?: Prisma.IntWithAggregatesFilter<"AssetTransfer"> | number
  transfer_id?: Prisma.IntWithAggregatesFilter<"AssetTransfer"> | number
}

export type AssetTransferCreateInput = {
  asset: Prisma.AssetCreateNestedOneWithoutAsset_transfersInput
  transfer: Prisma.TransferCreateNestedOneWithoutAsset_transfersInput
}

export type AssetTransferUncheckedCreateInput = {
  asset_id: number
  transfer_id: number
}

export type AssetTransferUpdateInput = {
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_transfersNestedInput
  transfer?: Prisma.TransferUpdateOneRequiredWithoutAsset_transfersNestedInput
}

export type AssetTransferUncheckedUpdateInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AssetTransferCreateManyInput = {
  asset_id: number
  transfer_id: number
}

export type AssetTransferUpdateManyMutationInput = {

}

export type AssetTransferUncheckedUpdateManyInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  transfer_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AssetTransferListRelationFilter = {
  every?: Prisma.AssetTransferWhereInput
  some?: Prisma.AssetTransferWhereInput
  none?: Prisma.AssetTransferWhereInput
}

export type AssetTransferOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AssetTransferAsset_idTransfer_idCompoundUniqueInput = {
  asset_id: number
  transfer_id: number
}

export type AssetTransferCountOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
}

export type AssetTransferAvgOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
}

export type AssetTransferMaxOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
}

export type AssetTransferMinOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
}

export type AssetTransferSumOrderByAggregateInput = {
  asset_id?: Prisma.SortOrder
  transfer_id?: Prisma.SortOrder
}

export type AssetTransferCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutAssetInput, Prisma.AssetTransferUncheckedCreateWithoutAssetInput> | Prisma.AssetTransferCreateWithoutAssetInput[] | Prisma.AssetTransferUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutAssetInput | Prisma.AssetTransferCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetTransferCreateManyAssetInputEnvelope
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
}

export type AssetTransferUncheckedCreateNestedManyWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutAssetInput, Prisma.AssetTransferUncheckedCreateWithoutAssetInput> | Prisma.AssetTransferCreateWithoutAssetInput[] | Prisma.AssetTransferUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutAssetInput | Prisma.AssetTransferCreateOrConnectWithoutAssetInput[]
  createMany?: Prisma.AssetTransferCreateManyAssetInputEnvelope
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
}

export type AssetTransferUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutAssetInput, Prisma.AssetTransferUncheckedCreateWithoutAssetInput> | Prisma.AssetTransferCreateWithoutAssetInput[] | Prisma.AssetTransferUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutAssetInput | Prisma.AssetTransferCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetTransferUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetTransferUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetTransferCreateManyAssetInputEnvelope
  set?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  disconnect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  delete?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  update?: Prisma.AssetTransferUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetTransferUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetTransferUpdateManyWithWhereWithoutAssetInput | Prisma.AssetTransferUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetTransferScalarWhereInput | Prisma.AssetTransferScalarWhereInput[]
}

export type AssetTransferUncheckedUpdateManyWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutAssetInput, Prisma.AssetTransferUncheckedCreateWithoutAssetInput> | Prisma.AssetTransferCreateWithoutAssetInput[] | Prisma.AssetTransferUncheckedCreateWithoutAssetInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutAssetInput | Prisma.AssetTransferCreateOrConnectWithoutAssetInput[]
  upsert?: Prisma.AssetTransferUpsertWithWhereUniqueWithoutAssetInput | Prisma.AssetTransferUpsertWithWhereUniqueWithoutAssetInput[]
  createMany?: Prisma.AssetTransferCreateManyAssetInputEnvelope
  set?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  disconnect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  delete?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  update?: Prisma.AssetTransferUpdateWithWhereUniqueWithoutAssetInput | Prisma.AssetTransferUpdateWithWhereUniqueWithoutAssetInput[]
  updateMany?: Prisma.AssetTransferUpdateManyWithWhereWithoutAssetInput | Prisma.AssetTransferUpdateManyWithWhereWithoutAssetInput[]
  deleteMany?: Prisma.AssetTransferScalarWhereInput | Prisma.AssetTransferScalarWhereInput[]
}

export type AssetTransferCreateNestedManyWithoutTransferInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutTransferInput, Prisma.AssetTransferUncheckedCreateWithoutTransferInput> | Prisma.AssetTransferCreateWithoutTransferInput[] | Prisma.AssetTransferUncheckedCreateWithoutTransferInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutTransferInput | Prisma.AssetTransferCreateOrConnectWithoutTransferInput[]
  createMany?: Prisma.AssetTransferCreateManyTransferInputEnvelope
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
}

export type AssetTransferUncheckedCreateNestedManyWithoutTransferInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutTransferInput, Prisma.AssetTransferUncheckedCreateWithoutTransferInput> | Prisma.AssetTransferCreateWithoutTransferInput[] | Prisma.AssetTransferUncheckedCreateWithoutTransferInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutTransferInput | Prisma.AssetTransferCreateOrConnectWithoutTransferInput[]
  createMany?: Prisma.AssetTransferCreateManyTransferInputEnvelope
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
}

export type AssetTransferUpdateManyWithoutTransferNestedInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutTransferInput, Prisma.AssetTransferUncheckedCreateWithoutTransferInput> | Prisma.AssetTransferCreateWithoutTransferInput[] | Prisma.AssetTransferUncheckedCreateWithoutTransferInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutTransferInput | Prisma.AssetTransferCreateOrConnectWithoutTransferInput[]
  upsert?: Prisma.AssetTransferUpsertWithWhereUniqueWithoutTransferInput | Prisma.AssetTransferUpsertWithWhereUniqueWithoutTransferInput[]
  createMany?: Prisma.AssetTransferCreateManyTransferInputEnvelope
  set?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  disconnect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  delete?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  update?: Prisma.AssetTransferUpdateWithWhereUniqueWithoutTransferInput | Prisma.AssetTransferUpdateWithWhereUniqueWithoutTransferInput[]
  updateMany?: Prisma.AssetTransferUpdateManyWithWhereWithoutTransferInput | Prisma.AssetTransferUpdateManyWithWhereWithoutTransferInput[]
  deleteMany?: Prisma.AssetTransferScalarWhereInput | Prisma.AssetTransferScalarWhereInput[]
}

export type AssetTransferUncheckedUpdateManyWithoutTransferNestedInput = {
  create?: Prisma.XOR<Prisma.AssetTransferCreateWithoutTransferInput, Prisma.AssetTransferUncheckedCreateWithoutTransferInput> | Prisma.AssetTransferCreateWithoutTransferInput[] | Prisma.AssetTransferUncheckedCreateWithoutTransferInput[]
  connectOrCreate?: Prisma.AssetTransferCreateOrConnectWithoutTransferInput | Prisma.AssetTransferCreateOrConnectWithoutTransferInput[]
  upsert?: Prisma.AssetTransferUpsertWithWhereUniqueWithoutTransferInput | Prisma.AssetTransferUpsertWithWhereUniqueWithoutTransferInput[]
  createMany?: Prisma.AssetTransferCreateManyTransferInputEnvelope
  set?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  disconnect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  delete?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  connect?: Prisma.AssetTransferWhereUniqueInput | Prisma.AssetTransferWhereUniqueInput[]
  update?: Prisma.AssetTransferUpdateWithWhereUniqueWithoutTransferInput | Prisma.AssetTransferUpdateWithWhereUniqueWithoutTransferInput[]
  updateMany?: Prisma.AssetTransferUpdateManyWithWhereWithoutTransferInput | Prisma.AssetTransferUpdateManyWithWhereWithoutTransferInput[]
  deleteMany?: Prisma.AssetTransferScalarWhereInput | Prisma.AssetTransferScalarWhereInput[]
}

export type AssetTransferCreateWithoutAssetInput = {
  transfer: Prisma.TransferCreateNestedOneWithoutAsset_transfersInput
}

export type AssetTransferUncheckedCreateWithoutAssetInput = {
  transfer_id: number
}

export type AssetTransferCreateOrConnectWithoutAssetInput = {
  where: Prisma.AssetTransferWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetTransferCreateWithoutAssetInput, Prisma.AssetTransferUncheckedCreateWithoutAssetInput>
}

export type AssetTransferCreateManyAssetInputEnvelope = {
  data: Prisma.AssetTransferCreateManyAssetInput | Prisma.AssetTransferCreateManyAssetInput[]
  skipDuplicates?: boolean
}

export type AssetTransferUpsertWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetTransferWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetTransferUpdateWithoutAssetInput, Prisma.AssetTransferUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.AssetTransferCreateWithoutAssetInput, Prisma.AssetTransferUncheckedCreateWithoutAssetInput>
}

export type AssetTransferUpdateWithWhereUniqueWithoutAssetInput = {
  where: Prisma.AssetTransferWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetTransferUpdateWithoutAssetInput, Prisma.AssetTransferUncheckedUpdateWithoutAssetInput>
}

export type AssetTransferUpdateManyWithWhereWithoutAssetInput = {
  where: Prisma.AssetTransferScalarWhereInput
  data: Prisma.XOR<Prisma.AssetTransferUpdateManyMutationInput, Prisma.AssetTransferUncheckedUpdateManyWithoutAssetInput>
}

export type AssetTransferScalarWhereInput = {
  AND?: Prisma.AssetTransferScalarWhereInput | Prisma.AssetTransferScalarWhereInput[]
  OR?: Prisma.AssetTransferScalarWhereInput[]
  NOT?: Prisma.AssetTransferScalarWhereInput | Prisma.AssetTransferScalarWhereInput[]
  asset_id?: Prisma.IntFilter<"AssetTransfer"> | number
  transfer_id?: Prisma.IntFilter<"AssetTransfer"> | number
}

export type AssetTransferCreateWithoutTransferInput = {
  asset: Prisma.AssetCreateNestedOneWithoutAsset_transfersInput
}

export type AssetTransferUncheckedCreateWithoutTransferInput = {
  asset_id: number
}

export type AssetTransferCreateOrConnectWithoutTransferInput = {
  where: Prisma.AssetTransferWhereUniqueInput
  create: Prisma.XOR<Prisma.AssetTransferCreateWithoutTransferInput, Prisma.AssetTransferUncheckedCreateWithoutTransferInput>
}

export type AssetTransferCreateManyTransferInputEnvelope = {
  data: Prisma.AssetTransferCreateManyTransferInput | Prisma.AssetTransferCreateManyTransferInput[]
  skipDuplicates?: boolean
}

export type AssetTransferUpsertWithWhereUniqueWithoutTransferInput = {
  where: Prisma.AssetTransferWhereUniqueInput
  update: Prisma.XOR<Prisma.AssetTransferUpdateWithoutTransferInput, Prisma.AssetTransferUncheckedUpdateWithoutTransferInput>
  create: Prisma.XOR<Prisma.AssetTransferCreateWithoutTransferInput, Prisma.AssetTransferUncheckedCreateWithoutTransferInput>
}

export type AssetTransferUpdateWithWhereUniqueWithoutTransferInput = {
  where: Prisma.AssetTransferWhereUniqueInput
  data: Prisma.XOR<Prisma.AssetTransferUpdateWithoutTransferInput, Prisma.AssetTransferUncheckedUpdateWithoutTransferInput>
}

export type AssetTransferUpdateManyWithWhereWithoutTransferInput = {
  where: Prisma.AssetTransferScalarWhereInput
  data: Prisma.XOR<Prisma.AssetTransferUpdateManyMutationInput, Prisma.AssetTransferUncheckedUpdateManyWithoutTransferInput>
}

export type AssetTransferCreateManyAssetInput = {
  transfer_id: number
}

export type AssetTransferUpdateWithoutAssetInput = {
  transfer?: Prisma.TransferUpdateOneRequiredWithoutAsset_transfersNestedInput
}

export type AssetTransferUncheckedUpdateWithoutAssetInput = {
  transfer_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AssetTransferUncheckedUpdateManyWithoutAssetInput = {
  transfer_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AssetTransferCreateManyTransferInput = {
  asset_id: number
}

export type AssetTransferUpdateWithoutTransferInput = {
  asset?: Prisma.AssetUpdateOneRequiredWithoutAsset_transfersNestedInput
}

export type AssetTransferUncheckedUpdateWithoutTransferInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
}

export type AssetTransferUncheckedUpdateManyWithoutTransferInput = {
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
}



export type AssetTransferSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  transfer_id?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  transfer?: boolean | Prisma.TransferDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetTransfer"]>

export type AssetTransferSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  transfer_id?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  transfer?: boolean | Prisma.TransferDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetTransfer"]>

export type AssetTransferSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  asset_id?: boolean
  transfer_id?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  transfer?: boolean | Prisma.TransferDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assetTransfer"]>

export type AssetTransferSelectScalar = {
  asset_id?: boolean
  transfer_id?: boolean
}

export type AssetTransferOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"asset_id" | "transfer_id", ExtArgs["result"]["assetTransfer"]>
export type AssetTransferInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  transfer?: boolean | Prisma.TransferDefaultArgs<ExtArgs>
}
export type AssetTransferIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  transfer?: boolean | Prisma.TransferDefaultArgs<ExtArgs>
}
export type AssetTransferIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
  transfer?: boolean | Prisma.TransferDefaultArgs<ExtArgs>
}

export type $AssetTransferPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AssetTransfer"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
    transfer: Prisma.$TransferPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    asset_id: number
    transfer_id: number
  }, ExtArgs["result"]["assetTransfer"]>
  composites: {}
}

export type AssetTransferGetPayload<S extends boolean | null | undefined | AssetTransferDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload, S>

export type AssetTransferCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssetTransferFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssetTransferCountAggregateInputType | true
  }

export interface AssetTransferDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssetTransfer'], meta: { name: 'AssetTransfer' } }
  /**
   * Find zero or one AssetTransfer that matches the filter.
   * @param {AssetTransferFindUniqueArgs} args - Arguments to find a AssetTransfer
   * @example
   * // Get one AssetTransfer
   * const assetTransfer = await prisma.assetTransfer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssetTransferFindUniqueArgs>(args: Prisma.SelectSubset<T, AssetTransferFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AssetTransfer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssetTransferFindUniqueOrThrowArgs} args - Arguments to find a AssetTransfer
   * @example
   * // Get one AssetTransfer
   * const assetTransfer = await prisma.assetTransfer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssetTransferFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssetTransferFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetTransfer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferFindFirstArgs} args - Arguments to find a AssetTransfer
   * @example
   * // Get one AssetTransfer
   * const assetTransfer = await prisma.assetTransfer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssetTransferFindFirstArgs>(args?: Prisma.SelectSubset<T, AssetTransferFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AssetTransfer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferFindFirstOrThrowArgs} args - Arguments to find a AssetTransfer
   * @example
   * // Get one AssetTransfer
   * const assetTransfer = await prisma.assetTransfer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssetTransferFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssetTransferFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AssetTransfers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssetTransfers
   * const assetTransfers = await prisma.assetTransfer.findMany()
   * 
   * // Get first 10 AssetTransfers
   * const assetTransfers = await prisma.assetTransfer.findMany({ take: 10 })
   * 
   * // Only select the `asset_id`
   * const assetTransferWithAsset_idOnly = await prisma.assetTransfer.findMany({ select: { asset_id: true } })
   * 
   */
  findMany<T extends AssetTransferFindManyArgs>(args?: Prisma.SelectSubset<T, AssetTransferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AssetTransfer.
   * @param {AssetTransferCreateArgs} args - Arguments to create a AssetTransfer.
   * @example
   * // Create one AssetTransfer
   * const AssetTransfer = await prisma.assetTransfer.create({
   *   data: {
   *     // ... data to create a AssetTransfer
   *   }
   * })
   * 
   */
  create<T extends AssetTransferCreateArgs>(args: Prisma.SelectSubset<T, AssetTransferCreateArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AssetTransfers.
   * @param {AssetTransferCreateManyArgs} args - Arguments to create many AssetTransfers.
   * @example
   * // Create many AssetTransfers
   * const assetTransfer = await prisma.assetTransfer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssetTransferCreateManyArgs>(args?: Prisma.SelectSubset<T, AssetTransferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AssetTransfers and returns the data saved in the database.
   * @param {AssetTransferCreateManyAndReturnArgs} args - Arguments to create many AssetTransfers.
   * @example
   * // Create many AssetTransfers
   * const assetTransfer = await prisma.assetTransfer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AssetTransfers and only return the `asset_id`
   * const assetTransferWithAsset_idOnly = await prisma.assetTransfer.createManyAndReturn({
   *   select: { asset_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssetTransferCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssetTransferCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AssetTransfer.
   * @param {AssetTransferDeleteArgs} args - Arguments to delete one AssetTransfer.
   * @example
   * // Delete one AssetTransfer
   * const AssetTransfer = await prisma.assetTransfer.delete({
   *   where: {
   *     // ... filter to delete one AssetTransfer
   *   }
   * })
   * 
   */
  delete<T extends AssetTransferDeleteArgs>(args: Prisma.SelectSubset<T, AssetTransferDeleteArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AssetTransfer.
   * @param {AssetTransferUpdateArgs} args - Arguments to update one AssetTransfer.
   * @example
   * // Update one AssetTransfer
   * const assetTransfer = await prisma.assetTransfer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssetTransferUpdateArgs>(args: Prisma.SelectSubset<T, AssetTransferUpdateArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AssetTransfers.
   * @param {AssetTransferDeleteManyArgs} args - Arguments to filter AssetTransfers to delete.
   * @example
   * // Delete a few AssetTransfers
   * const { count } = await prisma.assetTransfer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssetTransferDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssetTransferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetTransfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssetTransfers
   * const assetTransfer = await prisma.assetTransfer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssetTransferUpdateManyArgs>(args: Prisma.SelectSubset<T, AssetTransferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AssetTransfers and returns the data updated in the database.
   * @param {AssetTransferUpdateManyAndReturnArgs} args - Arguments to update many AssetTransfers.
   * @example
   * // Update many AssetTransfers
   * const assetTransfer = await prisma.assetTransfer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AssetTransfers and only return the `asset_id`
   * const assetTransferWithAsset_idOnly = await prisma.assetTransfer.updateManyAndReturn({
   *   select: { asset_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssetTransferUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssetTransferUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AssetTransfer.
   * @param {AssetTransferUpsertArgs} args - Arguments to update or create a AssetTransfer.
   * @example
   * // Update or create a AssetTransfer
   * const assetTransfer = await prisma.assetTransfer.upsert({
   *   create: {
   *     // ... data to create a AssetTransfer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssetTransfer we want to update
   *   }
   * })
   */
  upsert<T extends AssetTransferUpsertArgs>(args: Prisma.SelectSubset<T, AssetTransferUpsertArgs<ExtArgs>>): Prisma.Prisma__AssetTransferClient<runtime.Types.Result.GetResult<Prisma.$AssetTransferPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AssetTransfers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferCountArgs} args - Arguments to filter AssetTransfers to count.
   * @example
   * // Count the number of AssetTransfers
   * const count = await prisma.assetTransfer.count({
   *   where: {
   *     // ... the filter for the AssetTransfers we want to count
   *   }
   * })
  **/
  count<T extends AssetTransferCountArgs>(
    args?: Prisma.Subset<T, AssetTransferCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssetTransferCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AssetTransfer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssetTransferAggregateArgs>(args: Prisma.Subset<T, AssetTransferAggregateArgs>): Prisma.PrismaPromise<GetAssetTransferAggregateType<T>>

  /**
   * Group by AssetTransfer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssetTransferGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssetTransferGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssetTransferGroupByArgs['orderBy'] }
      : { orderBy?: AssetTransferGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssetTransferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssetTransferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AssetTransfer model
 */
readonly fields: AssetTransferFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssetTransfer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssetTransferClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  transfer<T extends Prisma.TransferDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TransferDefaultArgs<ExtArgs>>): Prisma.Prisma__TransferClient<runtime.Types.Result.GetResult<Prisma.$TransferPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AssetTransfer model
 */
export interface AssetTransferFieldRefs {
  readonly asset_id: Prisma.FieldRef<"AssetTransfer", 'Int'>
  readonly transfer_id: Prisma.FieldRef<"AssetTransfer", 'Int'>
}
    

// Custom InputTypes
/**
 * AssetTransfer findUnique
 */
export type AssetTransferFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * Filter, which AssetTransfer to fetch.
   */
  where: Prisma.AssetTransferWhereUniqueInput
}

/**
 * AssetTransfer findUniqueOrThrow
 */
export type AssetTransferFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * Filter, which AssetTransfer to fetch.
   */
  where: Prisma.AssetTransferWhereUniqueInput
}

/**
 * AssetTransfer findFirst
 */
export type AssetTransferFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * Filter, which AssetTransfer to fetch.
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTransfers to fetch.
   */
  orderBy?: Prisma.AssetTransferOrderByWithRelationInput | Prisma.AssetTransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetTransfers.
   */
  cursor?: Prisma.AssetTransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTransfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetTransfers.
   */
  distinct?: Prisma.AssetTransferScalarFieldEnum | Prisma.AssetTransferScalarFieldEnum[]
}

/**
 * AssetTransfer findFirstOrThrow
 */
export type AssetTransferFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * Filter, which AssetTransfer to fetch.
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTransfers to fetch.
   */
  orderBy?: Prisma.AssetTransferOrderByWithRelationInput | Prisma.AssetTransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AssetTransfers.
   */
  cursor?: Prisma.AssetTransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTransfers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AssetTransfers.
   */
  distinct?: Prisma.AssetTransferScalarFieldEnum | Prisma.AssetTransferScalarFieldEnum[]
}

/**
 * AssetTransfer findMany
 */
export type AssetTransferFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * Filter, which AssetTransfers to fetch.
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AssetTransfers to fetch.
   */
  orderBy?: Prisma.AssetTransferOrderByWithRelationInput | Prisma.AssetTransferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AssetTransfers.
   */
  cursor?: Prisma.AssetTransferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AssetTransfers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AssetTransfers.
   */
  skip?: number
  distinct?: Prisma.AssetTransferScalarFieldEnum | Prisma.AssetTransferScalarFieldEnum[]
}

/**
 * AssetTransfer create
 */
export type AssetTransferCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * The data needed to create a AssetTransfer.
   */
  data: Prisma.XOR<Prisma.AssetTransferCreateInput, Prisma.AssetTransferUncheckedCreateInput>
}

/**
 * AssetTransfer createMany
 */
export type AssetTransferCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AssetTransfers.
   */
  data: Prisma.AssetTransferCreateManyInput | Prisma.AssetTransferCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AssetTransfer createManyAndReturn
 */
export type AssetTransferCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * The data used to create many AssetTransfers.
   */
  data: Prisma.AssetTransferCreateManyInput | Prisma.AssetTransferCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AssetTransfer update
 */
export type AssetTransferUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * The data needed to update a AssetTransfer.
   */
  data: Prisma.XOR<Prisma.AssetTransferUpdateInput, Prisma.AssetTransferUncheckedUpdateInput>
  /**
   * Choose, which AssetTransfer to update.
   */
  where: Prisma.AssetTransferWhereUniqueInput
}

/**
 * AssetTransfer updateMany
 */
export type AssetTransferUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AssetTransfers.
   */
  data: Prisma.XOR<Prisma.AssetTransferUpdateManyMutationInput, Prisma.AssetTransferUncheckedUpdateManyInput>
  /**
   * Filter which AssetTransfers to update
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * Limit how many AssetTransfers to update.
   */
  limit?: number
}

/**
 * AssetTransfer updateManyAndReturn
 */
export type AssetTransferUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * The data used to update AssetTransfers.
   */
  data: Prisma.XOR<Prisma.AssetTransferUpdateManyMutationInput, Prisma.AssetTransferUncheckedUpdateManyInput>
  /**
   * Filter which AssetTransfers to update
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * Limit how many AssetTransfers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AssetTransfer upsert
 */
export type AssetTransferUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * The filter to search for the AssetTransfer to update in case it exists.
   */
  where: Prisma.AssetTransferWhereUniqueInput
  /**
   * In case the AssetTransfer found by the `where` argument doesn't exist, create a new AssetTransfer with this data.
   */
  create: Prisma.XOR<Prisma.AssetTransferCreateInput, Prisma.AssetTransferUncheckedCreateInput>
  /**
   * In case the AssetTransfer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssetTransferUpdateInput, Prisma.AssetTransferUncheckedUpdateInput>
}

/**
 * AssetTransfer delete
 */
export type AssetTransferDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
  /**
   * Filter which AssetTransfer to delete.
   */
  where: Prisma.AssetTransferWhereUniqueInput
}

/**
 * AssetTransfer deleteMany
 */
export type AssetTransferDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AssetTransfers to delete
   */
  where?: Prisma.AssetTransferWhereInput
  /**
   * Limit how many AssetTransfers to delete.
   */
  limit?: number
}

/**
 * AssetTransfer without action
 */
export type AssetTransferDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AssetTransfer
   */
  select?: Prisma.AssetTransferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AssetTransfer
   */
  omit?: Prisma.AssetTransferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssetTransferInclude<ExtArgs> | null
}
