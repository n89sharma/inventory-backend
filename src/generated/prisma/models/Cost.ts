
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Cost` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Cost
 * 
 */
export type CostModel = runtime.Types.Result.DefaultSelection<Prisma.$CostPayload>

export type AggregateCost = {
  _count: CostCountAggregateOutputType | null
  _avg: CostAvgAggregateOutputType | null
  _sum: CostSumAggregateOutputType | null
  _min: CostMinAggregateOutputType | null
  _max: CostMaxAggregateOutputType | null
}

export type CostAvgAggregateOutputType = {
  id: number | null
  asset_id: number | null
  purchase_cost: runtime.Decimal | null
  transport_cost: runtime.Decimal | null
  processing_cost: runtime.Decimal | null
  other_cost: runtime.Decimal | null
  parts_cost: runtime.Decimal | null
  total_cost: runtime.Decimal | null
  sale_price: runtime.Decimal | null
}

export type CostSumAggregateOutputType = {
  id: number | null
  asset_id: number | null
  purchase_cost: runtime.Decimal | null
  transport_cost: runtime.Decimal | null
  processing_cost: runtime.Decimal | null
  other_cost: runtime.Decimal | null
  parts_cost: runtime.Decimal | null
  total_cost: runtime.Decimal | null
  sale_price: runtime.Decimal | null
}

export type CostMinAggregateOutputType = {
  id: number | null
  asset_id: number | null
  purchase_cost: runtime.Decimal | null
  transport_cost: runtime.Decimal | null
  processing_cost: runtime.Decimal | null
  other_cost: runtime.Decimal | null
  parts_cost: runtime.Decimal | null
  total_cost: runtime.Decimal | null
  sale_price: runtime.Decimal | null
}

export type CostMaxAggregateOutputType = {
  id: number | null
  asset_id: number | null
  purchase_cost: runtime.Decimal | null
  transport_cost: runtime.Decimal | null
  processing_cost: runtime.Decimal | null
  other_cost: runtime.Decimal | null
  parts_cost: runtime.Decimal | null
  total_cost: runtime.Decimal | null
  sale_price: runtime.Decimal | null
}

export type CostCountAggregateOutputType = {
  id: number
  asset_id: number
  purchase_cost: number
  transport_cost: number
  processing_cost: number
  other_cost: number
  parts_cost: number
  total_cost: number
  sale_price: number
  _all: number
}


export type CostAvgAggregateInputType = {
  id?: true
  asset_id?: true
  purchase_cost?: true
  transport_cost?: true
  processing_cost?: true
  other_cost?: true
  parts_cost?: true
  total_cost?: true
  sale_price?: true
}

export type CostSumAggregateInputType = {
  id?: true
  asset_id?: true
  purchase_cost?: true
  transport_cost?: true
  processing_cost?: true
  other_cost?: true
  parts_cost?: true
  total_cost?: true
  sale_price?: true
}

export type CostMinAggregateInputType = {
  id?: true
  asset_id?: true
  purchase_cost?: true
  transport_cost?: true
  processing_cost?: true
  other_cost?: true
  parts_cost?: true
  total_cost?: true
  sale_price?: true
}

export type CostMaxAggregateInputType = {
  id?: true
  asset_id?: true
  purchase_cost?: true
  transport_cost?: true
  processing_cost?: true
  other_cost?: true
  parts_cost?: true
  total_cost?: true
  sale_price?: true
}

export type CostCountAggregateInputType = {
  id?: true
  asset_id?: true
  purchase_cost?: true
  transport_cost?: true
  processing_cost?: true
  other_cost?: true
  parts_cost?: true
  total_cost?: true
  sale_price?: true
  _all?: true
}

export type CostAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Cost to aggregate.
   */
  where?: Prisma.CostWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Costs to fetch.
   */
  orderBy?: Prisma.CostOrderByWithRelationInput | Prisma.CostOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CostWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Costs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Costs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Costs
  **/
  _count?: true | CostCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CostAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CostSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CostMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CostMaxAggregateInputType
}

export type GetCostAggregateType<T extends CostAggregateArgs> = {
      [P in keyof T & keyof AggregateCost]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCost[P]>
    : Prisma.GetScalarType<T[P], AggregateCost[P]>
}




export type CostGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CostWhereInput
  orderBy?: Prisma.CostOrderByWithAggregationInput | Prisma.CostOrderByWithAggregationInput[]
  by: Prisma.CostScalarFieldEnum[] | Prisma.CostScalarFieldEnum
  having?: Prisma.CostScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CostCountAggregateInputType | true
  _avg?: CostAvgAggregateInputType
  _sum?: CostSumAggregateInputType
  _min?: CostMinAggregateInputType
  _max?: CostMaxAggregateInputType
}

export type CostGroupByOutputType = {
  id: number
  asset_id: number
  purchase_cost: runtime.Decimal | null
  transport_cost: runtime.Decimal | null
  processing_cost: runtime.Decimal | null
  other_cost: runtime.Decimal | null
  parts_cost: runtime.Decimal | null
  total_cost: runtime.Decimal | null
  sale_price: runtime.Decimal | null
  _count: CostCountAggregateOutputType | null
  _avg: CostAvgAggregateOutputType | null
  _sum: CostSumAggregateOutputType | null
  _min: CostMinAggregateOutputType | null
  _max: CostMaxAggregateOutputType | null
}

type GetCostGroupByPayload<T extends CostGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CostGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CostGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CostGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CostGroupByOutputType[P]>
      }
    >
  > 



export type CostWhereInput = {
  AND?: Prisma.CostWhereInput | Prisma.CostWhereInput[]
  OR?: Prisma.CostWhereInput[]
  NOT?: Prisma.CostWhereInput | Prisma.CostWhereInput[]
  id?: Prisma.IntFilter<"Cost"> | number
  asset_id?: Prisma.IntFilter<"Cost"> | number
  purchase_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
}

export type CostOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  transport_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  processing_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  other_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  parts_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  total_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  sale_price?: Prisma.SortOrderInput | Prisma.SortOrder
  asset?: Prisma.AssetOrderByWithRelationInput
}

export type CostWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  asset_id?: number
  AND?: Prisma.CostWhereInput | Prisma.CostWhereInput[]
  OR?: Prisma.CostWhereInput[]
  NOT?: Prisma.CostWhereInput | Prisma.CostWhereInput[]
  purchase_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.DecimalNullableFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  asset?: Prisma.XOR<Prisma.AssetScalarRelationFilter, Prisma.AssetWhereInput>
}, "id" | "asset_id">

export type CostOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  transport_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  processing_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  other_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  parts_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  total_cost?: Prisma.SortOrderInput | Prisma.SortOrder
  sale_price?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.CostCountOrderByAggregateInput
  _avg?: Prisma.CostAvgOrderByAggregateInput
  _max?: Prisma.CostMaxOrderByAggregateInput
  _min?: Prisma.CostMinOrderByAggregateInput
  _sum?: Prisma.CostSumOrderByAggregateInput
}

export type CostScalarWhereWithAggregatesInput = {
  AND?: Prisma.CostScalarWhereWithAggregatesInput | Prisma.CostScalarWhereWithAggregatesInput[]
  OR?: Prisma.CostScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CostScalarWhereWithAggregatesInput | Prisma.CostScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Cost"> | number
  asset_id?: Prisma.IntWithAggregatesFilter<"Cost"> | number
  purchase_cost?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.DecimalNullableWithAggregatesFilter<"Cost"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostCreateInput = {
  purchase_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  asset: Prisma.AssetCreateNestedOneWithoutCostInput
}

export type CostUncheckedCreateInput = {
  id?: number
  asset_id: number
  purchase_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostUpdateInput = {
  purchase_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  asset?: Prisma.AssetUpdateOneRequiredWithoutCostNestedInput
}

export type CostUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  purchase_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostCreateManyInput = {
  id?: number
  asset_id: number
  purchase_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostUpdateManyMutationInput = {
  purchase_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  asset_id?: Prisma.IntFieldUpdateOperationsInput | number
  purchase_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostNullableScalarRelationFilter = {
  is?: Prisma.CostWhereInput | null
  isNot?: Prisma.CostWhereInput | null
}

export type CostCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrder
  transport_cost?: Prisma.SortOrder
  processing_cost?: Prisma.SortOrder
  other_cost?: Prisma.SortOrder
  parts_cost?: Prisma.SortOrder
  total_cost?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
}

export type CostAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrder
  transport_cost?: Prisma.SortOrder
  processing_cost?: Prisma.SortOrder
  other_cost?: Prisma.SortOrder
  parts_cost?: Prisma.SortOrder
  total_cost?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
}

export type CostMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrder
  transport_cost?: Prisma.SortOrder
  processing_cost?: Prisma.SortOrder
  other_cost?: Prisma.SortOrder
  parts_cost?: Prisma.SortOrder
  total_cost?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
}

export type CostMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrder
  transport_cost?: Prisma.SortOrder
  processing_cost?: Prisma.SortOrder
  other_cost?: Prisma.SortOrder
  parts_cost?: Prisma.SortOrder
  total_cost?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
}

export type CostSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  asset_id?: Prisma.SortOrder
  purchase_cost?: Prisma.SortOrder
  transport_cost?: Prisma.SortOrder
  processing_cost?: Prisma.SortOrder
  other_cost?: Prisma.SortOrder
  parts_cost?: Prisma.SortOrder
  total_cost?: Prisma.SortOrder
  sale_price?: Prisma.SortOrder
}

export type CostCreateNestedOneWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.CostCreateWithoutAssetInput, Prisma.CostUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.CostCreateOrConnectWithoutAssetInput
  connect?: Prisma.CostWhereUniqueInput
}

export type CostUncheckedCreateNestedOneWithoutAssetInput = {
  create?: Prisma.XOR<Prisma.CostCreateWithoutAssetInput, Prisma.CostUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.CostCreateOrConnectWithoutAssetInput
  connect?: Prisma.CostWhereUniqueInput
}

export type CostUpdateOneWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.CostCreateWithoutAssetInput, Prisma.CostUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.CostCreateOrConnectWithoutAssetInput
  upsert?: Prisma.CostUpsertWithoutAssetInput
  disconnect?: Prisma.CostWhereInput | boolean
  delete?: Prisma.CostWhereInput | boolean
  connect?: Prisma.CostWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CostUpdateToOneWithWhereWithoutAssetInput, Prisma.CostUpdateWithoutAssetInput>, Prisma.CostUncheckedUpdateWithoutAssetInput>
}

export type CostUncheckedUpdateOneWithoutAssetNestedInput = {
  create?: Prisma.XOR<Prisma.CostCreateWithoutAssetInput, Prisma.CostUncheckedCreateWithoutAssetInput>
  connectOrCreate?: Prisma.CostCreateOrConnectWithoutAssetInput
  upsert?: Prisma.CostUpsertWithoutAssetInput
  disconnect?: Prisma.CostWhereInput | boolean
  delete?: Prisma.CostWhereInput | boolean
  connect?: Prisma.CostWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CostUpdateToOneWithWhereWithoutAssetInput, Prisma.CostUpdateWithoutAssetInput>, Prisma.CostUncheckedUpdateWithoutAssetInput>
}

export type NullableDecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type CostCreateWithoutAssetInput = {
  purchase_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostUncheckedCreateWithoutAssetInput = {
  id?: number
  purchase_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostCreateOrConnectWithoutAssetInput = {
  where: Prisma.CostWhereUniqueInput
  create: Prisma.XOR<Prisma.CostCreateWithoutAssetInput, Prisma.CostUncheckedCreateWithoutAssetInput>
}

export type CostUpsertWithoutAssetInput = {
  update: Prisma.XOR<Prisma.CostUpdateWithoutAssetInput, Prisma.CostUncheckedUpdateWithoutAssetInput>
  create: Prisma.XOR<Prisma.CostCreateWithoutAssetInput, Prisma.CostUncheckedCreateWithoutAssetInput>
  where?: Prisma.CostWhereInput
}

export type CostUpdateToOneWithWhereWithoutAssetInput = {
  where?: Prisma.CostWhereInput
  data: Prisma.XOR<Prisma.CostUpdateWithoutAssetInput, Prisma.CostUncheckedUpdateWithoutAssetInput>
}

export type CostUpdateWithoutAssetInput = {
  purchase_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}

export type CostUncheckedUpdateWithoutAssetInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  purchase_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  transport_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  processing_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  other_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  parts_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  total_cost?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  sale_price?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
}



export type CostSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  purchase_cost?: boolean
  transport_cost?: boolean
  processing_cost?: boolean
  other_cost?: boolean
  parts_cost?: boolean
  total_cost?: boolean
  sale_price?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cost"]>

export type CostSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  purchase_cost?: boolean
  transport_cost?: boolean
  processing_cost?: boolean
  other_cost?: boolean
  parts_cost?: boolean
  total_cost?: boolean
  sale_price?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cost"]>

export type CostSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  asset_id?: boolean
  purchase_cost?: boolean
  transport_cost?: boolean
  processing_cost?: boolean
  other_cost?: boolean
  parts_cost?: boolean
  total_cost?: boolean
  sale_price?: boolean
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cost"]>

export type CostSelectScalar = {
  id?: boolean
  asset_id?: boolean
  purchase_cost?: boolean
  transport_cost?: boolean
  processing_cost?: boolean
  other_cost?: boolean
  parts_cost?: boolean
  total_cost?: boolean
  sale_price?: boolean
}

export type CostOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "asset_id" | "purchase_cost" | "transport_cost" | "processing_cost" | "other_cost" | "parts_cost" | "total_cost" | "sale_price", ExtArgs["result"]["cost"]>
export type CostInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}
export type CostIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}
export type CostIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  asset?: boolean | Prisma.AssetDefaultArgs<ExtArgs>
}

export type $CostPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Cost"
  objects: {
    asset: Prisma.$AssetPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    asset_id: number
    purchase_cost: runtime.Decimal | null
    transport_cost: runtime.Decimal | null
    processing_cost: runtime.Decimal | null
    other_cost: runtime.Decimal | null
    parts_cost: runtime.Decimal | null
    total_cost: runtime.Decimal | null
    sale_price: runtime.Decimal | null
  }, ExtArgs["result"]["cost"]>
  composites: {}
}

export type CostGetPayload<S extends boolean | null | undefined | CostDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CostPayload, S>

export type CostCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CostCountAggregateInputType | true
  }

export interface CostDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cost'], meta: { name: 'Cost' } }
  /**
   * Find zero or one Cost that matches the filter.
   * @param {CostFindUniqueArgs} args - Arguments to find a Cost
   * @example
   * // Get one Cost
   * const cost = await prisma.cost.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CostFindUniqueArgs>(args: Prisma.SelectSubset<T, CostFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Cost that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CostFindUniqueOrThrowArgs} args - Arguments to find a Cost
   * @example
   * // Get one Cost
   * const cost = await prisma.cost.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CostFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CostFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cost that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostFindFirstArgs} args - Arguments to find a Cost
   * @example
   * // Get one Cost
   * const cost = await prisma.cost.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CostFindFirstArgs>(args?: Prisma.SelectSubset<T, CostFindFirstArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cost that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostFindFirstOrThrowArgs} args - Arguments to find a Cost
   * @example
   * // Get one Cost
   * const cost = await prisma.cost.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CostFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CostFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Costs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Costs
   * const costs = await prisma.cost.findMany()
   * 
   * // Get first 10 Costs
   * const costs = await prisma.cost.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const costWithIdOnly = await prisma.cost.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CostFindManyArgs>(args?: Prisma.SelectSubset<T, CostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Cost.
   * @param {CostCreateArgs} args - Arguments to create a Cost.
   * @example
   * // Create one Cost
   * const Cost = await prisma.cost.create({
   *   data: {
   *     // ... data to create a Cost
   *   }
   * })
   * 
   */
  create<T extends CostCreateArgs>(args: Prisma.SelectSubset<T, CostCreateArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Costs.
   * @param {CostCreateManyArgs} args - Arguments to create many Costs.
   * @example
   * // Create many Costs
   * const cost = await prisma.cost.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CostCreateManyArgs>(args?: Prisma.SelectSubset<T, CostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Costs and returns the data saved in the database.
   * @param {CostCreateManyAndReturnArgs} args - Arguments to create many Costs.
   * @example
   * // Create many Costs
   * const cost = await prisma.cost.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Costs and only return the `id`
   * const costWithIdOnly = await prisma.cost.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CostCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Cost.
   * @param {CostDeleteArgs} args - Arguments to delete one Cost.
   * @example
   * // Delete one Cost
   * const Cost = await prisma.cost.delete({
   *   where: {
   *     // ... filter to delete one Cost
   *   }
   * })
   * 
   */
  delete<T extends CostDeleteArgs>(args: Prisma.SelectSubset<T, CostDeleteArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Cost.
   * @param {CostUpdateArgs} args - Arguments to update one Cost.
   * @example
   * // Update one Cost
   * const cost = await prisma.cost.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CostUpdateArgs>(args: Prisma.SelectSubset<T, CostUpdateArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Costs.
   * @param {CostDeleteManyArgs} args - Arguments to filter Costs to delete.
   * @example
   * // Delete a few Costs
   * const { count } = await prisma.cost.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CostDeleteManyArgs>(args?: Prisma.SelectSubset<T, CostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Costs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Costs
   * const cost = await prisma.cost.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CostUpdateManyArgs>(args: Prisma.SelectSubset<T, CostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Costs and returns the data updated in the database.
   * @param {CostUpdateManyAndReturnArgs} args - Arguments to update many Costs.
   * @example
   * // Update many Costs
   * const cost = await prisma.cost.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Costs and only return the `id`
   * const costWithIdOnly = await prisma.cost.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CostUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Cost.
   * @param {CostUpsertArgs} args - Arguments to update or create a Cost.
   * @example
   * // Update or create a Cost
   * const cost = await prisma.cost.upsert({
   *   create: {
   *     // ... data to create a Cost
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Cost we want to update
   *   }
   * })
   */
  upsert<T extends CostUpsertArgs>(args: Prisma.SelectSubset<T, CostUpsertArgs<ExtArgs>>): Prisma.Prisma__CostClient<runtime.Types.Result.GetResult<Prisma.$CostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Costs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostCountArgs} args - Arguments to filter Costs to count.
   * @example
   * // Count the number of Costs
   * const count = await prisma.cost.count({
   *   where: {
   *     // ... the filter for the Costs we want to count
   *   }
   * })
  **/
  count<T extends CostCountArgs>(
    args?: Prisma.Subset<T, CostCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CostCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Cost.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CostAggregateArgs>(args: Prisma.Subset<T, CostAggregateArgs>): Prisma.PrismaPromise<GetCostAggregateType<T>>

  /**
   * Group by Cost.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CostGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CostGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CostGroupByArgs['orderBy'] }
      : { orderBy?: CostGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Cost model
 */
readonly fields: CostFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Cost.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CostClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  asset<T extends Prisma.AssetDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AssetDefaultArgs<ExtArgs>>): Prisma.Prisma__AssetClient<runtime.Types.Result.GetResult<Prisma.$AssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Cost model
 */
export interface CostFieldRefs {
  readonly id: Prisma.FieldRef<"Cost", 'Int'>
  readonly asset_id: Prisma.FieldRef<"Cost", 'Int'>
  readonly purchase_cost: Prisma.FieldRef<"Cost", 'Decimal'>
  readonly transport_cost: Prisma.FieldRef<"Cost", 'Decimal'>
  readonly processing_cost: Prisma.FieldRef<"Cost", 'Decimal'>
  readonly other_cost: Prisma.FieldRef<"Cost", 'Decimal'>
  readonly parts_cost: Prisma.FieldRef<"Cost", 'Decimal'>
  readonly total_cost: Prisma.FieldRef<"Cost", 'Decimal'>
  readonly sale_price: Prisma.FieldRef<"Cost", 'Decimal'>
}
    

// Custom InputTypes
/**
 * Cost findUnique
 */
export type CostFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * Filter, which Cost to fetch.
   */
  where: Prisma.CostWhereUniqueInput
}

/**
 * Cost findUniqueOrThrow
 */
export type CostFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * Filter, which Cost to fetch.
   */
  where: Prisma.CostWhereUniqueInput
}

/**
 * Cost findFirst
 */
export type CostFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * Filter, which Cost to fetch.
   */
  where?: Prisma.CostWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Costs to fetch.
   */
  orderBy?: Prisma.CostOrderByWithRelationInput | Prisma.CostOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Costs.
   */
  cursor?: Prisma.CostWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Costs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Costs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Costs.
   */
  distinct?: Prisma.CostScalarFieldEnum | Prisma.CostScalarFieldEnum[]
}

/**
 * Cost findFirstOrThrow
 */
export type CostFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * Filter, which Cost to fetch.
   */
  where?: Prisma.CostWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Costs to fetch.
   */
  orderBy?: Prisma.CostOrderByWithRelationInput | Prisma.CostOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Costs.
   */
  cursor?: Prisma.CostWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Costs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Costs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Costs.
   */
  distinct?: Prisma.CostScalarFieldEnum | Prisma.CostScalarFieldEnum[]
}

/**
 * Cost findMany
 */
export type CostFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * Filter, which Costs to fetch.
   */
  where?: Prisma.CostWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Costs to fetch.
   */
  orderBy?: Prisma.CostOrderByWithRelationInput | Prisma.CostOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Costs.
   */
  cursor?: Prisma.CostWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Costs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Costs.
   */
  skip?: number
  distinct?: Prisma.CostScalarFieldEnum | Prisma.CostScalarFieldEnum[]
}

/**
 * Cost create
 */
export type CostCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * The data needed to create a Cost.
   */
  data: Prisma.XOR<Prisma.CostCreateInput, Prisma.CostUncheckedCreateInput>
}

/**
 * Cost createMany
 */
export type CostCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Costs.
   */
  data: Prisma.CostCreateManyInput | Prisma.CostCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Cost createManyAndReturn
 */
export type CostCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * The data used to create many Costs.
   */
  data: Prisma.CostCreateManyInput | Prisma.CostCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Cost update
 */
export type CostUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * The data needed to update a Cost.
   */
  data: Prisma.XOR<Prisma.CostUpdateInput, Prisma.CostUncheckedUpdateInput>
  /**
   * Choose, which Cost to update.
   */
  where: Prisma.CostWhereUniqueInput
}

/**
 * Cost updateMany
 */
export type CostUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Costs.
   */
  data: Prisma.XOR<Prisma.CostUpdateManyMutationInput, Prisma.CostUncheckedUpdateManyInput>
  /**
   * Filter which Costs to update
   */
  where?: Prisma.CostWhereInput
  /**
   * Limit how many Costs to update.
   */
  limit?: number
}

/**
 * Cost updateManyAndReturn
 */
export type CostUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * The data used to update Costs.
   */
  data: Prisma.XOR<Prisma.CostUpdateManyMutationInput, Prisma.CostUncheckedUpdateManyInput>
  /**
   * Filter which Costs to update
   */
  where?: Prisma.CostWhereInput
  /**
   * Limit how many Costs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Cost upsert
 */
export type CostUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * The filter to search for the Cost to update in case it exists.
   */
  where: Prisma.CostWhereUniqueInput
  /**
   * In case the Cost found by the `where` argument doesn't exist, create a new Cost with this data.
   */
  create: Prisma.XOR<Prisma.CostCreateInput, Prisma.CostUncheckedCreateInput>
  /**
   * In case the Cost was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CostUpdateInput, Prisma.CostUncheckedUpdateInput>
}

/**
 * Cost delete
 */
export type CostDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
  /**
   * Filter which Cost to delete.
   */
  where: Prisma.CostWhereUniqueInput
}

/**
 * Cost deleteMany
 */
export type CostDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Costs to delete
   */
  where?: Prisma.CostWhereInput
  /**
   * Limit how many Costs to delete.
   */
  limit?: number
}

/**
 * Cost without action
 */
export type CostDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cost
   */
  select?: Prisma.CostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Cost
   */
  omit?: Prisma.CostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CostInclude<ExtArgs> | null
}
